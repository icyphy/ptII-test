<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="HlaPublisher" class="org.hlacerti.lib.HlaPublisher">
  <description>
This actor provides updates to shared objects in an HLA (High Level Architecture)&#10; federation. The shared objects are are instances of classes defined in a&#10; FED file (Federation Execution Data). Each class has attributes, and this&#10; actor sends updates to an attribute of an instance of a class when it&#10; receives data on its input.  If there are instances of &lt;a href=&quot;../../../org/hlacerti/lib/HlaSubscriber.xml&quot;&gt;org.hlacerti.lib.HlaSubscriber&lt;/a&gt;&#10; that refer to the same attribute of the same instance, then those will be&#10; notified of the update.&#10; &#10; This actor requires that there be an instance of &lt;a href=&quot;../../../org/hlacerti/lib/HlaManager.xml&quot;&gt;org.hlacerti.lib.HlaManager&lt;/a&gt; in the&#10; same model. That instance references the FED file that is required to&#10; define the class referred to in this HlaPublisher, and that class is&#10; required to have an attribute with a name matching the name given here.&#10; &#10; The name of the instance is arbitrary. If an instance with the specified&#10; name does not already exist, it will be created during initialization of&#10; the model. If two instances of this HlaPublisher actor refer to the&#10; same instance name, then they will send updates to the same HLA instance,&#10; but they are required to update distinct attributes of that instance.&#10; &#10; During initialization, the HlaManager will notify the RTI (Run Time&#10; Infrastructure) of the intent to update this particular attribute&#10; of this particular instance of the class.&#10;&#10; This actor throws an exception if the attribute name or the class name or&#10; the instance name is empty. An exception is also thrown if the class name&#10; or the attribute name is not defined in the FED file.&#10;&#10; &lt;p&gt;This actor provides 3 information: a class name &lt;i&gt;C&lt;/i&gt;, an attribute&#10; name &lt;i&gt;attr&lt;/i&gt; and an instance name &lt;i&gt;i&lt;/i&gt;. To each HlaPublisher actor&#10; correspond a unique HlaSubscriber actor in each other federate that wants&#10; to receive the updates for the attribute &lt;i&gt;attr&lt;/i&gt; of instance named &lt;i&gt;i&lt;/i&gt;.&#10; Let us recall some terms:&#10; - FOM: Federation Object Model&#10; - FED: Federation Execution Data, contains classes and attributes defined&#10;   in the FOM and, for each attribute, if it is timestamped and its QoS &#10; - RTI: Run-Time Infrastructure. The RTI has a Central RTI Component (CRC)&#10;   and one or more Local RTI Components (LRC). The LRC has a numerical &#10;   representation (handle) for all object classes and object class attributes&#10;   contained in the FED file.&#10; - RTIa: RTI Ambassador interface; Federates can communicate with the RTI&#10;   (LRC) through the RTIa.&#10; &#10; The information supplied in this actor by the user is used in the following&#10; way by the &lt;a href=&quot;../../../org/hlacerti/lib/HlaManager.xml&quot;&gt;org.hlacerti.lib.HlaManager&lt;/a&gt; attribute (deployed in the same model):&#10; &#10; 1. During the initialization phase, the &lt;a href=&quot;../../../org/hlacerti/lib/HlaManager.xml&quot;&gt;org.hlacerti.lib.HlaManager&lt;/a&gt; calls the HLA&#10; services for:&#10;  - Publishing all the &lt;i&gt;j&lt;/i attributes &lt;i&gt;attr-j&lt;/i of a class  &lt;i&gt;C&lt;/i&gt;&#10;    (gathered from &lt;i&gt;j&lt;/i HlaPublisher actors) by calling&#10;    rtia.publishObjectClass(classHandle, _attributesLocal), where &lt;i&gt;classHandle&lt;/i&#10;    is provided by calling the service rtia.getObjectClassHandle() for  &lt;i&gt;C&lt;/i&gt;;&#10;    _attributesLocal is the set constructed by calling rtia.getAttributeHandle()&#10;    for each &lt;i&gt;attr-j&lt;/i in this Ptolemy federate  model (the set is obtained&#10;    from all HlaPublisher actors); &#10;  - Registering an instance of class &lt;i&gt;C&lt;/i&gt; named &lt;i&gt;i&lt;/i&gt; for this federate, &#10;    informing the LRC that a new object instance exists:&#10;    rtia.registerObjectInstance(classHandle, classInstanceName), with &#10;    classInstanceName = &lt;i&gt;i&lt;/i&gt;.&#10;&#10; 2. During the simulation loop phase, the &lt;a href=&quot;../../../org/hlacerti/lib/HlaManager.xml&quot;&gt;org.hlacerti.lib.HlaManager&lt;/a&gt; calls the UAV service&#10; for updating the value of an attribute of a class instance. Each HlaPublisher&#10; actor is related to one UAV call:&#10; _rtia.updateAttributeValues(objectInstanceId, suppAttributes, tag, uavTimeStamp).&#10; The UAV service is send after a cycle in the &lt;a href=&quot;../../../org/hlacerti/lib/HlaManager.xml&quot;&gt;org.hlacerti.lib.HlaManager&lt;/a&gt; that starts&#10; with an event e(t) received at the input port of the HlaPublisher actor, and&#10; when the federate eventually has advanced its time to &lt;i&gt;uavTimeStamp&lt;\i&gt;=t'.&#10; The value of t' depends on the time management (NER or TAR), see &lt;a href=&quot;../../../org/hlacerti/lib/HlaManager.xml&quot;&gt;org.hlacerti.lib.HlaManager&lt;/a&gt; code.&#10; The optional parameter &lt;i&gt;tag&lt;/i&gt; is not used in the current implementation.&#10; &lt;/p&gt;&lt;p&gt;&#10; Parameters &lt;i&gt;classObjectName&lt;/i&gt; and &lt;i&gt;attributeName&lt;/i&gt; need to match the&#10; name of the class and the attribute defined in the Federate Object Model&#10; (FOM) specified for the Federation and indicated in the FED file.&#10; The data type of the input port of this actor must have the same type of the&#10; HLA attribute (defined in the FOM, not present in the FED file). &#10; &lt;/p&gt;&lt;p&gt;&#10; The parameter &lt;i&gt;classInstanceName&lt;/i&gt; is chosen by the user. Each&#10; federate has the ownership of the attributes of an instance of object that&#10; it publishes. &#10; &lt;/p&gt;&lt;p&gt; How to define a FOM? The design of a FOM needs a careful attention.&#10; One of the criteria is the reusability of the FOM and federates. A good &#10; and simple choice is design a FOM with a hierarchy such that all &#10; attributes of a (sub-)class are published by a same federate. But this is&#10; not mandatory. For example, consider a FOM of a federation with a class C&#10; with 3 attributes attr2, attr2 and attr3. The federation has 2 federates, F1&#10; and F2. If F1 publishes C.attr1 and C.attr3 and F2 publishes C.attr2, then&#10; the name of the instance of class C must be different in both federates. &#10; Federate F1 has 2 HlaPublisher actors: C.attr1.i1 and C.attr3.i1&#10; (it publishes two attributes of a same class instance); Federate F2 has one&#10; HlaPublisher actor: C.attr3.i2 (it publishes one attribute of a class&#10; instance, whose name is different from the the one published by F1).&#10; &lt;/p&gt;&lt;p&gt;&#10; See two different federations using the same FOM and simulating the same&#10; system: 2 billard balls of class Bille sending their position in a viewer.&#10;  &lt;/p&gt;&lt;p&gt;&#10; The parameter &lt;i&gt;useCertiMessageBuffer&lt;/i&gt; is chosen by the user. It &#10; indicates if the event is wrapped in a CERTI message buffer,&#10; certi.communication.MessageBuffer, see &lt;a href=&quot;../../../org/hlacerti/lib/MessageProcessing.xml&quot;&gt;org.hlacerti.lib.MessageProcessing&lt;/a&gt;. All&#10; HlaSubscriber actors with parameters &lt;i&gt;{C, attr, i}&lt;/i&gt; must have the same&#10; choice for this parameter.&#10; &lt;/p&gt;&lt;p&gt;  </description>
  <author>Gilles Lasnier, Contributors: Patricia Derler, David Come</author>
  <version>$Id: HlaPublisher.java 214 2018-04-01 13:32:02Z j.cardoso $</version>
  <since>Ptolemy II 11.0</since>
  <Pt.ProposedRating>Yellow (glasnier)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (glasnier)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="input">The input port.</port>
    <!--ptolemy.data.expr.Parameter-->
    <property name="attributeName">The HLA attribute name the HLASubscriber is mapped to.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="classObjectName">The object class of the HLA attribute to publish.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="classInstanceName">The name of the HLA class instance for this HlaSubscriber.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="useCertiMessageBuffer">Indicate if the event is wrapped in a CERTI message buffer.</property>
</doc>
