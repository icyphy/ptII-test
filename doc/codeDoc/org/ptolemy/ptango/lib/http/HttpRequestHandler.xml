<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="HttpRequestHandler" class="org.ptolemy.ptango.lib.http.HttpRequestHandler">
  <description>
An actor that handles an HTTP request by producing output&#10;  and waiting for an input that provides a response.&#10;  This actor requires that the model that contains&#10;  it include an instance of &lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/WebServer.xml&quot;&gt;org.ptolemy.ptango.lib.http.WebServer&lt;/a&gt;, which discovers this actor and&#10;  delegates HTTP requests to a servlet that this actor creates.&#10;  It also requires that the model containing this actor provide&#10;  exactly one input to at least one of the input ports in response to&#10;  every output request,&#10;  and that such responses are delivered to its input in the very&#10;  next microstep, or at least before any other request is made&#10;  by the WebServer.&#10;  &lt;p&gt;&#10;  The &lt;i&gt;path&lt;/i&gt; parameter specifies which HTTP requests will&#10;  be delegated to this actor. If the base URL for the web server&#10;  is &quot;http://localhost:8080&quot;, say, then request of the form&#10;  &quot;http://localhost:8080/&lt;i&gt;path&lt;/i&gt;&quot; will be delegated to this&#10;  actor. It is an error if two instances of this actor to have the&#10;  same &lt;i&gt;path&lt;/i&gt; in a model?&#10;  &lt;p&gt;&#10;  When this actor receives an HTTP request from the WebServer, it&#10;  issues a request for the director to fire it at the greater of&#10;  the current time of the director or the time elapsed since&#10;  the last invocation of initialize() (in seconds).&#10;  When the actor fires, it produces on its output ports the details&#10;  of the request, time stamped by the elapsed time since the model&#10;  started executing. It expects to be in a model that will send&#10;  it data to input ports with the response to HTTP request.&#10;  If that response does not arrive within &lt;i&gt;timeout&lt;/i&gt;&#10;  (default 30000) milliseconds, then this actor will a issue&#10;  timeout response and will discard the response when it eventually&#10;  arrives.&#10;  &lt;p&gt;&#10;  This actor is designed to be used in a DE model (with a DEDirector).&#10;  Since a model using this actor must deliver a response for&#10;  every request, the model must put this actor in a feedback&#10;  loop. The requests appear on the outputs of this actor,&#10;  and the responses appear on the inputs. Each such feedback&#10;  loop is required to include an instance of &lt;a href=&quot;../../../../../ptolemy/actor/lib/MicrostepDelay.xml&quot;&gt;ptolemy.actor.lib.MicrostepDelay&lt;/a&gt;&#10;  in order to break the causality loop that the feedback loop would&#10;  otherwise incur.&#10;  The downstream model should be used to construct a response.&#10;  For example, to simply serve a web page, put a&#10;  &lt;a href=&quot;../../../../../ptolemy/actor/lib/io/FileReader.xml&quot;&gt;ptolemy.actor.lib.io.FileReader&lt;/a&gt; actor to read the response from a local&#10;  file and a &lt;a href=&quot;../../../../../ptolemy/actor/lib/MicrostepDelay.xml&quot;&gt;ptolemy.actor.lib.MicrostepDelay&lt;/a&gt; downstream in a feedback&#10;  loop connected back to the response input.&#10;  &lt;p&gt;&#10;  Some of the output ports (&lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/HttpRequestHandler.xml#parameters&quot;&gt;parameters&lt;/a&gt; and &lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/HttpRequestHandler.xml#headers&quot;&gt;headers&lt;/a&gt;)&#10;  produce records and constrain their output type to be less than&#10;  or equal to an empty record. This does not, however, provide&#10;  enough information for type inference. If the downstream model&#10;  that receives these records &lt;i&gt;requires&lt;/i&gt; particular fields&#10;  in the record, then putting a &lt;a href=&quot;../../../../../ptolemy/actor/lib/RecordDisassembler.xml&quot;&gt;ptolemy.actor.lib.RecordDisassembler&lt;/a&gt; actor downstream&#10;  to extract the field, and enabling backward type inference at the top&#10;  level of the model will result in a constraint on this port that the&#10;  record contain the specified field.  A malformed URL that does&#10;  not contain the specified record fields will result in a response&#10;  400 Bad Request, meaning &quot;the request could not be understood&#10;  by the server due to malformed syntax.&#10;  The client SHOULD NOT repeat the request without modifications.&quot;&#10;  If the downstream model does not require&#10;  any particular fields, but will rather examine any fields that&#10;  are provided, for example in a &lt;a href=&quot;../../../../../ptolemy/actor/lib/jjs/JavaScript.xml&quot;&gt;ptolemy.actor.lib.jjs.JavaScript&lt;/a&gt; actor, then&#10;  you can declare the output ports of this actor to be of type &quot;record&quot;,&#10;  or you can declare the input port of the downstream actor to be&#10;  of type &quot;record&quot; and enable backward type inference. In this case,&#10;  any fields that are provided will be passed downstream as a record.  </description>
  <author>Elizabeth Latronico, Edward A. Lee, and Marten Lohstroh</author>
  <version>$Id$</version>
  <since>Ptolemy II 10.0</since>
  <Pt.ProposedRating>Red (ltrnc)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (ltrnc)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="body">An output that sends the body of the request, or an empty string&#10;  if there isn't one. At this time, only a string body is supported,&#10;  so the type of this port is string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="cookies">An output that sends the cookies specified by the&#10;  &lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/HttpRequestHandler.xml#requestedCookies&quot;&gt;requestedCookies&lt;/a&gt; parameter, with values&#10;  provided by a get request. If the get request does&#10;  have cookies with names matching those in requestedCookies,&#10;  then those values will be empty strings.&#10;  The output will be a RecordToken with the field names given by&#10;  requestedCookies, and the field values being strings.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="headers">The header information of an HTTP request as a record.&#10;  Standard message header field names are given at&#10;  &lt;a href=&quot;http://www.iana.org/assignments/message-headers/message-headers.xml#perm-headers&quot;&gt;http://www.iana.org/assignments/message-headers/message-headers.xml#perm-headers&lt;/a&gt;&#10;  (see also &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_HTTP_header_fields&quot;&gt;http://en.wikipedia.org/wiki/List_of_HTTP_header_fields&lt;/a&gt;).&#10;  Common header fields include&#10;  &lt;ul&gt;&#10;  &lt;li&gt; &quot;Accept&quot;, which designates what Content-Type&#10;  for responses are acceptable, and might have value, for example, &quot;text/html&quot;.&lt;/li&gt;&#10;  &lt;li&gt; &quot;Content-Type&quot;, which designates the content type of the body of the request&#10;  (for POST and PUT requests that include a body).&lt;/li&gt;&#10;  &lt;li&gt; &quot;Date&quot;, the date and time that the request was sent, in HTTP-date format.&lt;/li&gt;&#10;  &lt;li&gt; &quot;Host&quot;, the domain name (and port) of the server to which the request is sent.&lt;/li&gt;&#10;  &lt;li&gt; &quot;User-Agent&quot;, a string identifying the originator of the request (see&#10;  &lt;a href=&quot;http://en.wikipedia.org/wiki/User_agent&quot;&gt;http://en.wikipedia.org/wiki/User_agent&lt;/a&gt;&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  See the class comments for type constraints&#10;  on output ports that produce records.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="method">An output port that sends a string indicating the method of&#10;  the HTTP request, including at least the possibilities &quot;GET&quot;&#10;  and &quot;POST&quot;.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="parameters">An output port that sends a record detailing any&#10;  parameters included in an HTTP request.&#10;  These are values appended to the URL in the form&#10;  of ...?name=value. The output will be a record with&#10;  one field for each name. If the request assigns multiple&#10;  values to the same name, then the field value of the record&#10;  will be an array of strings. Otherwise, it will simply&#10;  be a string. See the class comments for type constraints&#10;  on output ports that produce records.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="requestor">Output port that produces the name or IP address of the&#10;  client or the last proxy that sent the request.&#10;  This is a string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="responseBody">An input port on which to provide the&#10;  response body to issue to an HTTP request. When this input port&#10;  receives an event, if there is a pending request from&#10;  a web server, then that pending request responds with the&#10;  value of the input. Otherwise, the response is discarded.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="responseCode">An input port on which to provide the&#10;  response code to issue to an HTTP request. When this input port&#10;  receives an event, if there is a pending request from&#10;  a web server, then that pending request will receive&#10;  the specified code as a response. If there is no code&#10;  provided, but a response has been provided on the&#10;  &lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/HttpRequestHandler.xml#responseBody&quot;&gt;responseBody&lt;/a&gt; input port, then the response code&#10;  will be 200 (OK). Standard response codes are described at&#10;  &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&lt;/a&gt;.&#10;  This port has type int.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="setCookies">An input on which to provide new cookies and/or new cookie values.&#10;  These will be set in the response when data is received on the &lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/HttpRequestHandler.xml#responseBody&quot;&gt;responseBody&lt;/a&gt;&#10;  input in the same firing, or if there is no token on the responseBody&#10;  input, will be treated as cookies accompanying an empty string response.&#10;  This has type record.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="uri">An output port that sends the relative URI of a get request,&#10;  which must match the pattern given by the &lt;i&gt;path&lt;/i&gt; parameter.&#10;  This has type string.</port>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="path">The relative URL of HTTP requests that this actor handles.&#10;  This is a string that defaults to &quot;/*&quot;, meaning that all&#10;  requests are handled, unless there is another instance&#10;  of the actor with a more specific path that matches.&#10;  Preference is given to longer paths. So, for example,&#10;  a request &quot;http://localhost:8080/foo/bar&quot; will be&#10;  delegated to an actor with &lt;i&gt;path&lt;/i&gt; = &quot;/foo/bar/*&quot;,&#10;  if there is one, and otherwise to an actor with&#10;  &lt;i&gt;path&lt;/i&gt; = &quot;/foo/*&quot;, if there is one, and finally&#10;  to an actor with &lt;i&gt;path&lt;/i&gt; = &quot;/*&quot;, if the first two&#10;  don't exist.  If two actors specify the same path,&#10;  then an exception will be thrown by the&#10;  &lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/WebServer.xml&quot;&gt;org.ptolemy.ptango.lib.http.WebServer&lt;/a&gt;.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="requestedCookies">An array of names of cookies that this actor should retrieve from&#10;  an HTTP request and produce on the cookies output&#10;  port. This is an array of strings that defaults to an empty array.</property>
    <!--ptolemy.actor.parameters.PortParameter-->
    <property name="responseContentType">The content type of the response.&#10;  This is a string with default value &quot;text/html&quot;,&#10;  which specifies that the content type of the response is text in HTML format.&#10;  Valid alternatives include &quot;text/plain&quot;, &quot;text/csv&quot;, &quot;text/xml&quot;, &quot;application/javascript&quot;,&#10;  &quot;application/json&quot;, and many others.&#10;  Standard content types are described at&#10;  &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_media_type&quot;&gt;http://en.wikipedia.org/wiki/Internet_media_type&lt;/a&gt;.</property>
    <!--ptolemy.actor.parameters.PortParameter-->
    <property name="responseHeaders">The header data to include in the response.&#10;  This is a record containing any number of fields.&#10;  The string value of each field will be the value of the header.&#10;  By default, it contains an empty record, which means that the only header&#10;  information provided in the response will be Content-Type as given by&#10;  &lt;a href=&quot;../../../../../org/ptolemy/ptango/lib/http/HttpRequestHandler.xml#responseContentType&quot;&gt;responseContentType&lt;/a&gt;.&#10;  Standard message header field names are given at&#10;  &lt;a href=&quot;http://www.iana.org/assignments/message-headers/message-headers.xml#perm-headers&quot;&gt;http://www.iana.org/assignments/message-headers/message-headers.xml#perm-headers&lt;/a&gt;&#10;  (see also &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_HTTP_header_fields&quot;&gt;http://en.wikipedia.org/wiki/List_of_HTTP_header_fields&lt;/a&gt;).</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="timeout">The time in milliseconds to wait after producing the details&#10;  of a request on the output ports for a response to appear at&#10;  the input ports. This is a long that defaults to 30,000.&#10;  If this time expires before an input is received, then this actor&#10;  will issue a generic timeout response to the HTTP request.&#10;  If this actor later receives a response, and there is no pending&#10;  request, it will discard that response.</property>
</doc>
