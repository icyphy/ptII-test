<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
  <description>
An actor that handles an HTTP request by producing output&#10;  and waiting for an input that provides a response.&#10;  This actor requires that the model that contains it includes an&#10;  instance of &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/WebServer.xml&quot;&gt;org.ptolemy.ptango.lib.WebServer&lt;/a&gt;, which discovers this actor and&#10;  delegates HTTP requests to a servlet that this actor creates.&#10;  It also requires that the model containing this actor provide&#10;  exactly one input to either the &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#response&quot;&gt;response&lt;/a&gt; or &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#setCookies&quot;&gt;setCookies&lt;/a&gt;&#10;  input port (or both) in response to every output request,&#10;  and that such responses are delivered in the same order as&#10;  the requests they are responding to.&#10;  &lt;p&gt;&#10;  The &lt;i&gt;path&lt;/i&gt; parameter specifies which HTTP requests will&#10;  be delegated to this actor. If the base URL for the web server&#10;  is &quot;http://localhost:8080&quot;, say, then request of the form&#10;  &quot;http://localhost:8080/&lt;i&gt;path&lt;/i&gt;&quot; will be delegated to this&#10;  actor.&#10;  &lt;p&gt;&#10;  When this actor receives an HTTP request from the WebServer, it&#10;  issues a request for the director to fire it at the greater of&#10;  the current time of the director or the time elapsed since&#10;  the last invocation of initialize() (in seconds).&#10;  When the actor fires, it produces on its output ports the details&#10;  of the request, time stamped by the elapsed time since the model&#10;  started executing. It expects to be in a model that will send&#10;  it data to either the &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#response&quot;&gt;response&lt;/a&gt; or &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#setCookies&quot;&gt;setCookies&lt;/a&gt;&#10;  input port (or both) with the response to HTTP request.&#10;  If that response does not arrive within &lt;i&gt;timeout&lt;/i&gt;&#10;  (default 30000) milliseconds, then this actor will a issue&#10;  timeout response and will discard the response when it eventually&#10;  arrives.&#10;  &lt;p&gt;&#10;  This actor is designed to be used in a DE model (with a DEDirector).&#10;  Since a model using this actor must deliver a response for&#10;  every request, the model must put this actor in a feedback&#10;  loop. The requests appear on the outputs of this actor,&#10;  and the responses appear on the inputs. Each such feedback&#10;  loop is required to include an instance of &lt;a href=&quot;../../../../ptolemy/actor/lib/MicrostepDelay.xml&quot;&gt;ptolemy.actor.lib.MicrostepDelay&lt;/a&gt;&#10;  (or &lt;a href=&quot;../../../../ptolemy/actor/lib/TimeDelay.xml&quot;&gt;ptolemy.actor.lib.TimeDelay&lt;/a&gt;, if you wish to model response times) in order&#10;  to break the causality loop that the feedback loop would&#10;  otherwise incur.&#10;  The downstream model should be used to construct a response.&#10;  For example, to simply serve a web page, put a&#10;  &lt;a href=&quot;../../../../ptolemy/actor/lib/io/FileReader.xml&quot;&gt;ptolemy.actor.lib.io.FileReader&lt;/a&gt; actor to read the response from a local&#10;  file and a &lt;a href=&quot;../../../../ptolemy/actor/lib/MicrostepDelay.xml&quot;&gt;ptolemy.actor.lib.MicrostepDelay&lt;/a&gt; downstream in a feedback&#10;  loop connected back to the response input.  </description>
  <author>Elizabeth Latronico and Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 10.0</since>
  <Pt.ProposedRating>Red (ltrnc)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (ltrnc)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="getCookies">An output that sends the cookies specified by the&#10;  &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#requestedCookies&quot;&gt;requestedCookies&lt;/a&gt; parameter, with values&#10;  provided by a get request. If the get request does&#10;  have cookies with names matching those in requestedCookies,&#10;  then those values will be empty strings.&#10;  The output will be a RecordToken with the field names given by&#10;  requestedCookies, and the field values being strings.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="getParameters">An output port that sends parameters included in a get request.&#10;  These are values appended to the URL in the form&#10;  of ...?name=value. The output will be a record with&#10;  one field for each name. If the request assigns multiple&#10;  values to the same name, then the field value of the record&#10;  will be an array of strings. Otherwise, it will simply&#10;  be a string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="getRequestURI">An output port that sends the relative URI of a get request,&#10;  which must match the pattern given by the &lt;i&gt;path&lt;/i&gt; parameter.&#10;  This has type string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="postBody">An output that sends the body of the request, if any.&#10;  HTTPActor only offers a body output for POST and PUT requests.  While it&#10;  is technically possible for a GET request to have a body, this is&#10;  discouraged since GET requests are supposed to be idempotent.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="postCookies">An output that sends the cookies specified by the&#10;  &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#requestedCookies&quot;&gt;requestedCookies&lt;/a&gt; parameter, with values&#10;  provided by a post request. If the post request does&#10;  have cookies with names matching those in requestedCookies,&#10;  then those values will be empty strings.&#10;  The output will be a RecordToken with the field names given by&#10;  requestedCookies, and the field values being strings.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="postParameters">An output port that sends parameters included in a post request.&#10;  The output will be a record with&#10;  one field for each name. If the request assigns multiple&#10;  values to the name, then the field value of the record&#10;  will be an array of strings. Otherwise, it will simply&#10;  be a string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="postRequestURI">An output port that sends the relative URI of a post request,&#10;  which must match the pattern given by the &lt;i&gt;path&lt;/i&gt; parameter.&#10;  This has type string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="putBody">An output that sends the body of the request, if any.&#10;  HTTPActor only offers a body output for POST and PUT requests.  While it&#10;  is technically possible for a GET request to have a body, this is&#10;  discouraged since GET requests are supposed to be idempotent.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="putCookies">An output that sends the cookies specified by the&#10;  &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#requestedCookies&quot;&gt;requestedCookies&lt;/a&gt; parameter, with values&#10;  provided by a put request. If the put request does&#10;  have cookies with names matching those in requestedCookies,&#10;  then those values will be empty strings.&#10;  The output will be a RecordToken with the field names given by&#10;  requestedCookies, and the field values being strings.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="putParameters">An output port that sends parameters included in a put request.&#10;  The output will be a record with&#10;  one field for each name. If the request assigns multiple&#10;  values to the name, then the field value of the record&#10;  will be an array of strings. Otherwise, it will simply&#10;  be a string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="putRequestURI">An output port that sends the relative URI of a put request,&#10;  which must match the pattern given by the &lt;i&gt;path&lt;/i&gt; parameter.&#10;  This has type string.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="response">An input port on which to provide the&#10;  response to issue to an HTTP request. When this input port&#10;  receives an event, if there is a pending get or post request from&#10;  a web server, then that pending request responds with the&#10;  value of the input. Otherwise, the response is recorded,&#10;  and the next get or post request received will be given the response.&#10;  For convenience, this is a multiport, and a response can be&#10;  provided on any input channel. If multiple responses are provided&#10;  simultaneously, the last one (on the highest numbered channel)&#10;  will prevail.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="setCookies">An input on which to provide new cookies and/or new cookie values.&#10;  These will be set in the HttpResponse received on the &lt;a href=&quot;../../../../org/ptolemy/ptango/lib/HttpActor.xml#response&quot;&gt;response&lt;/a&gt;&#10;  input in the same firing, or if there is no token on the response&#10;  input, will be treated as cookies accompanying an empty string response.&#10;  This has type record.</port>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="path">The relative URL of HTTP requests that this actor handles.&#10;  This is a string that defaults to &quot;/*&quot;, meaning that all&#10;  requests are handled, unless there is another instance&#10;  of the actor with a more specific path that matches.&#10;  Preference is given to longer paths. So, for example,&#10;  a request &quot;http://localhost:8080/foo/bar&quot; will be&#10;  delegated to an actor with &lt;i&gt;path&lt;/i&gt; = &quot;/foo/bar/*&quot;,&#10;  if there is one, and otherwise to an actor with&#10;  &lt;i&gt;path&lt;/i&gt; = &quot;/foo/*&quot;, if there is one, and finally&#10;  to an actor with &lt;i&gt;path&lt;/i&gt; = &quot;/*&quot;, if the first two&#10;  don't exist.  If two actors specify the same path,&#10;  then it is undefined which one gets the request.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="requestedCookies">An array of names of cookies that this actor should retrieve from&#10;  an HTTP request and produce on the getCookies and putCookies output&#10;  ports. This is an array of strings that defaults to an empty array.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="timeout">The time in milliseconds to wait after producing the details&#10;  of a request on the output ports for a response to appear at&#10;  the input ports. This is a long that defaults to 30,000.&#10;  If this time expires before an input is received, then this actor&#10;  will issue a generic timeout response to the HTTP request.</property>
</doc>
