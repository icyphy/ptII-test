<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="HTVQEncode" class="ptolemy.domains.sdf.lib.vq.HTVQEncode">
  <description>
This actor encodes a matrix using Hierarchical Table-Lookup Vector&#10; Quantization.&#10;&#10; &lt;p&gt;The matrix must be of dimensions that are amenable to this&#10; method. (i.e. 2x1, 2x2, 4x2, 4x4, etc.) Instead of performing a&#10; full-search vector quantization during execution, all the optimal encoding&#10; vectors are calculated before hand and stored in a lookup table. (This is&#10; known as Table-lookup Vector Quantization).  However, for large vector sizes&#10; the lookup tables are unmanageably large.   This actor approximates a&#10; full search VQ by storing the lookup tables hierarchically.&#10; The encoding is broken up into stages, and at each stage a number of 2x1&#10; table lookup VQs are performed. For example,&#10; starting with a 4x2 vector in the first stage, codebook 0 (which operates&#10; on raw pixels) is used 4 times, resulting in a 2x2 vector of codewords.&#10; In the second stage, codebook 1 is used twice, resulting in a 2x1 vector.&#10; Lastly, a single 2x1 VQ using codebook 2 (which operates on codewords&#10; representing 2x2 vectors) returns a single codeword for the 4x2 vector.&lt;/p&gt;&#10;&#10; &lt;p&gt;The input is an IntMatrixToken corresponding to the block to be encoded.&#10; The values in this matrix are assumed to be between 0 and 255.  The output&#10; is an IntToken with value between 0 and 255.  Integers are used here because&#10; of the minimal byte support in Ptolemy or JAVA.&#10; The size of the input matrix should be the same as the parameters blockHeight&#10; and blockWidth.&lt;/p&gt;&#10;&#10; &lt;p&gt;The codebook is specified as a binary file that will be read during&#10; initialization.  This file actually contains five sets of codebooks and&#10; lookups tables.  The first set is for 2x1 blocks, the second is for 2x2&#10; blocks, etc.  (Thus the supplied codebook is only sufficient for block sizes&#10; up to 8x4 pixels.) In each set, the codebook precedes the lookup-tables.&#10; The codebook consists of all 256 codevectors, row scanned from top to bottom.&#10; The lookup table consists of 64K entries (one for each pair of codewords from&#10; the previous stage).  Each entry in the lookup table is an 8-bit codeword.&lt;/p&gt;&#10;&#10; &lt;pre&gt;&#10; Stage 0: 2x1 block size&#10; codebook = 256 blocks x 2 bytes = 512 bytes&#10; lookup tables = 65536 entries x 1 byte = 65536 bytes&#10; Stage 1: 2x2 block size&#10; codebook = 256 blocks x 4 bytes = 1024 bytes&#10; lookup tables = 65536 entries x 1 byte = 65536 bytes&#10; Stage 2: 4x2 block size&#10; codebook = 256 blocks x 8 bytes = 2048 bytes&#10; lookup tables = 65536 entries x 1 byte = 65536 bytes&#10; Stage 3: 4x4 block size&#10; codebook = 256 blocks x 16 bytes = 4096 bytes&#10; lookup tables = 65536 entries x 1 byte = 65536 bytes&#10; Stage 4: 8x4 block size&#10; codebook = 256 blocks x 32 bytes = 8192 bytes&#10; lookup tables = 65536 entries x 1 byte = 65536 bytes&#10; &lt;/pre&gt;&#10;&#10; &lt;p&gt;The supplied codebook was trained using images from the&#10; USC image archive and is suitable for most general applications.&lt;/p&gt;&#10;&#10; &lt;p&gt;For more information here are some interesting references: &lt;/p&gt;&#10;&#10; &lt;p&gt;A. Gersho and R. M. Gray, &lt;i&gt;Vector Quantization and Signal Compression&lt;/i&gt;.&#10; Kluwer Academic Publishers, Boston, 1992.&lt;/p&gt;&#10;&#10; &lt;p&gt;P. C. Chang, J. May, R. M. Gray, &quot;Hierarchical Vector Quantizers with&#10; Table Lookup Encoders,&quot; &lt;i&gt; International Conference on Acoustics Speech&#10; and Signal Processing&lt;/i&gt;, pp. 1452-1455, 1985. &lt;/p&gt;&#10;&#10; &lt;p&gt;M. Vishwanath and P. Chou, &quot;An Efficient Algorithm for Hierarchical&#10; Compression of Video,&quot; &lt;i&gt;International Conference on Image Processing&lt;/i&gt;,&#10; vol. 3, pp. 275-279, Nov. 1994&lt;/p&gt;  </description>
  <author>Steve Neuendorffer</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Yellow (neuendor)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (neuendor)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="codeBook">A Parameter of type String, giving the location of the codebook data&#10;  file relative to the root classpath.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="blockCount">The number of blocks to be encoded during each firing.&#10;  The default value is one, which will always work, but using a higher&#10;  number (such as the number of blocks in a frame) will speed things up.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="blockWidth">The width, in pixels, of the block to encode.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="blockHeight">The width, in pixels, of the block to encode.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="input_tokenConsumptionRate">The input rate.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="output_tokenProductionRate">The output rate.</property>
</doc>
