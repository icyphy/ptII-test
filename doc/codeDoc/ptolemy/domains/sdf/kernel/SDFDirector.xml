<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="SDFDirector" class="ptolemy.domains.sdf.kernel.SDFDirector">
  <description>
Director for the synchronous dataflow (SDF) model of computation.&#10;&#10; &lt;h1&gt;SDF overview&lt;/h1&gt;&#10; The Synchronous Dataflow(SDF) domain supports the efficient&#10; execution of Dataflow graphs that&#10; lack control structures.   Dataflow graphs that contain control structures&#10; should be executed using the Process Networks(PN) domain instead.&#10; SDF allows efficient execution, with very little overhead at runtime.  It&#10; requires that the rates on the ports of all actors be known before hand.&#10; SDF also requires that the rates on the ports not change during&#10; execution.  In addition, in some cases (namely systems with feedback) delays,&#10; which are represented by initial tokens on relations must be explicitly&#10; noted.  SDF uses this rate and delay information to determine&#10; the execution sequence of the actors before execution begins.&#10; &lt;h2&gt;Schedule Properties&lt;/h2&gt;&#10; &lt;ul&gt;&#10; &lt;li&gt;The number of tokens accumulated on every relation is bounded, given&#10; an infinite number of executions of the schedule.&lt;/li&gt;&#10; &lt;li&gt;Deadlock will never occur, given an infinite number of executions of&#10; the schedule.&lt;/li&gt;&#10; &lt;/ul&gt;&#10; &lt;h1&gt;Class comments&lt;/h1&gt;&#10; An SDFDirector is the class that controls execution of actors under the&#10; SDF domain.  By default, actor scheduling is handled by the SDFScheduler&#10; class.  Furthermore, the newReceiver method creates Receivers of type&#10; SDFReceiver, which extends QueueReceiver to support optimized gets&#10; and puts of arrays of tokens.&#10; &lt;p&gt;&#10; Actors are assumed to consume and produce exactly one token per channel on&#10; each firing.  Actors that do not follow this convention should set&#10; the appropriate parameters on input and output ports to declare the number&#10; of tokens they produce or consume.  See the&#10; &lt;a href=&quot;../../../../ptolemy/domains/sdf/kernel/SDFScheduler.xml&quot;&gt;ptolemy.domains.sdf.kernel.SDFScheduler&lt;/a&gt; for more information.&#10; The &lt;a href=&quot;../../../../ptolemy/domains/sdf/lib/SampleDelay.xml&quot;&gt;ptolemy.domains.sdf.lib.SampleDelay&lt;/a&gt; actor is usually used&#10; in a model to specify the delay across a relation.&#10; &lt;/p&gt;&lt;p&gt;&#10; The &lt;i&gt;allowDisconnectedGraphs&lt;/i&gt; parameter of this director determines&#10; whether disconnected graphs are permitted.&#10; A model may have two or more graphs of actors that&#10; are not connected.  The schedule can jump from one graph to&#10; another among the disconnected graphs. There is nothing to&#10; force the scheduler to finish executing all actors on one&#10; graph before firing actors on another graph. However, the&#10; order of execution within an graph should be correct.&#10; Usually, disconnected graphs in an SDF model indicates an&#10; error.&#10; The default value of the allowDisconnectedGraphs parameter is a&#10; BooleanToken with the value false.&#10; &lt;/p&gt;&lt;p&gt;&#10; The &lt;i&gt;iterations&lt;/i&gt; parameter of this director corresponds to a&#10; limit on the number of times the director will fire its hierarchy&#10; before it returns false in postfire.  If this number is not greater&#10; than zero, then no limit is set and postfire will always return true.&#10; The default value of the iterations parameter is an IntToken with value one.&#10; &lt;/p&gt;&lt;p&gt;&#10; If any actor's postfire() method returns false during an iteration,&#10; then at the conclusion of the iteration, this director's postfire() method&#10; will return false. This will normally result in termination of the execution.&#10; The reasoning for this behavior is that the model cannot continue executing&#10; without the participation of all actors, and if any actor returns false&#10; in postfire(), then it is indicating that it wishes to not continue executing.&#10; &lt;/p&gt;&lt;p&gt;&#10; The &lt;i&gt;vectorizationFactor&lt;/i&gt; parameter of this director sets the number&#10; of times that the basic schedule is executed during each firing of this&#10; director.  This might allow the director to execute the model more efficiently,&#10; by combining multiple firings of each actor.  The default value of the&#10; vectorizationFactor parameter is an IntToken with value one.&#10; &lt;/p&gt;&lt;p&gt;&#10; The SDF director has a &lt;i&gt;period&lt;/i&gt; parameter which specifies the&#10; amount of model time that elapses per iteration. If the value of&#10; &lt;i&gt;period&lt;/i&gt; is 0.0 (the default), then it has no effect, and&#10; this director never increments time nor calls fireAt() on the&#10; enclosing director. If the period is greater than 0.0, then&#10; if this director is at the top level, it increments&#10; time by this amount in each invocation of postfire().&#10; If it is not at the top level, then it calls&#10; fireAt(currentTime + period) in postfire().&#10; &lt;/p&gt;&lt;p&gt;&#10; This behavior gives an interesting use of SDF within DE:&#10; You can &quot;kick start&quot; an SDF submodel with a single&#10; event, and then if the director of that SDF submodel&#10; has a period greater than 0.0, then it will continue to fire&#10; periodically with the specified period.&#10; &lt;/p&gt;&lt;p&gt;&#10; If &lt;i&gt;period&lt;/i&gt; is greater than 0.0 and the parameter&#10; &lt;i&gt;synchronizeToRealTime&lt;/i&gt; is set to &lt;code&gt;true&lt;/code&gt;,&#10; then the prefire() method stalls until the real time elapsed&#10; since the model started matches the period multiplied by&#10; the iteration count.&#10; This ensures that the director does not get ahead of real time. However,&#10; of course, this does not ensure that the director keeps up with real time.&#10; &lt;/p&gt;  </description>
  <author>Steve Neuendorffer, Contributor: Christopher Brooks</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Yellow (cxh)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="allowDisconnectedGraphs">A parameter representing whether disconnected graphs are&#10;  permitted.  A model may have two or more graphs of actors that&#10;  are not connected.  The schedule can jump from one graph to&#10;  another among the disconnected graphs. There is nothing to&#10;  force the scheduler to finish executing all actors on one&#10;  graph before firing actors on another graph. However, the&#10;  order of execution within an graph should be correct.&#10;  Usually, disconnected graphs in an SDF model indicates an&#10;  error.  The default value is a BooleanToken with the value&#10;  false.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="allowRateChanges">A parameter representing whether dynamic rate changes are&#10;  permitted.  An SDF model may constructed such that the values&#10;  of rate parameters are modified during the execution of the&#10;  system.  If this parameter is true, then such models are&#10;  valid and this class dynamically computes a new schedule at&#10;  runtime.  If this parameter is false, then the SDF domain&#10;  performs a static check to disallow such models.  Note that in&#10;  order to generate code from an SDF model, this parameter must&#10;  be set to false.  This is a boolean with default&#10;  value false.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="constrainBufferSizes">If true, then buffer sizes are fixed according to the schedule,&#10;  and attempts to write to the buffer that cause the buffer to&#10;  exceed the schedule size result in an exception. This method&#10;  works by setting the capacity of the receivers if the value is&#10;  true. This parameter is a boolean that defaults to true.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="iterations">A Parameter representing the number of times that postfire may be&#10;  called before it returns false.  If the value is less than or&#10;  equal to zero, then the execution will never return false in postfire,&#10;  and thus the execution can continue forever. Note that the amount&#10;  of data processed by the SDF model is a function of both this&#10;  parameter and the value of parameter &lt;i&gt;vectorizationFactor&lt;/i&gt;, since&#10;  &lt;i&gt;vectorizationFactor&lt;/i&gt; can influence the choice of schedule.&#10;&#10;  &lt;p&gt;If the number of iterations is -1, which is the value of&#10;  the AUTO choice in the UI, then if the container of the&#10;  director is the the top level then one iteration will occur&#10;  before postfire() returns false.&lt;/p&gt;&#10;&#10;  &lt;p&gt;If the number of iterations is -1 and and the container of&#10;  the director is &lt;b&gt;not&lt;/b&gt; at the top level then postfire()&#10;  will always return true and execution will continue&#10;  forever.&lt;/p&gt;&#10;&#10;  The default value is an IntToken with the value AUTO, which&#10;  is -1.  The UI has a second choice: UNBOUNDED, which is 0.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="period">The time period of each iteration.  This parameter has type double&#10;  and default value 0.0, which means that this director does not&#10;  increment model time and does not request firings by calling&#10;  fireAt() on any enclosing director.  If the value is set to&#10;  something greater than 0.0, then if this director is at the&#10;  top level, it will increment model time by the specified&#10;  amount in its postfire() method. If it is not at the top&#10;  level, then it will call fireAt() on the enclosing executive&#10;  director with the argument being the current time plus the&#10;  specified period.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="synchronizeToRealTime">Specify whether the execution should synchronize to the&#10;  real time. This parameter has type boolean and defaults&#10;  to false. If set to true, then this director stalls in the&#10;  prefire() method until the elapsed real real time matches&#10;  the product of the &lt;i&gt;period&lt;/i&gt; parameter value and the&#10;  iteration count. If the &lt;i&gt;period&lt;/i&gt; parameter has value&#10;  0.0 (the default), then changing this parameter to true&#10;  has no effect.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="vectorizationFactor">A Parameter representing the requested vectorization factor.&#10;  The director will attempt to construct a schedule where each&#10;  actor fires &lt;i&gt;vectorizationFactor&lt;/i&gt; times more often than&#10;  it would in a minimal schedule.  This can allow actor executions&#10;  to be grouped together, resulting in faster execution.  This is&#10;  more likely to be possible in graphs without tight feedback.&#10;  This parameter must be a positive integer.&#10;  The default value is an IntToken with the value one.</property>
</doc>
