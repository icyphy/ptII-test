<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="SDFScheduler" class="ptolemy.domains.sdf.kernel.SDFScheduler">
  <description>
A scheduler that implements basic scheduling of SDF graphs.  This&#10; class calculates the SDF schedule in two phases.  First, the balance&#10; equations for the rates between actors are solved to determine the&#10; &lt;i&gt;firing vector&lt;/i&gt; (also known as the repetitions vector).  The&#10; firing vector is the least integer solution such that the number of&#10; tokens created on each channel of each relation is equal to the number&#10; of tokens consumed.  In some cases, no solution exists.  Such graphs&#10; are not executable under SDF.&#10; &lt;p&gt;&#10; Then the actors are ordered such that each actor only fires when the&#10; scheduler has determined that enough tokens will be present on its&#10; input ports to allow it to fire.  In cases where the dataflow graph is&#10; cyclic, a valid firing vector exists, but no actor can fire, since&#10; they all depend on the output of another actor.  This situation is&#10; known as &lt;i&gt;deadlock&lt;/i&gt;.  Deadlock must be prevented in SDF by manually&#10; inserting delay actors, which represent initial tokens on each&#10; relation.  Such delay actors are responsible for creating tokens&#10; during initialization that will prevent deadlock.  These actors&#10; set the &lt;i&gt;tokenInitProduction&lt;/i&gt; parameter of their output ports&#10; to represent the number of&#10; tokens they will create during initialization.  The SDFScheduler uses&#10; this parameter to break the dependency in a cyclic&#10; graph.&#10; &lt;p&gt;&#10; In addition, an input port may initially have available input tokens.&#10; This is indicated by a &lt;i&gt;tokenInitConsumption&lt;/i&gt; parameter on the&#10; input port.&#10; &lt;p&gt;&#10; Note that this scheduler only ensures that the number of firings is&#10; minimal.  Most notably, it does not attempt to minimize the size of&#10; the buffers that are associated with each relation.  The resulting&#10; schedule is a linear schedule (as opposed to a looped schedule) and is&#10; not suitable for multiprocessing environments.&#10; &lt;p&gt;&#10; Any actors may be&#10; scheduled by this scheduler, which will, by default, assume&#10; homogeneous behavior for each actor.  (i.e. each output port produces&#10; one token for each firing, and each input port consumes one token on&#10; each firing, and no tokens are created during initialization.)  If&#10; this is not the case then parameters named &lt;i&gt;tokenConsumptionRate&lt;/i&gt;,&#10; &lt;i&gt;tokenProductionRate&lt;/i&gt;, &lt;i&gt;tokenInitProduction&lt;/i&gt;, and&#10; &lt;i&gt;tokenInitConsumption&lt;/i&gt; must be set.&#10; The SDFIOPort class provides easier access to these parameters.&#10; &lt;p&gt;&#10; Note that reconstructing the schedule is expensive, so the schedule is&#10; locally cached for as long as possible, and mutations under SDF should&#10; be avoided.&#10; &lt;p&gt;&#10; Note that this scheduler supports actors with 0-rate ports as long as&#10; the graph is not equivalent to a disconnected graph. This scheduler&#10; is somewhat conservative in this respect.&#10; &lt;p&gt;Disconnected graphs are supported if the SDF Director parameter&#10; &lt;i&gt;allowDisconnectedGraphs&lt;/i&gt; is true.  </description>
  <author>Stephen Neuendorffer and Brian Vogel</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (neuendor)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (neuendor)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="constrainBufferSizes">If true, then buffer sizes are fixed according to the schedule,&#10;  and attempts to write to the buffer that cause the buffer to&#10;  exceed the schedule size result in an exception. This method&#10;  works by setting the capacity of the receivers if the value is&#10;  true. This parameter is a boolean that defaults to true.</property>
</doc>
