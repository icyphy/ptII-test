<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="TMDirector" class="ptolemy.domains.tm.kernel.TMDirector">
  <description>
A director that implements a priority-driven multitasking&#10; model of computation. This model of computation is usually seen in&#10; real-time operating systems.&#10; &lt;P&gt;&#10; Each actor in this domain is called a task. A task is eligible to&#10; execute if there is an event that triggers it. Source actors may trigger&#10; themselves by calling fireAt(time, actor) on this director. This call&#10; is treated as an interrupt that happens at that particular time.&#10; A task can have a priority and an execution time, specified by (adding)&#10; &lt;i&gt;priority&lt;/i&gt; and &lt;i&gt;executionTime&lt;/i&gt; parameters. The &lt;i&gt;priority&lt;/i&gt;&#10; parameter takes an integer value, and the &lt;i&gt;executionTime&lt;/i&gt;&#10; parameter takes a double value. These parameters may also be specified&#10; on a per input port basis, if the actor reacts differently&#10; to input events at different ports. If these parameters are not&#10; specified, then the default priority value is the java.Thread.NORM&#10; on the JVM, and the default execution time is 0.&#10; &lt;P&gt;&#10; This domain assumes there is a single resource, say CPU, shared by&#10; the execution of all actors. At one particular time, only&#10; one of the tasks can get the resource and execute. If the execution&#10; is preemptable (by setting the &lt;i&gt;preemptive&lt;/i&gt; parameter of&#10; this director to true), then the execution of one task&#10; may be preempted by another eligible task with a higher priority.&#10; Otherwise, the higher priority task has to wait until the current&#10; task finishes its execution.&#10; &lt;P&gt;&#10; The priority-driven execution is achieved by using an event&#10; dispatcher, which sorts and dispatches events that trigger&#10; the execution of tasks. The events being dispatched are called&#10; TM events (implemented by the TMEvent class).&#10; An TM event has a priority and a remaining processing time,&#10; among other properties. The priority of the event&#10; is inherited from its destination port, which may further inherit&#10; its priority from the actor that contains the port. Whenever an&#10; event is produced by an actor, it is queued with the event dispatcher.&#10; At any time, the event with the highest priority is dequeued,&#10; and delivered into its destination receiver. The director then starts&#10; the execution of the destination actor (by calling its prefire()&#10; method). After that, the director tracks how much time remained&#10; for the task to finish processing the event.&#10;&#10; &lt;P&gt;&#10; The events, called interrupt events, produced by calling fireAt()&#10; on this director are treated differently. These events carry&#10; a time stamp, and are queued with another queue which sorts these&#10; events in their chronological order. When the modeling time reaches&#10; an interrupt event time, (regardless whether there is a task&#10; executing),&#10; the interrupt event is processed. And the corresponding&#10; source actor is fired, which may in turn produce some TM events.&#10; If one of these TM events has a higher priority than the event&#10; being processed by the current task, and the execution is preemptive,&#10; then the current tasks is stalled, and the task triggered by the&#10; highest priority event is started. Note that, a task is always&#10; granted the resource that is specified by the &lt;i&gt;executionTime&lt;/i&gt;,&#10; no matter whether it has been preempted.&#10; When that amount of time is elapsed, the fire() method of the actor&#10; will be called, and the actor is expected to produce its output, if&#10; there is any.&#10; &lt;P&gt;&#10; The TM domain can be nested with other (timed) domains. In that&#10; case, the inputs from the outside domain are treated as interrupts&#10; that happen at the (outside) current time.&#10; &lt;p&gt;&#10; This director supports executions that synchronize to real time.&#10; To enable such an execution, set the &lt;i&gt;synchronizeToRealTime&lt;/i&gt;&#10; parameter to true.  </description>
  <author>Jie Liu, Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 2.0</since>
  <Pt.ProposedRating>Yellow (liuj)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (janneck)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="preemptive">Indicating whether the execution of the actors is preemptable.&#10;  The default value is false, of type boolean.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="defaultTaskExecutionTime">The default execution time of a task (i.e. actor). If an actor&#10;  (or its ports)&#10;  does not specify its execution time, then this number will&#10;  be used. The default value is 0.0, of type double, meaning that&#10;  the task takes no time to execute (similar to the synchrony&#10;  assumption in Synchronous/Reactive models).</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="synchronizeToRealTime">Indicating whether the execution synchronizes to the&#10;  real time. This parameter has default value false, of type boolean.&#10;  If this parameter is true, then the director does not process&#10;  events until the&#10;  elapsed real time matches the time stamp of the events.</property>
</doc>
