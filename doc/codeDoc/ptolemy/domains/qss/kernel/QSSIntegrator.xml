<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="QSSIntegrator" class="ptolemy.domains.qss.kernel.QSSIntegrator">
  <description>
A quantized-state integrator.&#10;This integrator is designed to integrate continuous-time signals under the&#10;&lt;a href=&quot;../../../../ptolemy/domains/qss/kernel/QSSDirector.xml&quot;&gt;ptolemy.domains.qss.kernel.QSSDirector&lt;/a&gt;. The input events indicate significant changes in the input&#10;signal, and output events indicate significant changes in the output signal.&#10;The value of the input signal is the derivative of the output.&#10;Here &quot;significant&quot; means that the signal has changed by more than the specified&#10;quantum, as defined by the selected solver, explained in detail below.&#10;&lt;p&gt;&#10;Three types of solvers are provided:&#10;&lt;ol&gt;&#10;&lt;li&gt; &lt;b&gt;QSS1&lt;/b&gt;: The input &lt;i&gt;u&lt;/i&gt; is assumed to be piecewise constant.&#10;&lt;li&gt; &lt;b&gt;QSS2&lt;/b&gt;: The input &lt;i&gt;u&lt;/i&gt; is assumed to be piecewise linear.&#10;&lt;li&gt; &lt;b&gt;QSS3&lt;/b&gt;: The input &lt;i&gt;u&lt;/i&gt; is assumed to be piecewise quadratic.&#10;&lt;/ol&gt;&#10;An input token can be instance of &lt;a href=&quot;../../../../ptolemy/data/DoubleToken.xml&quot;&gt;ptolemy.data.DoubleToken&lt;/a&gt; or &lt;a href=&quot;../../../../ptolemy/data/SmoothToken.xml&quot;&gt;ptolemy.data.SmoothToken&lt;/a&gt;,&#10;the latter of which potentially carries&#10;not only a value at q time, but also zero or more derivatives&#10;of the input signal at that time. To provide a piecewise linear input to a&#10;QSS2 integrator, for example, you can specify an input with the expression&#10;&lt;tt&gt;smoothToken(2.0, {1.0})&lt;/tt&gt;, which specifies a value of 2.0 and a first&#10;derivative of 1.0. All other derivatives are assumed to be zero.&#10;A QSS1 integrator will ignore all derivatives on the input.&#10;A QSS2 integrator will ignore all but the first derivative on the input.&#10;A QSS3 integrator will ignore all but the first and second derivatives on the input.&#10;If a &lt;a href=&quot;../../../../ptolemy/data/DoubleToken.xml&quot;&gt;ptolemy.data.DoubleToken&lt;/a&gt; is provided on the input, then all derivatives of the input&#10;are assumed to be zero.&#10;&lt;p&gt;&#10;This integrator has two modes of operation, depending on the value of&#10;&lt;i&gt;propagateInputDerivatives&lt;/i&gt;. In both modes, the integrator will produce&#10;an output whenever a &lt;i&gt;quantization event&lt;/i&gt; occurs. For QSS1, a quantization&#10;event occurs when the state of the integrator changes by the quantum (see below&#10;for an explanation of the quantum). For example, if the input is a constant 1.0&#10;and the quantum is 0.1, then an output will be produced every 0.1 seconds, because&#10;the input specifies that the state has slope 1.0, so it will increase by the quantum&#10;every 0.1 seconds. For QSS2, a quantization event occurs when&#10;the derivative of the state changes by the quantum. For example, if the input&#10;is piecewise linear with initial value 0.0 and first derivative 1.0 and the state&#10;has initial value 0.0, then at the start, the state has value 0.0,&#10;first derivative 0.0, and second derivative 1.0.&#10;Because of the second derivative, as time elapses, the first derivative of the state&#10;will increase. When it increases by the quantum, an output will be produced.&#10;For QSS3, a quantization&#10;event occurs when the second derivative changes by the quantum in a similar fashion.&#10;&lt;p&gt;&#10;Also, in both modes of operation, the integrator will produce an output whenever&#10;it is initialized, and whenever it receives an &lt;i&gt;impulse&lt;/i&gt; input event.&#10;&lt;p&gt;&#10;When an output is produced, its value will be the current state of the integrator.&#10;In addition, depending on the solver, it may contain derivative information.&#10;For QSS1, the input is semantically piecewise constant, so the output&#10;is piecewise linear; hence each output event will be a SmoothToken&#10;that is piecewise linear, with a first derivative equal to the most recently&#10;received input value.&#10;For QSS2, the output will have a first and second derivative obtained from the input.&#10;For QSS3, the output will have first, second, and third derivatives.&#10;&lt;p&gt;&#10;We can now explain how the two modes of operation differ.&#10;If &lt;i&gt;propagateInputDerivatives&lt;/i&gt; is set to&#10;true (the default), then this integrator will &lt;i&gt;also&lt;/i&gt;&#10;produce an output every time it receives an input, at the following microstep.&#10;Each output will include derivative&#10;information from the input, to the extent that these are appropriate for&#10;the solver.&#10;&lt;p&gt;&#10;If &lt;i&gt;propagateInputDerivatives&lt;/i&gt; is set to&#10;false, then output is not produced &lt;i&gt;only&lt;/i&gt; when quantization events occur,&#10;when the integrator is initialized, and when the &lt;i&gt;impulse&lt;/i&gt; port receives an event.&#10;In this case, there is no direct dependence between the &lt;i&gt;u&lt;/i&gt; input and the output,&#10;and hence there is no difficulty putting this integrator in a feedback loop.&#10;The price paid, however, is that downstream actors do not get immediately informed&#10;of changes in the derivatives of the output.&#10;They will learn of these changes when the next quantization event occurs.&#10;To see an example of the consequences, see the demo&#10;&lt;a href=&quot;$PTII/ptolemy/domains/qss/demo/HelloWorld/HelloWorld_Propagate.xml&quot;&gt;$PTII/ptolemy/domains/qss/demo/HelloWorld/HelloWorld_Propagate.xml&lt;/a&gt;.&#10;&lt;p&gt;&#10;The frequency with which the output &lt;i&gt;q&lt;/i&gt; of this integrator&#10;is produced depends on the &lt;i&gt;solver&lt;/i&gt; choice and the&#10;&lt;i&gt;absoluteQuantum&lt;/i&gt; and &lt;i&gt;relativeQuantum&lt;/i&gt; parameter values.&#10;These determine when a quantization event occurs, as explained above.&#10;The &lt;i&gt;quantum&lt;/i&gt; is equal to the larger of &lt;i&gt;absoluteQuantum&lt;/i&gt;&#10;and the product of &lt;i&gt;relativeQuantum&lt;/i&gt; and the current state value.&#10;The simplest case is&#10;where the solver is QSS1 and &lt;i&gt;relativeQuantum&lt;/i&gt; is zero. In this case, a&#10;quantization event occurs whenever the integral of the input signal changes by&#10;the &lt;i&gt;absoluateQuantum&lt;/i&gt;. For QSS1, the input is assumed to be piecewise&#10;constant. If the input is a SmoothToken, the derivatives of the input&#10;are ignored.&#10;&lt;p&gt;&#10;On the first firing at initialization&#10;time, the output value is given by &lt;i&gt;xInit&lt;/i&gt;. That initial value can be a&#10;SmoothToken (expressed as smoothToken(value, {array of derivatives}).&#10;&lt;p&gt;&#10;When an &lt;i&gt;impulse&lt;/i&gt; input is received, the value of that event&#10;is added to the current state of this integrator (any derivatives provided&#10;on the &lt;i&gt;impulse&lt;/i&gt; input are ignored).&#10;Then an output event is produced and the integrator is reinitialized so&#10;that the next output quantum is relative to the new state value.&#10;&lt;p&gt;&#10;Note that in most cases, this actor outputs a SmoothToken.&#10;(The only exception is at initialization, where &lt;i&gt;xInit&lt;/i&gt; is produced;&#10;it may not be a SmoothToken.)&#10;A SmoothToken has that property that any downstream&#10;actor can read the signal at any time, and the value will&#10;be extrapolated to the time of the read automatically, regardless of whether&#10;the source of the SmoothToken has produced an output at that time.&#10;Thus, the outputs of this integrator only need to occur&#10;explicitly when something interesting has changed that would make such prediction invalid.&#10;Even though the signal contains only infrequent events, a downstream actor can read&#10;the values frequently, for example to generate more representative plots of&#10;the signal.&#10;If want downstream actors to see only the actual events produced by this&#10;integrator, then you can feed the output into an instance of &lt;a href=&quot;../../../../ptolemy/actor/lib/conversions/SmoothToDouble.xml&quot;&gt;ptolemy.actor.lib.conversions.SmoothToDouble&lt;/a&gt;.&#10;&lt;p&gt;&#10;FIXME: To do:&#10;- Make xInit a PortParameter.&#10;- Make a vector version.  </description>
  <author>Edward A. Lee, Thierry Nouidui, Michael Wetter, Mehrdad Niknami</author>
  <version>$Id$</version>
  <since>Ptolemy II 11.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="impulse">The impulse input port. This is a single port of type double.&#10;  If any derivatives are provided on this port via a SmoothToken,&#10;  they are ignored.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="q">Output (the quantized state).</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="u">Input (the derivative).</port>
    <!--ptolemy.data.expr.Parameter-->
    <property name="absoluteQuantum">If specified, the minimum quantum for this integrator.&#10;  This is a double, and by default is not given, which means&#10;  that the quantum is specified by the director.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="exactInputs">Indicator of whether the inputs are exact. Set this to true if&#10;  the inputs to this integrator specify all non-zero derivatives.&#10;  That is, if the input is a DoubleToken, this should be interpreted&#10;  as a piecewise-constant input. If it is SmoothToken, then all non-zero&#10;  derivatives are given as part of the token.  This is a boolean that&#10;  defaults to false.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="propagateInputDerivatives">If true (the default), then derivative information from the input will be&#10;  produced on the outputs, and an output will be produced whenever&#10;  an input is received. If false, then no derivative information is provided&#10;  on the output (the output is assumed to be piecewise constant), and outputs&#10;  are produced only when the integral has changed enough to&#10;  trigger a quantization event.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="relativeQuantum">If specified, the relative quantum for this integrator.&#10;  If the value here is greater than zero, then the quantum&#10;  that this integrator uses will be the larger of the&#10;  &lt;a href=&quot;../../../../ptolemy/domains/qss/kernel/QSSIntegrator.xml#absoluteQuantum&quot;&gt;absoluteQuantum&lt;/a&gt; and |x| * relativeQuantum,&#10;  where x is the current value of the state.&#10;  This is a double that defaults to be empty (nothing&#10;  specified), which causes the relativeQuantum to be&#10;  retrieved from the director.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="solver">The class name of the QSS solver used for integration.  This&#10;  is a string that defaults to the empty string, which delegates&#10;  the choice to the director.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="xInit">Initial value of the state.</property>
</doc>
