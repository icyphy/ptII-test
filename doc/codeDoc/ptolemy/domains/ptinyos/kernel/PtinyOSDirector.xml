<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="PtinyOSDirector" class="ptolemy.domains.ptinyos.kernel.PtinyOSDirector">
  <description>
A director for generating, compiling, and simulating nesC code from&#10;   TinyOS components.&#10;&#10;   &lt;p&gt;TinyOS is an event-driven operating system designed for sensor&#10;   network nodes that have very limited resources (e.g., 8K bytes of&#10;   program memory, 512 bytes of RAM).  (More info at&#10;   &lt;a href=&quot;http://www.tinyos.net&quot;&gt;http://www.tinyos.net&lt;/a&gt;).&#10;&#10;   &lt;p&gt;nesC is an extension to the C programming language designed to&#10;   embody the structuring concepts and execution model of TinyOS.&#10;   (More info at &lt;a&#10;   href=&quot;http://nescc.sourceforge.net&quot;&gt;http://nescc.sourceforge.net&lt;/a&gt;).&#10;&#10;   &lt;p&gt;TOSSIM is a C-based simulator for homogeneous TinyOS networks,&#10;   where all nodes run the same TinyOS program.  (More info at &lt;a&#10;   href=&quot;http://www.cs.berkeley.edu/~pal/research/tossim.html&quot;&gt;&#10;   http://www.cs.berkeley.edu/~pal/research/tossim.html&lt;/a&gt;).&#10;&#10;   &lt;p&gt;This version of the PtinyOSDirector is for use with TinyOS 1.x&#10;   only.  It is not compatible with TinyOS 2.x.&#10;&#10;   &lt;p&gt;When embedded in a model containing nesC components (component&#10;   descriptions converted to MoML from the TinyOS 1.x library using&#10;   $PTII/ptolemy/domains/ptinyos/util/nc2moml/nc2moml), this director&#10;   can generate the top-level nesC application file (.nc).  This&#10;   director can also compile the nesC application for use with any&#10;   TinyOS 1.x-compatible hardware (e.g., mica), or for simulation&#10;   within Ptolemy II.&#10;&#10;   &lt;p&gt;When this director is used for code generation only, and not&#10;   simulation, the user sets the PtinyOSDirector &lt;i&gt;target&lt;/i&gt;&#10;   parameter to a string such as &quot;mica&quot;, &quot;mica2&quot;, &quot;pc&quot;, or another&#10;   TinyOS 1.x-compatible target.  The director will generate a nesC&#10;   application file (.nc) and a makefile for the application.&#10;&#10;   &lt;p&gt;When this director is used in simulation mode, the user sets the&#10;   PtinyOSDirector &lt;i&gt;target&lt;/i&gt; parameter to the string &quot;ptII&quot;.  In&#10;   addition to the previously mentioned nesC application file (.nc)&#10;   and a makefile for the application, the director will generate a&#10;   Java loader file (.java).  This loader file implements &lt;a href=&quot;../../../../ptolemy/domains/ptinyos/kernel/PtinyOSLoader.xml&quot;&gt;ptolemy.domains.ptinyos.kernel.PtinyOSLoader&lt;/a&gt;, which is used as a&#10;   wrapper for calls to JNI methods in TOSSIM.  The director uses the&#10;   nesC compiler to compile the .nc file into a pre-processed C file.&#10;   It then uses a C compiler to compile the C file into a shared&#10;   object (the TOSSIM shared object).  The C compiler is usually gcc,&#10;   though it can use another compiler if $PTCC (defined in&#10;   $PTII/mk/ptII.mk and used in&#10;   $TOSROOT/contrib/ptII/ptinyos/tools/make/ptII/ptII.rules) is&#10;   modified.  The director then uses the Java compiler to compile the&#10;   Java loader file into a .class file.  Finally, this director loads&#10;   the resulting .class using the Java loader, which loads the TOSSIM&#10;   shared object.&#10;&#10;   &lt;p&gt;For more information on compilation rules, see:&#10;     $TOSROOT/contrib/ptII/ptinyos/tools/make/ptII/ptII.rules&#10;&#10;   &lt;p&gt;TOSSIM contains its own discrete event simulation engine, which&#10;   consists of a main scheduling loop and a discrete event queue.&#10;   Events in this queue are ordered by timestamp, which is implemented&#10;   as a long long (a 64-bit integer on most systems; this is a&#10;   standard type used in gcc).  The timestamp value is a&#10;   representation of the number of ticks of a 4 MHz clock (the&#10;   original CPU frequency of the Rene/Mica motes).  After initializing&#10;   its data structures and performing other initialization routines,&#10;   TOSSIM creates a boot-up event and places the event in its event&#10;   queue.  The version of TOSSIM compiled by this director contains&#10;   additional calls that are not in the original version of TOSSIM.&#10;   These calls are JNI calls that cause the TOSSIM scheduler to&#10;   communicate all events to the PtinyOSDirector, and allow events&#10;   (and sensor values) generated by Ptolemy II to be passed to the&#10;   TOSSIM scheduler.&#10;&#10;   &lt;p&gt;Since TOSSIM operates on a 4MHz clock, users will usually set&#10;   the &lt;i&gt;timeResolution&lt;/i&gt; parameter of this director to the value&#10;   0.25E-6, since TOSSIM cannot detect changes in sensor values&#10;   with time differences less than this time resolution.&#10;&#10;   &lt;p&gt;When the nesC compiler generates the pre-processed C file for&#10;   TOSSIM, it automatically generates support for homogeneous networks&#10;   by instrumenting all component state variables with an array.  The&#10;   array stores the state for each node.  Therefore, array index 0&#10;   stores the state for node 0, and so on.  This director only uses&#10;   one node per instance of TOSSIM, and hence, only uses array index 0&#10;   for all variables.  Models containing multiple nodes are created by&#10;   using a separate PtinyOSDirector (and hence a separate instance of&#10;   TOSSIM) for each node.  In TOSSIM, node 0 is the base station,&#10;   which is the sink for routing.  This director overrides the&#10;   built-in id number using the &lt;i&gt;nodeID&lt;/i&gt; and &lt;i&gt;baseStation&lt;/i&gt;&#10;   parameters, and passes a node ID value to the nesC compiler so that&#10;   it is hard coded into TOSSIM.&#10;&#10;   &lt;p&gt;TOSSIM uses TCP/IP sockets attached to network ports for commands&#10;   and events in order to communicate with external tools, such as&#10;   TinyViz, a Java-based visualization tool for TOSSIM.  We retain&#10;   these ports for backwards compatibility with TinyViz and other&#10;   tools.  The port numbers are set in &lt;i&gt;commandPort&lt;/i&gt; and&#10;   &lt;i&gt;eventPort&lt;/i&gt;.  Because of limitations in the implementation of&#10;   TOSSIM, a separate instance of TinyViz must be attached to each&#10;   instance of TOSSIM.  </description>
  <author>Elaine Cheong, Yang Zhao, Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 5.1</since>
  <Pt.ProposedRating>Yellow (celaine)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (celaine)</Pt.AcceptedRating>
    <!--ptolemy.actor.parameters.SharedParameter-->
    <property name="baseStation">Specifies the name of the base station as a string value.  The&#10;  value defaults to the string &quot;\&quot;MicaBoard\&quot;&quot;.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="bootTimeRange">TOSSIM setting for the number of seconds over which nodes may&#10;  boot.  The node(s) boots at a random time within this time&#10;  frame (time starts at 0 seconds).  The value defaults to 10&#10;  and is of type IntToken.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="confirmOverwrite">Flag to ask for confirmation before overwriting.  If false,&#10;  then overwrite the specified file without asking, if the file&#10;  exists.  If true, then ask for confirmation before&#10;  overwriting, if the file exists.  The value defaults to false,&#10;  and is of type BooleanToken.</property>
    <!--ptolemy.data.expr.FileParameter-->
    <property name="destinationDirectory">Output directory for generated code.  The value defaults to&#10;  the current working directory (the ptII expression $CWD).</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="eventPort">Port number for the TOSSIM event server socket.  This is a&#10;  public value so that the port number can be set by hand, if&#10;  necessary.  The value defaults to (commandPort + 1).</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="numberOfNodes">Number of nodes to simulate per instance of TOSSIM.  The value&#10;  defaults to 1, is of type IntToken, and is set to be&#10;  NOT_EDITABLE.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="pflags">Additional flags passed to the nesC compiler.  This can be&#10;  used, for example, to include additional compilation&#10;  directories.  The value defaults to &quot;-I%T/lib/Counters&quot;.  &quot;-I&quot;&#10;  is the normal gcc include directory option.  &quot;%T&quot; is a nesC&#10;  compiler flag that is equivalent to the value of $TOSDIR.</property>
    <!--ptolemy.actor.parameters.SharedParameter-->
    <property name="simulate">Flag for choosing whether to simulate the model in ptII.  The&#10;  value defaults to true, and is of type BooleanToken.  If&#10;  false, this director only generates files and does not attempt&#10;  to simulate the model.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="target">Compilation target for the generated nesC code.  Target can be&#10;  any TinyOS-compatible target, such as mica, mica2, pc, or&#10;  ptII.  The value defaults to &quot;ptII&quot;.  If &lt;i&gt;target&lt;/i&gt; is&#10;  blank, but &lt;i&gt;simulate&lt;/i&gt; is true, then the model will assume&#10;  that the ptII target has already been compiled and will&#10;  attempt to simulate.</property>
    <!--ptolemy.data.expr.FileParameter-->
    <property name="tosDir">Path to the tos directory of the TinyOS tree.  TinyOS can be&#10;  obtained from &lt;a&#10;  href=&quot;http://www.tinyos.net&quot;&gt;http://www.tinyos.net&lt;/a&gt;.  The&#10;  value defaults to $PTII/vendors/ptinyos/tinyos-1.x/tos</property>
    <!--ptolemy.data.expr.FileParameter-->
    <property name="tosRoot">Path to the root of the TinyOS tree.  TinyOS can be obtained&#10;  from &lt;a&#10;  href=&quot;http://www.tinyos.net&quot;&gt;http://www.tinyos.net&lt;/a&gt;. The&#10;  value defaults to $PTII/vendors/ptinyos/tinyos-1.x</property>
</doc>
