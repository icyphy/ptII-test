<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CSPDirector" class="ptolemy.domains.csp.kernel.CSPDirector">
  <description>
CSPDirector governs the execution of a composite actor with the semantics&#10; of the Communicating Sequential Processes (CSP) domain.&#10; &lt;p&gt;&#10; In the CSP domain, the director creates a thread for executing each&#10; actor under its control. Each actor corresponds to a&#10; process in the model. The threads are created in the initialize&#10; method and started in the prefire method.  After the thread for an actor&#10; is started it is &lt;i&gt;active&lt;/i&gt; until the thread finishes. While the&#10; process is active, it can also be &lt;i&gt;blocked&lt;/i&gt; or &lt;i&gt;delayed&lt;/i&gt;, but&#10; not both. A process is blocked if it is trying to communicate but&#10; the process with which it is trying to communicate is not&#10; ready to do so yet. A process is delayed if it is waiting for&#10; time to advance, or if it is waiting for a deadlock to occur.&#10; &lt;p&gt;&#10; The director is responsible for handling deadlocks, both real&#10; and timed.  It is also responsible for carrying out any requests for&#10; changes to the topology that have been made when a deadlock occurs.&#10; It maintains counts of the number of active&#10; processes, the number of blocked processes, and the number of&#10; delayed processes. &lt;i&gt;Deadlock&lt;/i&gt; occurs when the number of blocked processes&#10; plus the number of delayed processes equals the number of active processes.&#10; &lt;i&gt;Time deadlock&lt;/i&gt; occurs if at least one of the active processes&#10; is delayed. &lt;i&gt;Real deadlock&lt;/i&gt; occurs if all of the active processes&#10; under the control of this director are blocked trying to communicate.&#10; The fire method controls and responds to deadlocks and carries out&#10; changes to the topology when it is appropriate.&#10; &lt;p&gt;&#10; If real deadlock occurs, the fire method returns. If there are no&#10; levels above this level in the hierarchy then this marks the end&#10; of execution of the model. The model execution is terminated by setting&#10; a flag in every receiver contained in actors controlled by this director.&#10; When a process tries to send or receive from a receiver with the terminated&#10; flag set, a TerminateProcessException is thrown which causes the&#10; actors execution thread to terminate.&#10; &lt;p&gt;&#10; Time is controlled by the director. Each process can delay for some&#10; delta time, and it will continue when the director has advanced time&#10; by that length of time from the current time. A process is delayed by&#10; calling delay(double) method. The director &lt;i&gt;advances&lt;/i&gt; time each&#10; occasion a time deadlock occurs and no changes to the topology  are&#10; pending. If a process specifies zero delay, then the process&#10; continues immediately. A process may delay itself until the next&#10; time deadlock occurs by calling waitForDeadlock(). Then the next&#10; occasion time deadlock occurs, the director wakes up any processes&#10; waiting for deadlock, and does not advance the current time. Otherwise&#10; the current model time is increased as well as being advanced.  By default&#10; the model of computation used in the CSP domain is timed. To use CSP&#10; without a notion of time, do not use the delay(double) method in any process.&#10; &lt;p&gt;&#10; Changes to the topology can occur when deadlock, real or timed, is&#10; reached. The director carries out any changes that have been queued&#10; with it. Note that the result of the topology changes may remove the&#10; deadlock that caused the changes to be carried out.&#10; &lt;p&gt;  </description>
  <author>Neil Smyth, Mudit Goel, John S. Davis II</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (nsmyth)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (kienhuis)</Pt.AcceptedRating>
</doc>
