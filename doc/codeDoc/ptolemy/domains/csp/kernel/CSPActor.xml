<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CSPActor" class="ptolemy.domains.csp.kernel.CSPActor">
  <description>
This class is the base class of all atomic actors using the&#10; non-deterministic communication and timed features of  the communicating&#10; sequential processes(CSP) domain.&#10; &lt;p&gt;&#10; Two conditional communication constructs are available: &quot;Conditional if&quot;&#10; (CIF) and &quot;Conditional do&quot; (CDO). The constructs are analogous to,&#10; but different from, the common &lt;I&gt;if&lt;/I&gt; and &lt;I&gt;do&lt;/I&gt; statements. The&#10; steps involved in using both of these are&#10; &lt;BR&gt;(1) create the branches involved and assign an identification number&#10; to each branch.&#10; &lt;BR&gt;(2) call the chooseBranch() method, which invokes the chooseBranch()&#10; method of the controller to determine which branch should succeed.&#10; &lt;BR&gt;(3) execute the statements associated with the successful branch.&#10; &lt;P&gt;&#10; Each branch is either an instance of ConditionalSend or ConditionalReceive,&#10; depending on the communication in the branch. Please see these classes for&#10; details on &lt;I&gt;guarded communication statements&lt;/I&gt;, which they represent.&#10; The identification number assigned to each branch only needs to identify&#10; the branch uniquely for one sequence of the steps above. A good example&#10; of how to use a CDO is the code in the actor CSPBuffer, in the&#10; ptolemy.domains.csp.lib package. One significant difference between a&#10; CDO (or CIF) and a common &lt;I&gt;do&lt;/I&gt; (&lt;I&gt;if&lt;/I&gt;) is that all the branches&#10; are evaluated in parallel, as opposed to sequentially.&#10;&#10; &lt;p&gt;The chooseBranch() method takes an array of the branches as an&#10; argument, and simply passes the branches to the chooseBranch() method&#10; of the controller to decide which branch is successful. The successful&#10; branch is the branch that succeeds with its communication. See the&#10; chooseBranch() method of ConditionalBranchController for details&#10; about how the successful branch is chosen.&#10;&#10; &lt;p&gt;Time is supported by the method delay(double). This delays the&#10; process until time has advanced the argument time from the current&#10; model time.  If this method is called with a zero argument, then&#10; the process continues immediately. As far as each process is&#10; concerned, time can only increase while the process is blocked&#10; trying to rendezvous or when it is delayed. A process can be aware&#10; of the current model time, but it should only affect the model time&#10; through delays. Thus time is centralized in that it is advanced by&#10; the director controlling the process represented by this actor.&#10;&#10; &lt;p&gt;A process can also choose to delay its execution until the next&#10; occasion a deadlock occurs by calling _waitForDeadlock(). The&#10; process resumes at the same model time at which it delayed. This is&#10; useful if a process wishes to delay itself until some changes to&#10; the topology have been carried out.&#10;&#10; &lt;p&gt; The model of computation used in this domain extends the&#10; original CSP, as proposed by Hoare in 1978, model of computation in&#10; two ways.  First it allows non-deterministic communication using&#10; both sends and receives. The original model only allowed&#10; non-deterministic receives.  Second, a centralized notion of time&#10; has been added. The original proposal was untimed. Neither of these&#10; extensions are new, but it is worth noting the differences between&#10; the model used here and the original model. If an actor wishes to&#10; use either non-deterministic rendezvous or time, it must derive&#10; from this class. Otherwise deriving from AtomicActor is sufficient.&#10;&#10; &lt;p&gt;  </description>
  <author>Neil Smyth, Bilung Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (nsmyth)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (liuj)</Pt.AcceptedRating>
</doc>
