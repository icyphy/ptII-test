<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="BluetoothDevice" class="ptolemy.domains.wireless.lib.bluetooth.BluetoothDevice">
  <description>
This Actor is simulation of a Bluetooth adapter in a Bluetooth enabled device. The simulation is &lt;i&gt;functional&lt;/i&gt;,&#10; i.e. the hardware is not simulated. Instead, we provide an abstraction based on the Bluetooth dynamics found in&#10; popular platforms such as Android and iOS.&#10; &lt;p&gt;&#10; The Actor consists of six IO ports: four TypedIOPorts, and two WirelessIOPort. The wired ports simulate the&#10; adapters connection to peripheral hardware. The wired input port will accept a String whose value is equivalent&#10; to an acceptable command that can be found in the following list:&#10; &lt;p&gt;&#10; COMMAND_SWITCHON : Switch on this bluetooth device actor.&#10; &lt;p&gt;&#10;   COMMAND_SWITCHOFF : Swtich off this bluetooth device actor.&#10;   &lt;p&gt;&#10;   COMMAND_SCAN : Scan for other discoverable bluetooth device actors on this wireless channel.&#10;   &lt;p&gt;&#10;   COMMAND_STOPSCAN : Stop scanning for other discoverable bluetooth device actors on this wireless channel.&#10;   &lt;p&gt;&#10;   COMMAND_CONNECT : Connect to a paired bluetooth device actor on the same wireless channel. The device name to connect must be sent to the wired input details port.&#10;   &lt;p&gt;&#10;   COMMAND_DISCONNECT : Disconnect to a connected bluetooth device actor. The device name to disconnect from must be send to the wired input details port.&#10;   &lt;p&gt;&#10;   COMMAND_PAIR : Pair to a found bluetooth device actor on this wireless channel. The device name to pair to must be sent to the wired input details port.&#10;   &lt;p&gt;&#10;   COMMAND_UNPAIR : Unpair from a previously paired bluetooth device actor on this wireless channel. Note that this does not cause the other actor to unpair, a behavior particular to bluetooth. The device name to unpair from must be sent to the wired input details port.&#10;   &lt;p&gt;&#10;   COMMAND_DISCOVERABLE : Makes this bluetooth device actor discoverable to other scanning bluetooth device actors on the same channel.&#10;   &lt;p&gt;&#10;   COMMAND_HIDE : Makes this bluetooth device actor no longer discoverable.&#10;   &lt;p&gt;&#10;   COMMAND_SENDDATA : Initiate the sending of data. The name of the device to send data to must be sent to the wired input details port. The data must be sent to the wired input data port. The device to send data to must be found, paired, and connected with this bluetooth device actor&#10;   &lt;p&gt;&#10;   COMMAND_NOCOMMAND : The default command, which means that no token was available on the wired input port.&#10;   &lt;p&gt;&#10; To issue a command to this actor, only use the lower case equivalent of the second work, after the COMMAND_. Parsing occurs intenerally.&#10; &lt;p&gt;&#10; This actor can exist in 4 states, who vary in behavior: Off, Idle, Connected, and Scanning.&#10; &lt;p&gt;&#10; The dynamics of the actor are evaluated via a state machine implemented as a switch-case structure found in the fire() method.&#10; &lt;p&gt;&#10; In the event that there is a horrible failure, an incorrect input is received, or an input is not available when one is expected (i.e. when commanding connection or sending data,) an IllegalActionException will be thrown.&#10; &lt;p&gt;&#10; If all goes according to plan, the status of the iteration will be output to the wired output port. The token output to this port may also contain an generic piece of data. To retrieve this data, a downstream actor must call the getData() function on the output token. If this data is a string,&#10; it will be output if toString() is called, along with the status. The resulting String will be comma delimited, with the format Status,Data.&#10; &lt;p&gt;  </description>
  <author>Phillip Azar</author>
  <version>$Id$</version>
  <since>Ptolemy II 11.0</since>
  <Pt.ProposedRating></Pt.ProposedRating>
  <Pt.AcceptedRating></Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="wiredInput">The input port for wired communication, which could potentially facilitate communication with other&#10; devices/components/actors which are not wireless that interact with this actor.&#10; This port is of type String, and will be checked internally against a list of valid commands.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="wiredInputDetails">The input port for details about wired communications, which will contain a device identifier. The type of this port is String.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="wiredInputData">The input port for data to be sent. This will only be checked when the command to send data has been issued, and further will only be checked when in the&#10; connected state. This port is of type General.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="wiredOutput">The output port for wired communication, which could potentially facilitate communication with other&#10; devices/components/actors which are not wireless that interact with this actor.&#10; This port is of type General.</port>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="wirelessInputChannelName">Name of the wireless input channel. This is a string that defaults to&#10;  &quot;WirelessInputChannel&quot;.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="wirelessOutputChannelName">Name of the wireless output channel. This is a string that defaults to&#10;  &quot;WirelessOutputChannel&quot;.</property>
</doc>
