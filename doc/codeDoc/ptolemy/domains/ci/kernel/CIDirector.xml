<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CIDirector" class="ptolemy.domains.ci.kernel.CIDirector">
  <description>
Director of the component interaction (CI) domain. The CI domain supports&#10; two styles of interaction between actors, push and pull. In push interaction,&#10; the actor that produces data initiates the interaction. The receiving actor&#10; reacts to the data. The computation proceeds as data-driven. In pull&#10; interaction, the actor that consumes data decides when the interaction&#10; takes place, and the computation proceeds as demand-driven.&#10; &lt;p&gt;&#10; When a relation connects the push(pull) output port of one actor with the&#10; push(pull) input port of another, the style of interaction between the two&#10; actors is push(pull). To configure a port as a push port, add a parameter&#10; named &lt;i&gt;push&lt;/i&gt; to the port, and give the value &quot;true&quot; to the parameter.&#10; Ports are pull ports by default. Relations connecting both push and pull&#10; ports are not supported. (TODO: add check in the director.)&#10; &lt;p&gt;&#10; Actors in a CI model are classified as either active or inactive. Each&#10; active actor is controlled by an &lt;a href=&quot;../../../../ptolemy/domains/ci/kernel/ActiveActorManager.xml&quot;&gt;actor manager&lt;/a&gt;,&#10; which runs asynchronously with respect to the director (i.e. not in the&#10; same thread of control). Active actors include:&#10; &lt;ul&gt;&#10; &lt;li&gt; source actors with push output ports &lt;/li&gt;&#10; &lt;li&gt; sink actors with pull input ports &lt;/li&gt;&#10; &lt;li&gt; actors with pull input ports and push output ports &lt;/li&gt;&#10; &lt;/ul&gt;&#10; These actors initiate all the computation in a CI model. The director&#10; controls the execution of inactive actors by maintaining a task queue.&#10; A task in the queue is an inactive actor that either receives a token&#10; from an active actor via the push interaction, or is requested to&#10; produce a token by an active actor via the pull interaction. In one&#10; iteration of the CI model, the director removes the first actor from&#10; the queue. If the actor is pushed, the computation proceeds as&#10; data-driven from the actor, until the produced data reach actors that&#10; are either not ready to fire or with pull output ports and no pending&#10; pull request. If the actor is pulled, then the computation proceeds&#10; as demand-driven from the actor, until either the actor is fired or&#10; the pull request reaches actors that have push input ports and are not&#10; ready to fire.  </description>
  <author>Xiaojun Liu, Yang Zhao</author>
  <version>$Id$</version>
  <since>Ptolemy II 3.0</since>
  <Pt.ProposedRating>Yellow (liuxj)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (liuxj)</Pt.AcceptedRating>
</doc>
