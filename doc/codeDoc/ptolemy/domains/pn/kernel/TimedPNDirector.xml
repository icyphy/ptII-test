<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="TimedPNDirector" class="ptolemy.domains.pn.kernel.TimedPNDirector">
  <description>
A TimedPNDirector governs the execution of a CompositeActor with&#10; Kahn-MacQueen process networks (PN) semantics extended by introduction of a&#10; notion of global time.&#10; &lt;p&gt;&#10; The thread that calls the various execution methods (initialize, prefire, fire&#10; and postfire) on the director is referred to as the &lt;i&gt;directing thread&lt;/i&gt;.&#10; This directing thread might be the main thread responsible for the execution&#10; of the entire simulation or might be the thread created by the executive&#10; director of the containing composite actor.&#10; &lt;p&gt;&#10; In the PN domain, the director creates a thread (an instance of&#10; ProcessThread), representing a Kahn process, for each actor in the model.&#10; The threads are created in initialize() and started in the prefire() method&#10; of the ProcessDirector. A process is considered &lt;i&gt;active&lt;/i&gt; from its&#10; creation until its termination. An active process can block when trying to&#10; read from a channel (read-blocked), when trying to write to a channel&#10; (write-blocked), or when waiting for time to progress (time-blocked). Time&#10; can progress for an active process in this model of computation only when the&#10; process is  blocked.&#10; &lt;p&gt;&#10; A &lt;i&gt;deadlock&lt;/i&gt; is when all the active processes are blocked.&#10; The director is responsible for handling deadlocks during execution.&#10; This director handles three different sorts of deadlocks, real deadlock, timed&#10; deadlock and artificial deadlock.&#10; &lt;p&gt;&#10; A real deadlock is when all the processes are blocked on a read meaning that&#10; no process can proceed until it receives new data. The execution can be&#10; terminated, if desired, in such a situation. If the container of this director&#10; does not have any input ports (as is in the case of a top-level composite&#10; actor), then the executive director or manager terminates the execution.&#10; If the container has input ports, then it is up to the&#10; executive director of the container to decide on the termination of the&#10; execution. To terminate the execution after detection of a real deadlock, the&#10; manager or the executive director calls wrapup() on the director.&#10; &lt;p&gt;&#10; An artificial deadlock is when all processes are blocked and at least one&#10; process is blocked on a write. In this case the director increases the&#10; capacity of the receiver with the smallest capacity amongst all the&#10; receivers on which a process is blocked on a write.&#10; This breaks the deadlock and the execution can proceed.&#10; &lt;p&gt;&#10; A timed deadlock is when all the processes under the control of this&#10; director are blocked, at least one process is blocked on a delay (time-blocked)&#10; and no process is blocked on a write. This director supports a notion of global&#10; time. All active processes that are not blocked and are executing concurrently&#10; are executing at the same global time. A process that wants time to advance,&#10; suspends itself by calling the fireAt() method of the director and specifies&#10; the time it wants to be awakened at. Time can advance only when a timed&#10; deadlock occurs. In such a case, the director advances time to the time when&#10; the first timed-blocked process can be awakened.&#10; &lt;p&gt;  </description>
  <author>Mudit Goel</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (mudit)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (davisj)</Pt.AcceptedRating>
</doc>
