<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="PNDirector" class="ptolemy.domains.pn.kernel.PNDirector">
  <description>
&lt;p&gt;A PNDirector governs the execution of a CompositeActor with extended&#10; Kahn-MacQueen process networks (PN) semantics. This model of computation has&#10; been extended to support mutations of graphs in a non-deterministic way.&#10; &lt;/p&gt;&lt;p&gt;&#10; The thread that calls the various execution methods (initialize, prefire, fire&#10; and postfire) on the director is referred to as the &lt;i&gt;directing thread&lt;/i&gt;.&#10; This directing thread might be the main thread responsible for the execution&#10; of the entire simulation or might be the thread created by the executive&#10; director of the containing composite actor.&#10; &lt;/p&gt;&lt;p&gt;&#10; In the PN domain, the director creates a thread (an instance of&#10; ProcessThread), representing a Kahn process, for each actor in the model.&#10; The threads are created in initialize() and started in the prefire() method&#10; of the ProcessDirector. A process is considered &lt;i&gt;active&lt;/i&gt; from its&#10; creation until its termination. An active process can block when trying to&#10; read from a channel (read-blocked), when trying to write to a channel&#10; (write-blocked) or when waiting for a queued topology change request to be&#10; processed (mutation-blocked).&#10; &lt;/p&gt;&lt;p&gt;&#10; A &lt;i&gt;deadlock&lt;/i&gt; is when all the active processes are blocked.&#10; The director is responsible for handling deadlocks during execution.&#10; This director handles two different sorts of deadlocks, &lt;i&gt;real deadlock&lt;/i&gt;&#10; and &lt;i&gt;artificial deadlock&lt;/i&gt;.&#10; &lt;/p&gt;&lt;p&gt;&#10; A real deadlock is when all the processes are blocked on a read meaning that&#10; no process can proceed until it receives new data. The execution can be&#10; terminated, if desired, in such a situation. If the container of this director&#10; does not have any input ports (as is in the case of a top-level composite&#10; actor), then the executive director or manager terminates the execution.&#10; If the container has input ports, then it is up to the&#10; executive director of the container to decide on the termination of the&#10; execution. To terminate the execution after detection of a real deadlock, the&#10; manager or the executive director calls wrapup() on the director.&#10; &lt;/p&gt;&lt;p&gt;&#10; An artificial deadlock is when all processes are blocked and at least one&#10; process is blocked on a write. In this case the director increases the&#10; capacity of the receiver with the smallest capacity amongst all the&#10; receivers on which a process is blocked on a write.&#10; This breaks the deadlock and the execution can resume.&#10; If the increase results in a capacity that exceeds the value of&#10; &lt;i&gt;maximumQueueCapacity&lt;/i&gt;, then instead of breaking the deadlock,&#10; an exception is thrown.  This can be used to detect erroneous models&#10; that require unbounded queues.&lt;/p&gt;&#10;&#10; &lt;p&gt;There are at least three ways for a PN model to terminate itself:&#10; &lt;ol&gt;&#10; &lt;li&gt;Have the model starve itself.  Typically, a boolean switch is used.&#10; See the PN OrderedMerge demo at&#10;  &lt;a href=&quot;ptolemy/domains/pn/demo/OrderedMerge/OrderedMerge.xml&quot;&gt;&lt;code&gt;ptolemy/domains/pn/demo/OrderedMerge/OrderedMerge.xml&lt;/code&gt;&lt;/a&gt;&#10;&#10; &lt;li&gt;Have the model call the Stop actor.  See the PN RemoveNilTokens demo at&#10;  &lt;a href=&quot;ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.xml&quot;&gt;&lt;code&gt;ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.xmll&lt;/code&gt;&lt;/a&gt;&#10;&#10; &lt;li&gt;Set the &lt;i&gt;firingCountLimit&lt;/i&gt;&#10; (&lt;a href=&quot;../../../../ptolemy/actor/lib/LimitedFiringSource.xml#_firingCountLimit&quot;&gt;_firingCountLimit&lt;/a&gt;) actor&#10; parameter to the number of iterations desired.  Actors such as Ramp&#10; extend LimitedFiringSource and have the &lt;i&gt;firingCountLimit&lt;/i&gt; parameter.&#10; &lt;/ol&gt;  </description>
  <author>Mudit Goel, Edward A. Lee, Xiaowen Xin</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (mudit)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (davisj)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="initialQueueCapacity">The initial size of the queues for each communication channel.&#10;  This is an integer that defaults to 1.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="maximumQueueCapacity">The maximum size of the queues for each communication channel.&#10;  This is an integer that defaults to 65536.  To specify unbounded&#10;  queues, set this to 0.</property>
</doc>
