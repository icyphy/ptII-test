<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Integrator" class="ptolemy.domains.continuous.lib.Integrator">
  <description>
The integrator in the continuous domain.&#10; &lt;p&gt;The &lt;i&gt;derivative&lt;/i&gt; port receives the derivative of the state of the integrator&#10; with respect to time. The &lt;i&gt;state&lt;/i&gt; output port shows the state of the&#10; integrator. So an ordinary differential equation (ODE),&#10; dx/dt = f(x, t), can be built as follows:&lt;/p&gt;&#10; &lt;pre&gt;&#10;            +---------------+&#10;     dx/dt  |               |   x&#10; +---------&amp;gt;|   Integrator  |---------+-----&amp;gt;&#10; |          |               |         |&#10; |          +----^-----^----+         |&#10; |                                    |&#10; |             |---------|            |&#10; +-------------| f(x, t) |&amp;lt;-----------+&#10;               |---------|&#10; &lt;/pre&gt;&#10;&#10; &lt;p&gt; An integrator also has a port-parameter called &lt;i&gt;initialState&lt;/i&gt;. The&#10; parameter provides the initial state for integration during the initialization&#10; stage of execution. If during execution an input token is provided on&#10; the port, then the state of the integrator will be reset at that time&#10; to the value of the token. The default value of the parameter is 0.0.&lt;/p&gt;&#10;&#10; &lt;p&gt; An integrator also has an input port named &lt;i&gt;impulse&lt;/i&gt;.&#10; When present, a token at the &lt;i&gt;impulse&lt;/i&gt; input&#10; port is interpreted as the weight of a Dirac delta function.&#10; It cause an instantaneous increment or decrement to the state.&#10; If both &lt;i&gt;impulse&lt;/i&gt; and &lt;i&gt;initialState&lt;/i&gt; have data, then&#10; &lt;i&gt;initialState&lt;/i&gt; dominates.&lt;/p&gt;&#10;&#10; &lt;p&gt; An integrator can generate an output (its current state) before&#10; the derivative input is known, and hence can be used in feedback&#10; loops like that above without creating a causality loop.&#10; The &lt;i&gt;impulse&lt;/i&gt; and &lt;i&gt;initialState&lt;/i&gt; inputs&#10; ports must be known, however, before an output can be produced.&#10; The effect of data at these inputs on the output is instantaneous.&lt;/p&gt;&#10;&#10; &lt;p&gt;For different ODE solving methods, the functionality&#10; of an integrator may be different. The delegation and strategy design&#10; patterns are used in this class, the abstract ODESolver class, and the&#10; concrete ODE solver classes. Some solver-dependent methods of integrators&#10; delegate to the concrete ODE solvers.&lt;/p&gt;&#10;&#10; &lt;p&gt;An integrator can possibly have several auxiliary variables for the&#10; the ODE solvers to use. The ODE solver class provides the number of&#10; variables needed for that particular solver.&#10; The auxiliary variables can be set and get by setAuxVariables()&#10; and getAuxVariables() methods.&lt;/p&gt;&#10;&#10; &lt;p&gt;This class is based on the CTIntegrator by Jie Liu.&lt;/p&gt;  </description>
  <author>Haiyang Zheng and Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 6.0</since>
  <Pt.ProposedRating>Green (hyzheng)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (eal)</Pt.AcceptedRating>
</doc>
