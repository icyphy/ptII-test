<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="PetriNetDirector" class="ptolemy.domains.petrinet.kernel.PetriNetDirector">
  <description>
This implementation of a PetriNet Director is an extension of the PetriNet&#10; Director created by Wang and Lee located in the experimental domain.  This&#10; director supports an iteration count that can be used to stop execution,&#10; even if transitions are ready to fire.  The director also supports a&#10; PetriNetDisplay actor that prints token counts of all the Places (at each&#10; iteration) after execution is finished.  The documentation for the original&#10; Wang and Lee director is provided below and includes a definition of PetriNet.&#10;&#10; &lt;p&gt;&#10; This domain implements the basic Petri Net model where Places and Transitions&#10; form a bipartite graph and enabled Transitions can fire randomly. It also&#10; allows Transitions to be replaced by any other Actors in Ptolemy. It&#10; implements two forms of Hierarchical and compositional Petri nets. The first&#10; form of hierarchical and compositional Petri net semantics comes from the&#10; fact that a Transition can contain a sub-Petri-net which is invisible to the&#10; director of the container of the Transition. The second form of hierarchical&#10; and compositional Petri net semantics comes from a new Actor called&#10; PetriNetActor which is a collection of Places and Transitions, and those&#10; Places and Transitions are visible to the director of the container of the&#10; PetriNetActor. The users can choose which form of models to use, and/or mix&#10; them together.&#10;&#10; &lt;p&gt;&#10; The basic Petri net is a directed, weighted, bipartite graph consisting of&#10; two kinds of nodes, called &lt;i&gt;Places&lt;/i&gt; and &lt;i&gt;Transitions&lt;/i&gt;, where arcs&#10; are either from a Place to a Transition or from a Transition to a Place. In&#10; graphical representation, Places are drawn as circles, Transitions as bars or&#10; boxes. Arcs are labeled with their &lt;i&gt;weights&lt;/i&gt; (positive integers).&#10; Labels of unity weight are usually omitted. Multiple arcs can exist between a&#10; Place and a Transition. A &lt;i&gt;marking&lt;/i&gt; assigns to each Place &lt;i&gt;p&lt;/i&gt; an&#10; nonnegative integer &lt;i&gt;k&lt;/i&gt;, we say that &lt;i&gt;p&lt;/i&gt; is &lt;i&gt;marked with k&#10; tokens&lt;/i&gt;.&#10;&#10; &lt;p&gt;&#10; Please note here the term &lt;i&gt;token&lt;/i&gt; is used differently from the general&#10; Ptolemy term &lt;i&gt;token&lt;/i&gt;. Here a &lt;i&gt;token&lt;/i&gt; is really the integer 1.&#10; &lt;i&gt;k tokens&lt;/i&gt; is represented by the integer &lt;i&gt;k&lt;/i&gt;.&#10;&#10; &lt;p&gt;&#10; A Transition &lt;i&gt;t&lt;/i&gt; is said to be &lt;i&gt;enabled&lt;/i&gt; if each input Place &lt;i&gt;p&lt;/i&gt;&#10; of &lt;i&gt;t&lt;/i&gt; is marked with at least the sum of &lt;i&gt;w(p, t)&lt;/i&gt; tokens, where&#10; &lt;i&gt;w(p, t)&lt;/i&gt; are the weights of the arcs from &lt;i&gt;p&lt;/i&gt; to &lt;i&gt;t&lt;/i&gt;.&#10;&#10; &lt;p&gt;&#10; An enabled Transition may or may not fire. When there are multiple enabled&#10; Transitions, any of them can fire randomly. A firing of an enabled Transition&#10; &lt;i&gt;t&lt;/i&gt; removes &lt;i&gt;w(p, t)&lt;/i&gt; tokens from each input Place &lt;i&gt;p&lt;/i&gt; of&#10; &lt;i&gt;t&lt;/i&gt;, and adds &lt;i&gt;w(t, p)&lt;/i&gt; tokens to each output Place &lt;i&gt;p&lt;/i&gt; of&#10; &lt;i&gt;t&lt;/i&gt;, where &lt;i&gt;w(t, p) and w(p, t) &lt;/i&gt; are the weights of the arcs from&#10; and to the Transition respectively.&#10;&#10; &lt;p&gt;&#10; A Transition without any input Place is called a &lt;i&gt;source Transition&lt;/i&gt;,&#10; and one without any output Place is called a &lt;i&gt;sink Transition&lt;/i&gt;. Note&#10; that a source Transition is unconditionally enabled, and that the firing of a&#10; sink Transition consumes tokens, but does not produce any.&#10;&#10; &lt;p&gt;&#10; Many variations of Petri net exist in the literature including: hierarchical&#10; Petri nets, colored Petri nets, timed Petri nets, fuzzy Petri nets,&#10; stochastic Petri nets, compositional Petri nets, and many of the&#10; combinations.&#10;&#10; &lt;p&gt;&#10; As pointed out earlier, in Ptolemy we implement the basic Petri net model&#10; plus two kinds of hierarchical and compositional Petri nets. This is made&#10; possible by defining the PetriNetActor. The PetriNetActor is a directed and&#10; weighted graph just like the basic Petri Net model. However, a PetriNetActor&#10; graph &lt;i&gt;G = (V, E) &lt;/i&gt; contains three kinds of nodes: Places &lt;i&gt;p_i&lt;/i&gt;,&#10; Transitions &lt;i&gt;t_i&lt;/i&gt;, and PetriNetActors &lt;i&gt;PA_i&lt;/i&gt;, i.e., &lt;i&gt; V = {p_i}&#10; union {t_i} union {PA_i} &lt;/i&gt;, where each &lt;i&gt;PA_i&lt;/i&gt; itself is again&#10; defined as a PetriNetActor. Places are assigned with non-negative integer&#10; markings. The default marking is 0. A Place is implemented by the atomic&#10; actor Place. A PetriNetActor is a TypedCompositeActor contains Places,&#10; Transitions and/or PetriNetActors.&#10;&#10; &lt;p&gt;&#10; Each node of &lt;i&gt;V&lt;/i&gt; is called a &lt;i&gt;component&lt;/i&gt; of the PetriNetActor&#10; &lt;i&gt;G&lt;/i&gt;. Therefore the vertex set &lt;i&gt;V&lt;/i&gt; of &lt;i&gt;G&lt;/i&gt; is also called the&#10; &lt;i&gt;component set&lt;/i&gt; of the PetriNetActor &lt;i&gt;G&lt;/i&gt;. The concept of&#10; &lt;i&gt;component&lt;/i&gt; is a key difference between the basic Petri net model and&#10; the hierarchical Petri net model defined here. In Ptolemy term, a component&#10; is an element in the entityList of the PetriNetActor. A PetriNetActor&#10; consists of components. A component can be a Place, a Transition, and a&#10; PetriNetActor component. A component can be enabled and fires if it is a&#10; Transition or it is a PetriNetActor component that contains other&#10; Transitions. When the firing method _fireHierarchicalPetriNetOnce() fires, it&#10; chooses one component to fire.&#10;&#10; &lt;p&gt;&#10; The definition of PetriNetActor defines one form of hierarchical and&#10; compositional Petri nets. It defines a hierarchical Petri net since the&#10; PetriNetActor &lt;i&gt;G&lt;/i&gt; can contain other PetriNetActors &lt;i&gt;PA_i&lt;/i&gt; as&#10; components. It defines a compositional Petri net since two PetriNetActors&#10; &lt;i&gt;PA_1 and PA_2 &lt;/i&gt; of &lt;i&gt;V&lt;/i&gt; can be connected through their ports to&#10; form a bigger Petri net &lt;i&gt;G&lt;/i&gt;.&#10;&#10; &lt;p&gt;&#10; The second form of Hierarchical and compositional Petri net comes from the&#10; fact that a Transition can be any TypedCompositeActor in Ptolemy domains,&#10; which can have its own firing director. The content of the Transition is&#10; invisible to the director of the container of the Transition. Therefore it is&#10; possible to have a Transition contains other Places and Transitions and has a&#10; PetriNetDirector as the local director for the Transition.&#10;&#10; &lt;p&gt;&#10; The &lt;i&gt;set of Transitions&lt;/i&gt; of the PetriNetActor &lt;i&gt;G&lt;/i&gt;, or the&#10; Transition set of &lt;i&gt;G&lt;/i&gt;, is defined to be the union of the Transitions&#10; &lt;i&gt;t_i&lt;/i&gt; with the sets of Transitions of each PetriNetActor component&#10; &lt;i&gt;PA_i&lt;/i&gt;. A member of the Transition set of &lt;i&gt;G&lt;/i&gt; is therefore&#10; contained in &lt;i&gt;G&lt;/i&gt; itself in which case the Transition is also a&#10; component of &lt;i&gt;G&lt;/i&gt;, or it is contained in some PetriNetActor component&#10; &lt;i&gt;PA_i&lt;/i&gt;. Therefore a Transition is a different concept from a Component&#10; in PetriNetActor graph. The method findTransitions() returns the Transition&#10; set of &lt;i&gt;G&lt;/i&gt;.&#10;&#10; &lt;p&gt;&#10; A component has ports through which connections to other components are made.&#10; A Place or a Transition each has one input port and one output port, where&#10; multiple connections can be made. In our model, a PetriNetActor component can&#10; have multiple ports. A PetriNetActor component &lt;i&gt;PA_j&lt;/i&gt; can be connected&#10; to Places &lt;i&gt;p_i&lt;/i&gt;, Transitions &lt;i&gt;t_i&lt;/i&gt;, or other PetriNetActor&#10; components &lt;i&gt;PA_i&lt;/i&gt; through ports. A Place &lt;i&gt;p_i&lt;/i&gt; can be connected&#10; to Transitions &lt;i&gt;t_i&lt;/i&gt;, or to ports of PetriNetActor components &lt;i&gt;PA_i&lt;/i&gt;.&#10; A Transition &lt;i&gt;t_i&lt;/i&gt; can be connected to Places &lt;i&gt;p_i&lt;/i&gt; or to ports&#10; of PetriNetActor components &lt;i&gt;PA_i&lt;/i&gt;.&#10;&#10; &lt;p&gt;&#10; One restriction is that a port of a PetriNetActor component &lt;i&gt;PA_i&lt;/i&gt; is&#10; either connected to Places or to Transitions, but not both. Another&#10; restriction is that a Place (Transition) is not allowed to be connected to&#10; another Place (Transition) through ports. Though no verification of these two&#10; conditions is checked, any violation of these two conditions will be reported&#10; by appropriate methods during the execution.&#10;&#10; &lt;p&gt;&#10; Multiple arcs can exist between any two components. The arcs can be marked by&#10; an nonnegative integer as their weights. Weight 1 can be omitted. The method&#10; _getWeightNumber(arc) obtains the weight assigned to the arc. If no weight is&#10; assigned, the default weight is 1.&#10;&#10; &lt;p&gt;&#10; For a Transition &lt;i&gt;t&lt;/i&gt;, all Places &lt;i&gt;p&lt;/i&gt; that can reach &lt;i&gt;t&lt;/i&gt;&#10; through ports or without ports are the input Places of &lt;i&gt;t&lt;/i&gt;. All Places&#10; that can be reached from &lt;i&gt;t&lt;/i&gt; through ports or without ports are the&#10; output Places of &lt;i&gt;t&lt;/i&gt;. Given a Transition &lt;i&gt;t&lt;/i&gt;, the methods&#10; _findBackwardConnectedPlaces() and _findForwardConnectedPlaces() find the&#10; input and output Places of the Transition respectively.&#10;&#10; &lt;p&gt;&#10; A Transition &lt;i&gt;t&lt;/i&gt; is enabled or ready in the PetriNetActor if for each&#10; input Place &lt;i&gt;p&lt;/i&gt; of &lt;i&gt;t&lt;/i&gt;, the marking of &lt;i&gt;p&lt;/i&gt; is bigger than&#10; the sum of the weights of all arcs connecting &lt;i&gt;p&lt;/i&gt; to &lt;i&gt;t&lt;/i&gt;. The&#10; method isTransitionReady(transition) tests whether the given Transition is&#10; enabled/ready or not.&#10;&#10; &lt;p&gt;&#10; If a Transition &lt;i&gt;t&lt;/i&gt; is enabled and &lt;i&gt;t&lt;/i&gt; is contained in a&#10; PetriNetActor component &lt;i&gt;PA_i&lt;/i&gt;, then the PetriNetActor component&#10; &lt;i&gt;PA_i&lt;/i&gt; is also an enabled component. On the other hand, for any&#10; PetriNetActor component &lt;i&gt;PA_i&lt;/i&gt;, if it contains an enabled Transition,&#10; then the PetriNetActor component &lt;i&gt;PA_i&lt;/i&gt; is enabled. The method&#10; PetriNetActor.prefire() tests whether there is any enabled Transitions&#10; contained in the PetriNetActor component.&#10;&#10; &lt;p&gt;&#10; An enabled Transition may or may not fire. For the given PetriNetActor &lt;i&gt;G&lt;/i&gt;,&#10; all its enabled components including Transitions &lt;i&gt;t_i&lt;/i&gt; and&#10; PetriNetActor components &lt;i&gt;PA_i&lt;/i&gt; are collected together in a list&#10; returned by _readyComponentList(). Suppose the list has &lt;i&gt;n&lt;/i&gt; components&#10; of &lt;i&gt;t_i&lt;/i&gt; and &lt;i&gt;PA_i&lt;/i&gt;, each component has &lt;i&gt;1/n&lt;/i&gt; probability&#10; to be chosen to fire. The method _fireHierarchicalPetriNetOnce() chooses one&#10; component from the list to fire.&#10;&#10; &lt;p&gt;&#10; If an enabled Transition is chosen to fire, the method fireTransition() is&#10; called to fire the Transition and update the input and output Places of the&#10; Transition. The firing of the Transition is determined by its own director,&#10; if there is one, otherwise no action is needed. For each input Place of the&#10; Transition, its marking has to be decreased by the weight of each arc&#10; connecting the Place to the Transition. For each output Place, the marking&#10; will be increased by the weight of each arc connecting the Transition to the&#10; Place.&#10;&#10; &lt;p&gt;&#10; If a PetriNetActor component &lt;i&gt;PA_i&lt;/i&gt; is chosen to fire, the director&#10; then recursively repeats the same procedure for &lt;i&gt;PA_i&lt;/i&gt; as for the top&#10; level PetriNetActor &lt;i&gt;G&lt;/i&gt;.&#10;&#10; &lt;p&gt;&#10; Finally, the firing of the hierarchical Petri net is continued until there is&#10; no more Transitions and components to fire, or it goes to infinite loop.&#10; Currently no action is taken for infinite loops.&#10;&#10; &lt;p&gt;&#10; Other form of firing sequence can be defined as well. We could randomly fire&#10; all the deeply contained Transitions. We could randomly fire the components&#10; in each hierarchy.&#10;&#10; [1] T. Murata, &quot;Petri nets: properties, analysis and applications&quot;,&#10; Proceedings of the IEEE, VOl. 77, NO. 4, April 1989, pp. 541-579. [2] J. L.&#10; Peterson, &quot;Petri Net Theory and the modeling of systems&quot;, Prentice Hall,&#10; 1981.  </description>
  <author>Yuke Wang, Edward A. Lee and modified by Zach Ezzell</author>
  <version>$Id$</version>
  <since>Ptolemy II 8.1</since>
    <!--ptolemy.actor.parameters.SharedParameter-->
    <property name="resetOnEachRun">If true, this parameter specifies that the random number&#10;  generator should be reset on each run of the model (in&#10;  the initialize() method). It is a boolean that defaults&#10;  to false. This is a shared parameter, meaning that changing&#10;  it somewhere in the model causes it to be changed everywhere&#10;  in the model.</property>
    <!--ptolemy.actor.parameters.SharedParameter-->
    <property name="seed">The seed that controls the random number generator that&#10;  determines which component is fired.&#10;&#10;  &lt;p&gt;This is a shared parameter, meaning that all instances of&#10;  PetriNetDirector or derived classes in the same model share the&#10;  same value.  This parameter is used for testing so that a&#10;  model has predictable results and can be compared against&#10;  known good results.&lt;/p&gt;&#10;&#10;  &lt;p&gt;A seed of zero is interpreted to mean that no seed is&#10;  specified, which means that each execution of the model could&#10;  result in distinct data. For the value 0, the seed is set to&#10;  System.currentTimeMillis() + hashCode(), which means that with&#10;  extremely high probability, two distinct directors will have&#10;  distinct seeds.  However, current time may not have enough&#10;  resolution to ensure that two subsequent executions of the&#10;  same model have distinct seeds. For a value other than zero,&#10;  the seed is set to that value plus the hashCode() of the full&#10;  name of the director. This means that with high probability,&#10;  two distinct director will have distinct, but repeatable&#10;  seeds.&lt;/p&gt;&#10;&#10;  &lt;p&gt;This parameter contains a LongToken, initially with value&#10;  0.&lt;/p&gt;</property>
</doc>
