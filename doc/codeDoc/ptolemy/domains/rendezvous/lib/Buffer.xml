<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Buffer" class="ptolemy.domains.rendezvous.lib.Buffer">
  <description>
This actor buffers data provided at the input, sending it to the&#10; output when needed. It uses two threads. The main actor thread&#10; is willing to rendezvous with the output as long as the buffer&#10; is not empty. A second thread is created on the first invocation&#10; of fire(). This second thread is willing to rendezvous with the&#10; input as long as the buffer is not full. Thus, this actor&#10; acts as a FIFO (first-in, first-out) buffer that will accept&#10; input tokens as long as it is not full, and will produce output&#10; tokens as long as it is not empty.&#10; &lt;p&gt;&#10; If the capacity changes during execution, and the buffer already&#10; contains more tokens than the new capacity, then no tokens are lost,&#10; but no new tokens are accepted at the input until the number of&#10; buffered tokens drops below the capacity.&#10; &lt;p&gt;&#10; This actor is similar to the ResourcePool actor except that&#10; the input and output ports are not multiports and there are&#10; no initial tokens in this buffer.  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 5.1</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="input">The input port.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="output">The output port. The type of this output is constrained&#10;  to be at least that of the input.</port>
    <!--ptolemy.data.expr.Parameter-->
    <property name="capacity">The capacity of the buffer. To provide &quot;infinite&quot; capacity,&#10;  set this to a negative number.</property>
</doc>
