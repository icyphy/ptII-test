<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Transition" class="ptolemy.domains.modal.kernel.Transition">
  <description>
A Transition has a source state and a destination state. A&#10;   transition has a guard expression, which is evaluated to a boolean value.&#10;   Whenever a transition out of the current state&#10;   is enabled, it must be taken in the current firing.&#10;   That is, unlike some state machines formalisms, our guard is not just&#10;   an enabler for the transition but rather a trigger for the transition.&#10;&#10;   &lt;p&gt; A transition can contain actions. The way to specify actions is&#10;   to give value to the &lt;i&gt;outputActions&lt;/i&gt; parameter and the&#10;   &lt;i&gt;setActions&lt;/i&gt; parameter.&#10;&#10;   The value of these parameters is a string of the form:&#10;   &lt;pre&gt;&#10;   &lt;i&gt;command&lt;/i&gt;; &lt;i&gt;command&lt;/i&gt;; ...&#10;   &lt;/pre&gt;&#10;   where each &lt;i&gt;command&lt;/i&gt; has the form:&#10;   &lt;pre&gt;&#10;   &lt;i&gt;destination&lt;/i&gt; = &lt;i&gt;expression&lt;/i&gt;&#10;   &lt;/pre&gt;&#10;   For the &lt;i&gt;outputActions&lt;/i&gt; parameter, &lt;i&gt;destination&lt;/i&gt; is either&#10;   &lt;pre&gt;&#10;   &lt;i&gt;portName&lt;/i&gt;&#10;   &lt;/pre&gt;&#10;   or&#10;   &lt;pre&gt;&#10;   &lt;i&gt;portName&lt;/i&gt;(&lt;i&gt;channelNumber&lt;/i&gt;)&#10;   &lt;/pre&gt;&#10;   Here, &lt;i&gt;portName&lt;/i&gt; is the name of a port of the FSM actor,&#10;   If no &lt;i&gt;channelNumber&lt;/i&gt; is given, then the value&#10;   is broadcast to all channels of the port.&#10;   &lt;p&gt;&#10;   For the &lt;i&gt;setActions&lt;/i&gt; parameter, &lt;i&gt;destination&lt;/i&gt; is&#10;   &lt;pre&gt;&#10;   &lt;i&gt;variableName&lt;/i&gt;&#10;   &lt;/pre&gt;&#10;   &lt;i&gt;variableName&lt;/i&gt; identifies either a variable or parameter of&#10;   the FSM actor, or a variable or parameter of the refinement of the&#10;   destination state of the transition. To give a variable of the&#10;   refinement, use a dotted name, as follows:&#10;   &lt;pre&gt;&#10;   &lt;i&gt;refinementName&lt;/i&gt;.&lt;i&gt;variableName&lt;/i&gt;&#10;   &lt;/pre&gt;&#10;   The &lt;i&gt;expression&lt;/i&gt; is a string giving an expression in the usual&#10;   Ptolemy II expression language. The expression may include references&#10;   to variables and parameters contained by the FSM actor.&#10;   &lt;p&gt;&#10;   The &lt;i&gt;outputActions&lt;/i&gt; and &lt;i&gt;setActions&lt;/i&gt; parameters are not the only&#10;   ways to specify actions. In fact, you can add action attributes that are&#10;   instances of anything that inherits from Action.&#10;   (Use the Add button in the Edit Parameters dialog).&#10;   &lt;p&gt;&#10;   An action is either a ChoiceAction or a CommitAction. The &lt;i&gt;setActions&lt;/i&gt;&#10;   parameter is a CommitAction, whereas the &lt;i&gt;outputActions&lt;/i&gt; parameter is a&#10;   ChoiceAction. A commit action is executed when the transition is taken to&#10;   change the state of the FSM, in the postfire() method of FSMActor.&#10;   A choice action, by contrast, is executed in the fire() method&#10;   of the FSMActor when the transition is chosen, but not yet taken.&#10;   The difference is subtle, and for most domains, irrelevant.&#10;   A few domains, however, such as CT, which have fixed point semantics,&#10;   where the fire() method may be invoked several times before the&#10;   transition is taken (committed). For such domains, it is useful&#10;   to have actions that fulfill the ChoiceAction interface.&#10;   Such actions participate in the search for a fixed point, but&#10;   do not change the state of the FSM.&#10;   &lt;p&gt;&#10;   A transition can be preemptive or non-preemptive. When a preemptive transition&#10;   is chosen, the refinement of its source state is not fired. A non-preemptive&#10;   transition is only chosen after the refinement of its source state is fired.&#10;   &lt;p&gt;&#10;   The &lt;i&gt;history&lt;/i&gt; parameter specifies whether the refinement of the destination&#10;   state refinement is initialized when the transition is taken. By default, this&#10;   is false, which means that the destination refinement is initialized.&#10;   If you change this to true, then the destination refinement will not be&#10;   initialized, so when the state is re-entered, the refinement will&#10;   continue executing where it left off.&#10;   &lt;p&gt;&#10;   The &lt;i&gt;nondeterministic&lt;/i&gt; parameter specifies whether this transition is&#10;   nondeterministic. Here nondeterministic means that this transition may not&#10;   be the only enabled transition at a time. The default value is a boolean&#10;   token with value as false, meaning that if this transition is enabled, it&#10;   must be the only enabled transition.&#10;   &lt;p&gt;&#10;   The &lt;i&gt;immediateTransition&lt;/i&gt; parameter, if given a value true, specifies&#10;   that this transition is may be taken as soon as its source state is entered,&#10;   in the same iteration. This may lead to transient states, where a state is&#10;   passed through without ever becoming the current state.&#10;   &lt;p&gt;&#10;   The &lt;i&gt;defaultTransition&lt;/i&gt; parameter, if given a value true, specifies&#10;   that this transition is enabled if no other non-default&#10;   transition is enabled and if its guard evaluates to true.&#10;   &lt;p&gt;&#10;   The &lt;i&gt;error&lt;/i&gt; parameter, if given a value true, specifies&#10;   that this transition is enabled if the refinement of the source state of&#10;   the transition throws a model error or an exception&#10;   while executing. The default value is a boolean&#10;   token with value false. When such an exception or model error&#10;   occurs, two variables are set that may be used in the guard&#10;   or the output or set actions of this transition:&#10;   &lt;ul&gt;&#10;   &lt;li&gt; &lt;i&gt;errorMessage&lt;/i&gt;: The error message (a string).&#10;   &lt;li&gt; &lt;i&gt;errorClass&lt;/i&gt;: The class of the exception thrown.&#10;   &lt;/ul&gt;&#10;   In addition, if the exception is an instance of KernelException&#10;   or a subclass (such as IllegalActionException), then a third&#10;   variable is set:&#10;   &lt;ul&gt;&#10;   &lt;li&gt; &lt;i&gt;errorCause&lt;/i&gt;: The Ptolemy object that caused the exception.&#10;   &lt;/ul&gt;&#10;   The &lt;i&gt;errorCause&lt;/i&gt; is made available as an ObjectToken on which&#10;   you can invoke methods such as getName() in the guard or output&#10;   or set actions of this transition.  </description>
  <author>Xiaojun Liu, Edward A. Lee, Haiyang Zheng, Christian Motika</author>
  <version>$Id$</version>
  <since>Ptolemy II 8.0</since>
  <Pt.ProposedRating>Yellow (hyzheng)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (hyzheng)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="annotation">An annotation that describes the transition. If this is non-empty,&#10;  then a visual editor will be expected to put this annotation on&#10;  or near the transition to document its function. This is a string&#10;  that defaults to the empty string. Note that it can reference&#10;  variables in scope using the notation $name.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="defaultTransition">Indicator that this transition is a default transition. A&#10;  default transition is enabled only if no other non-default&#10;  transition is enabled.  This is a boolean with default value&#10;  false. If the value is true, then the guard expression is&#10;  ignored.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="error">Parameter specifying whether this transition should be treated&#10;  as an error transition.  The default value is a boolean with&#10;  the value false, which indicates that this transition is not&#10;  an error transition.  If the value is true, that this transition&#10;  is enabled if and only if the refinement of the source state of&#10;  the transition throws a model error while executing.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="exitAngle">Attribute the exit angle of a visual rendition.&#10;  This parameter contains a DoubleToken, initially with value PI/5.&#10;  It must lie between -PI and PI.  Otherwise, it will be truncated&#10;  to lie within this range.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="fsmTransitionParameterName">The name of the transition, which defaults to the name of&#10;  the transition followed by the string &quot;Parameter&quot;.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="gamma">Attribute giving the orientation of a self-loop. This is equal to&#10; the tangent at the midpoint (more or less).&#10;  This parameter contains a DoubleToken, initially with value 0.0.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="history">Parameter specifying whether the refinements of the destination&#10;  state are initialized when the transition is taken.&#10;  This is a boolean that defaults to false.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="immediate">Parameter specifying whether this transition is immediate.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="nondeterministic">Parameter specifying whether this transition is nondeterministic.&#10;  Here nondeterministic means that this transition may not be the only&#10;  enabled transition at a time. The default value is a boolean token&#10;  with value as false, meaning that if this transition is enabled, it&#10;  must be the only enabled transition.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="preemptive">Parameter specifying whether this transition is preemptive.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="showFSMTransitionParameter">True of the the value of the &lt;a href=&quot;../../../../ptolemy/domains/modal/kernel/Transition.xml#fsmTransitionParameterName&quot;&gt;fsmTransitionParameterName&lt;/a&gt; parameter&#10;  should be returned by &lt;a href=&quot;../../../../ptolemy/domains/modal/kernel/Transition.html#getLabel&quot;&gt;getLabel()&lt;/a&gt;.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="termination">Parameter specifying whether the refinements of the origin&#10;  state must have terminated (postfire has returned false)&#10;  for the transition to be enabled.</property>
    <!--ptolemy.kernel.util.StringAttribute-->
    <property name="guardExpression">Attribute specifying the guard expression.</property>
    <!--ptolemy.kernel.util.StringAttribute-->
    <property name="refinementName">Attribute specifying one or more names of refinements. The&#10;  refinements must be instances of TypedActor and have the same&#10;  container as the FSMActor containing this state, otherwise&#10;  an exception will be thrown when getRefinement() is called.&#10;  Usually, the refinement is a single name. However, if a&#10;  comma-separated list of names is provided, then all the specified&#10;  refinements will be executed.&#10;  This attribute has a null expression or a null string as&#10;  expression when the state is not refined.</property>
</doc>
