<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="ModalModel" class="ptolemy.domains.modal.modal.ModalModel">
  <description>
This is a typed composite actor designed to be a modal model.&#10; Inside the modal model is a finite-state machine controller, and&#10; inside each state in the FSM is a refinement model. To use this&#10; actor, just drag it into a model, and look inside to start constructing&#10; the controller.  You may add ports to get inputs and outputs, and&#10; add states to the controller.  You may add one or more refinements&#10; to a state (each of these refinements will be executed when this&#10; actor is executed).  Each refinement is required to have its own&#10; director, so you will need to choose a director.&#10; &lt;p&gt;&#10; The controller is a finite-state machine (FSM), which consists of&#10; states and transitions.  One of the states is an initial state.&#10; When this actor executes, if the current state has a refinement,&#10; then that refinement is executed.  Then the guards on all the outgoing&#10; transitions of the current state are evaluated, and if one of those&#10; guards is true, then the transition is taken.  Taking the transition&#10; means that the actions associated with the transition are executed&#10; (which can result in producing outputs), and the new current state is&#10; the state at the destination of the transition.  It is an error if&#10; more than one of the guards evaluates to true.&#10; &lt;p&gt;&#10; To add a state, click on a state button in the toolbar, or drag&#10; in a state from the library at the left.  To add a transition,&#10; position the mouse over the source state, hold the control button,&#10; and drag to the destination state.  The destination state may be&#10; the same state, in which case the transition is used simply to&#10; execute its actions.&#10; &lt;p&gt;&#10; Adding or removing ports in this actor results in the same ports appearing&#10; or disappearing in the FSM controller and in each of the refinements.&#10; Similarly, adding or removing ports in the controller or in the&#10; refinements results in this actor and the other refinements&#10; reflecting the same change to the ports.  That is, this actor,&#10; the controller, and the refinments all contain the same ports.&#10; &lt;p&gt;&#10; There is one subtlety regarding ports however.  If you add an&#10; output port to a refinement, then the corresponding port in the&#10; controller will be both an input and an output.  The reason for&#10; this is that the controller can access the results of executing&#10; a refinement in order to choose a transition.&#10; &lt;p&gt;&#10; This class is designed to work closely with ModalController and&#10; Refinement, since changes to ports can be initiated in this class&#10; or in those. It works with continuous-time as well as discrete-time&#10; models.&#10; &lt;p&gt;&#10; By default, this actor has a conservative causality interface,&#10; which examines the FSMActor controller and all the refinements&#10; and defines input/output dependencies that are the oPlus combination&#10; of all their dependencies. If&#10; the &lt;i&gt;stateDependentCausality&lt;/i&gt; is false (the default),&#10; then this causality interface in conservative and valid in all&#10; states. If it is true, then the causality interface will show&#10; different input/output dependencies depending on the state.&#10; In each state, only the controller and the current refinement&#10; will be considered, and in the controller, only the outgoing&#10; transitions from the current state will be considered.&#10; &lt;p&gt;&#10; This class also fulfills the CTEventGenerator interface so that&#10; it can report events generated inside.  </description>
  <author>Edward A. Lee and Shanna-Shaye Forbes</author>
  <version>$Id$</version>
  <since>Ptolemy II 8.0</since>
  <Pt.ProposedRating>Red (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (reviewmoderator)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="directorClass">A director class name. The default value and the list of&#10;  choices are obtained from the suggestedModalModelDirectors()&#10;  method of the executive director.  If there is no executive&#10;  director, then the default is &quot;ptolemy.domains.modal.kernel.FSMDirector&quot;.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="stateDependentCausality">Indicate whether input/output dependencies can depend on the&#10;  state. By default, this is false (the default), indicating that a conservative&#10;  dependency is provided by the causality interface. Specifically,&#10;  if there is a dependency in any state, then the causality interface&#10;  indicates that there is a dependency. If this is true, then a less&#10;  conservative dependency is provided, indicating a dependency only&#10;  if there can be one in the current state.  If this is true, then&#10;  upon any state transition, this actor issues a change request, which&#10;  forces causality analysis to be redone. Note that this can be expensive.</property>
</doc>
