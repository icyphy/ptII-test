<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="SequenceScheduler" class="ptolemy.domains.sequence.kernel.SequenceScheduler">
  <description>
The SequenceScheduler is responsible for creating and maintaining a&#10;schedule for the sequence models of computation.&#10;The scheduler accepts a list of elements from the director.&#10;&#10;This scheduler assembles three data structures that are used by SequenceSchedule:&#10;- A directed graph containing all actors scheduled by this scheduler&#10;- A hash table mapping each sequenced actor to an ordered list of dependent upstream actors&#10;- A control table, which identifies the sequenced actors that are dependent&#10;on other actors (for example, an If: Then (dependent actors) and :Else (dependent actors)&#10;-&#10;- Sequence numbers are reused within a composite actor.  So,&#10;- Things with a sequence number but not a process number should be&#10;treated as upstream actors&#10;(note for SequenceDirector and ProcessDirector)&#10;- When the boundary (port) of a class or module is reached, no further items&#10;inside that module are executed&#10;&#10; The base class for schedulers. A scheduler schedules the execution&#10; order of the containees of a CompositeActor.  &lt;p&gt;&#10;&#10; A SequenceScheduler is contained by a SequencedModelDirector, and provides&#10; the schedule for it.  The director will use this schedule to govern&#10; the execution of a CompositeActor. &lt;p&gt;&#10;&#10; A schedule is represented by the Schedule class, and determines the&#10; order of the firing of the actors in a particular composite actor.  In&#10; this base class, the default schedule fires the deeply&#10; contained actors in the order of their construction.  A domain specific&#10; scheduler will override this to provide a different order. &lt;p&gt;&#10;&#10; The schedule, once constructed, is cached and reused as long as the&#10; schedule is still valid.  The validity of the schedule is set by the&#10; setValid() method.  If the current schedule is not valid, then the&#10; schedule will be recomputed the next time the getSchedule() method is&#10; called.  However, derived classes will usually override only the&#10; protected _getSchedule() method. &lt;p&gt;&#10;&#10; The scheduler does not perform any mutations, and it does not listen&#10; for changes in the model.  Directors that use this scheduler should&#10; normally invalidate the schedule when mutations occur.  </description>
  <author>Elizabeth Latronico (Bosch), Thomas Mandl (Bosch), Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 10.0</since>
  <Pt.ProposedRating>Red (beth)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (beth)</Pt.AcceptedRating>
</doc>
