<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="SROptimizedScheduler" class="ptolemy.domains.sr.kernel.SROptimizedScheduler">
  <description>
A scheduler the Synchronous Reactive (SR) domain.  This scheduler returns&#10; a static schedule for the graph.  The schedule guarantees that the values will&#10; converge to a fixed-point.&#10; &lt;p&gt;&#10; The recursive scheduling algorithm is due to Stephen Edwards, and is&#10; described in his Ph.D. thesis.  First, a dependency graph is constructed, and&#10; the strongly connected components (SCC) are determined.  A schedule for each&#10; SCC is obtained by separating the sub-graph into a head and a tail, and then&#10; recursively applying this algorithm to both the head and the tail.  The&#10; schedule for the SCC is (&lt;i&gt;TH&lt;/i&gt;)&lt;super&gt;&lt;i&gt;n&lt;/i&gt;&lt;/super&gt;&lt;i&gt;T&lt;/i&gt; where&#10; &lt;i&gt;H&lt;/i&gt; and &lt;i&gt;T&lt;/i&gt; are the schedules of the head and tail, respectively, and&#10; &lt;i&gt;n&lt;/i&gt; is the number of nodes in the head and represents the number of&#10; repetitions of the parenthesized expression.  Finally, the schedules of the&#10; top-level SCCs are concatenated in topological order to obtain the schedule&#10; for the entire graph.&#10; &lt;p&gt;&#10; FIXME: This is not implemented!  This is a placeholder that uses the same&#10; naive scheduler as the base class.  </description>
  <author>Paul Whitaker</author>
  <version>$Id$</version>
  <since>Ptolemy II 2.0</since>
  <Pt.ProposedRating>Red (pwhitake)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (pwhitake)</Pt.AcceptedRating>
</doc>
