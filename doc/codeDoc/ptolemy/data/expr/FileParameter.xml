<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="FileParameter" class="ptolemy.data.expr.FileParameter">
  <description>
&lt;p&gt;This is an attribute that specifies a file or URL.  The value of this&#10; attribute, accessed by getExpression(), is a string that names a file&#10; or URL, possibly containing references to variables defined in scope&#10; using the syntax $ID, ${ID} or $(ID). The value returned by getToken()&#10; is the name of the file with such references resolved.&lt;/p&gt;&#10;&#10; &lt;p&gt;If this attribute contains a parameter named &lt;i&gt;allowFiles&lt;/i&gt; with&#10; value false, then when a file browser is used to select a file,&#10; that file browser will be set to not show files (only directories&#10; will be shown).  If this attribute contains a parameter named&#10; &lt;i&gt;allowDirectories&lt;/i&gt; with value true, then the file browser&#10; will permit the user to select directories (the default behavior&#10; is that when a directory is selected, that directory is opened&#10; and its contained files and directories are listed).&lt;/p&gt;&#10;&#10; &lt;p&gt;If the model containing this&#10; attribute has been saved to a MoML file, then the file name can be&#10; given relative to the directory containing that MoML file.&#10; If the model has not been saved to a file,&#10; then the classpath is used for identifying relative file names.&lt;/p&gt;&#10;&#10; &lt;p&gt;Files can be given relative to a &lt;i&gt;base&lt;/i&gt;, where the base is&#10; the URI of the first container above this one that has a URIAttribute.&#10; Normally, this URI specifies the file or URL containing the model&#10; definition. Thus, files that are referred to here can be kept in the&#10; same directory as the model, or in a related directory, and can&#10; moved together with the model.&lt;/p&gt;&#10;&#10;&#10; &lt;p&gt;The following special file names are understood:&lt;/p&gt;&#10; &lt;ul&gt;&#10; &lt;li&gt; System.in: Standard input.&#10; &lt;li&gt; System.out: Standard output.&#10; &lt;/ul&gt;&#10;&#10; &lt;p&gt; Note, however, that these file names cannot be converted to URLs&#10; using the asURL() method.&#10; A file name can also contain the following strings that start&#10; with &quot;$&quot;, which get substituted&#10; with the appropriate values.&lt;/p&gt;&#10; &lt;table&gt;&#10; &lt;caption&gt;Predefined values&lt;/caption&gt;&#10; &lt;tr&gt;&#10; &lt;th&gt;String&lt;/th&gt;&#10; &lt;th&gt;Description&lt;/th&gt;&#10; &lt;th&gt;Property&lt;/th&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$CWD&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The current working directory&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;user.dir&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$HOME&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The user's home directory&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;user.home&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$PTII&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The home directory of the Ptolemy II installation&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;ptolemy.ptII.dir&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$TMPDIR&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The temporary directory&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;java.io.tmpdir&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$USERNAME&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The user's account name&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;user.name&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;/table&gt;&#10; &lt;p&gt;The above properties are normally set when a Ptolemy II application starts.&lt;/p&gt;&#10; &lt;p&gt;&#10; If a file name begins with the reference &quot;$CLASSPATH&quot;, then when&#10; the file is opened for reading, the openForReading() method&#10; will search for the file relative to the classpath (using the&#10; getResource() method of the current class loader).  This will only&#10; work for a file that exists, and thus the openForWriting() method&#10; will not understand the &quot;$CLASSPATH&quot; string; this makes sense&#10; since the classpath typically has several directories, and it&#10; would not be obvious where to create the file.  The asURL()&#10; method also recognizes the &quot;$CLASSPATH&quot; string, but not the asFile()&#10; method (which is typically used when accessing a file for writing).&#10; NOTE: If the container of this parameter also contains a variable&#10; named CLASSPATH, then the value of that variable is used instead&#10; of the Java classpath.&lt;/p&gt;  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Green (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh)</Pt.AcceptedRating>
</doc>
