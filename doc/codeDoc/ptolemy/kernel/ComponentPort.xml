<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="ComponentPort" class="ptolemy.kernel.ComponentPort">
  <description>
A port supporting hierarchy. A component port can have &quot;inside&quot;&#10; links as well as the usual &quot;outside&quot; links supported by the base&#10; class. That is, while the basic port has only links to relations&#10; that are on the exterior of its containing entity, this port can have&#10; links to relations on the interior.&#10; An inside link is a link to a relation that is contained by the&#10; container of the port.&#10; &lt;p&gt;&#10; A ComponentPort may be transparent or opaque.  If it is transparent,&#10; then &quot;deep&quot; accesses of the topology see through the port.&#10; Methods that read the topology come in two versions, shallow and deep.&#10; The deep versions pass through transparent ports. This is&#10; done with a simple rule. If a transparent port is encountered from&#10; inside, then the traversal continues with its outside links. If it&#10; is encountered from outside, then the traversal continues with its&#10; inside links.  A ComponentPort is opaque if its container is opaque.&#10; (its isOpaque() method returns true).  Derived classes may use other&#10; strategies to specify whether a port is opaque.&#10; &lt;p&gt;&#10; Normally, links to a transparent port from the outside are to&#10; relations contained by the container of the container of the port.&#10; Links from the inside are to relations contained by the container&#10; of the port.  That is, levels of the hierarchy are not crossed.&#10; For a few applications, links that cross levels of the hierarchy&#10; are needed. The links in these connections are created&#10; using the liberalLink() method. The link() method&#10; prohibits such links, throwing an exception if they are attempted&#10; (most applications will prohibit level-crossing connections by using&#10; only the link() method).&#10; &lt;p&gt;&#10; A ComponentPort can link to any instance of ComponentRelation.&#10; An attempt to link to an instance of Relation will trigger an exception.&#10; Derived classes may wish to further constrain links to a subclass&#10; of ComponentRelation.  To do this, subclasses should override the&#10; protected methods _checkLink() and _checkLiberalLink() to throw an exception&#10; if their arguments are relations that are not of the appropriate&#10; subclass.  Similarly, a ComponentPort can only be contained by a&#10; ComponentEntity, and an attempt to set the container to an instance&#10; of Entity will trigger an exception.  If a subclass wishes to&#10; constrain the containers of the port to be of a subclass of&#10; ComponentEntity, they should override _checkContainer().  </description>
  <author>Edward A. Lee, Xiaojun Liu</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (bart)</Pt.AcceptedRating>
</doc>
