<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="FileAttribute" class="ptolemy.kernel.attributes.FileAttribute">
  <description>
This is an attribute that specifies a file or URL.  The value of this&#10; attribute, accessed by getExpression(), is a string that names a file&#10; or URL. If the model containing this attribute has been saved to a&#10; MoML file, then the file name can be given relative to the directory&#10; containing that MoML file.  If the model has not been saved to a file,&#10; then the classpath is used for identifying relative file names.&#10; &lt;p&gt;&#10; Files can be given relative to a &lt;i&gt;base&lt;/i&gt;, where the base is&#10; the URI of the first container above this one that has a URIAttribute.&#10; Normally, this URI specifies the file or URL containing the model&#10; definition. Thus, files that are referred to here can be kept in the&#10; same directory as the model, or in a related directory, and can&#10; moved together with the model.&#10; &lt;p&gt;&#10; The following special file names are understood:&#10; &lt;ul&gt;&#10; &lt;li&gt; System.in: Standard input.&#10; &lt;li&gt; System.out: Standard output.&#10; &lt;/ul&gt;&#10; Note, however, that these file names cannot be converted to URLs&#10; using the asURL() method.&#10; &lt;p&gt;&#10; A file name can also contain the following strings that start&#10; with &quot;$&quot;, which get substituted&#10; with the appropriate values&lt;/p&gt;&#10; &lt;table&gt;&#10;  &lt;caption&gt;Variables that are substituted.&lt;/caption&gt;&#10;  &lt;tr&gt;&#10;   &lt;th&gt;String&lt;/th&gt;&#10;   &lt;th&gt;Description&lt;/th&gt;&#10;   &lt;th&gt;Property&lt;/th&gt;&#10;  &lt;/tr&gt;&#10;  &lt;tr&gt;&#10;   &lt;td&gt;&lt;code&gt;$CWD&lt;/code&gt;&lt;/td&gt;&#10;   &lt;td&gt;The current working directory&lt;/td&gt;&#10;   &lt;td&gt;&lt;code&gt;user.dir&lt;/code&gt;&lt;/td&gt;&#10;  &lt;/tr&gt;&#10;  &lt;tr&gt;&#10;   &lt;td&gt;&lt;code&gt;$HOME&lt;/code&gt;&lt;/td&gt;&#10;   &lt;td&gt;The user's home directory&lt;/td&gt;&#10;   &lt;td&gt;&lt;code&gt;user.home&lt;/code&gt;&lt;/td&gt;&#10;  &lt;/tr&gt;&#10;  &lt;tr&gt;&#10;   &lt;td&gt;&lt;code&gt;$PTII&lt;/code&gt;&lt;/td&gt;&#10;   &lt;td&gt;The home directory of the Ptolemy II installation&lt;/td&gt;&#10;   &lt;td&gt;&lt;code&gt;ptolemy.ptII.dir&lt;/code&gt;&lt;/td&gt;&#10;  &lt;/tr&gt;&#10;  &lt;tr&gt;&#10;   &lt;td&gt;&lt;code&gt;$TMPDIR&lt;/code&gt;&lt;/td&gt;&#10;   &lt;td&gt;The temporary directory&lt;/td&gt;&#10;   &lt;td&gt;&lt;code&gt;java.io.tmpdir&lt;/code&gt;&lt;/td&gt;&#10;  &lt;/tr&gt;&#10; &lt;/table&gt;&#10; The above properties are normally set when a Ptolemy II application starts.&#10; &lt;p&gt;&#10; If a file name begins with the string &quot;$CLASSPATH&quot;, followed by either&#10; &quot;/&quot; or &quot;\&quot;, then when the file&#10; is opened for reading, the openForReading() method&#10; will search for the file relative to the classpath (using the&#10; getResource() method of the current class loader).  This will only&#10; work for a file that exists, and thus the openForWriting() method&#10; will not understand the &quot;$CLASSPATH&quot; string; this makes sense&#10; since the classpath typically has several directories, and it&#10; would not be obvious where to create the file.  The asURL()&#10; method also recognizes the &quot;$CLASSPATH&quot; string, but not the asFile()&#10; method (which is typically used when accessing a file for writing).&#10; &lt;p&gt;  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 3.0</since>
  <Pt.ProposedRating>Green (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh)</Pt.AcceptedRating>
</doc>
