<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CompositeEntity" class="ptolemy.kernel.CompositeEntity">
  <description>
A CompositeEntity is a cluster in a clustered graph.&#10; I.e., it is a non-atomic entity, in that&#10; it can contain other entities and relations.  It supports transparent ports,&#10; where, in effect, the port of a contained entity is represented by a port&#10; of this entity. Methods that &quot;deeply&quot; traverse the topology&#10; see right through transparent ports.&#10; It may be opaque, in which case its ports are opaque and methods&#10; that &quot;deeply&quot; traverse the topology do not see through them.&#10; For instance, deepEntityList() returns the opaque entities&#10; directly or indirectly contained by this entity.&#10; &lt;p&gt;&#10; To add an entity or relation to this composite, call its&#10; setContainer() method with this composite as an argument.  To&#10; remove it, call its setContainer() method with a null argument (or&#10; another container). The entity must be an instance of&#10; ComponentEntity and the relation of ComponentRelation or an&#10; exception is thrown.  Derived classes may further constrain these&#10; to subclasses.  To do that, they should override the protected&#10; methods _addEntity() and _addRelation() and the public member&#10; newRelation().&#10; &lt;p&gt;&#10; A CompositeEntity may be contained by another CompositeEntity.&#10; To set that up, call the setContainer() method of the inside entity.&#10; Derived classes may further constrain the container to be&#10; a subclass of CompositeEntity.  To do this, they should override&#10; setContainer() to throw an exception.  Recursive containment&#10; structures, where an entity directly or indirectly contains itself,&#10; are disallowed, and an exception is thrown on an attempt to set up&#10; such a structure.&#10; &lt;p&gt;&#10; A CompositeEntity can contain instances of ComponentPort.  By default&#10; these ports will be transparent, although subclasses of CompositeEntity&#10; can make them opaque by overriding the isOpaque() method to return&#10; &lt;i&gt;true&lt;/i&gt;. Derived classes may further constrain the ports to a&#10; subclass of ComponentPort.&#10; To do this, they should override the public method newPort() to create&#10; a port of the appropriate subclass, and the protected method _addPort()&#10; to throw an exception if its argument is a port that is not of the&#10; appropriate subclass.&#10; &lt;p&gt;&#10; Since contained entities implement the&#10; &lt;a href=&quot;../../ptolemy/kernel/util/Instantiable.xml&quot;&gt;ptolemy.kernel.util.Instantiable&lt;/a&gt; interface,&#10; some may be class definitions.  If an entity is a class definition,&#10; then it is not included in the lists returned by&#10; &lt;a href=&quot;../../ptolemy/kernel/CompositeEntity.html#entityList&quot;&gt;entityList()&lt;/a&gt;, &lt;a href=&quot;../../ptolemy/kernel/CompositeEntity.html#entityList&quot;&gt;entityList(Class)&lt;/a&gt;,&#10; &lt;a href=&quot;../../ptolemy/kernel/CompositeEntity.html#deepEntityList&quot;&gt;deepEntityList()&lt;/a&gt;, and &lt;a href=&quot;../../ptolemy/kernel/CompositeEntity.html#allAtomicEntityList&quot;&gt;allAtomicEntityList()&lt;/a&gt;.&#10; Correspondingly, if it is not a class definition, then it is not&#10; included in the list returned by &lt;a href=&quot;../../ptolemy/kernel/CompositeEntity.html#classDefinitionList&quot;&gt;classDefinitionList()&lt;/a&gt;.&#10; Contained class definitions are nonetheless required to have names&#10; distinct from contained entities that are not class definitions,&#10; and the method &lt;a href=&quot;../../ptolemy/kernel/CompositeEntity.html#getEntity&quot;&gt;getEntity(String)&lt;/a&gt; will return either&#10; a class definition or an entity that is not a class definition,&#10; as long as the name matches.  Note that contained entities that&#10; are class definitions cannot be connected to other entities.&#10; Moreover, they cannot be deleted as long as there are either&#10; subclasses or instances present.  </description>
  <author>John S. Davis II, Edward A. Lee, contributor: Christopher Brooks</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (hyzheng)</Pt.AcceptedRating>
</doc>
