<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="NonStrictTest" class="ptolemy.actor.lib.NonStrictTest">
  <description>
&lt;p&gt;This actor compares the inputs against the value specified by the&#10; &lt;i&gt;correctValues&lt;/i&gt; parameter.  That parameter is an ArrayToken,&#10; where each element of the array is of the same type as the input.&#10; On each firing where the input is present, the value of the input&#10; is compared against the next token in the &lt;i&gt;correctValues&lt;/i&gt;&#10; parameter.  If it matches, the firing succeeds. If it doesn't&#10; match, then an exception is thrown. After matching each of&#10; the value in the &lt;i&gt;correctValues&lt;/i&gt; parameter, subsequent iterations&#10; always succeed, so the actor can be used as a &quot;power-up&quot; test for a model,&#10; checking the first few iterations against some known results.&lt;/p&gt;&#10; &lt;p&gt;&#10; Unlike the Test actor, NonStrictTest does not support a multiport&#10; input, only single port inputs are supported.  This also differs&#10; from Test in that it ignores absent inputs, and it checks the inputs&#10; in the postfire() method rather than the fire() method.&lt;/p&gt;&#10; &lt;p&gt;&#10; This actor accepts any type of data on its input port, therefore it&#10; doesn't declare a type, but lets the type resolution algorithm find&#10; the least fixed point. If backward type inference is enabled, and&#10; no input type has been declared, the input is constrained to be&#10; equal to &lt;code&gt;BaseType.GENERAL&lt;/code&gt;. This will result in upstream&#10; ports resolving to the most general type rather than the most specific.&#10; &lt;/p&gt;&lt;p&gt;&#10;  If the input is a DoubleToken or ComplexToken, then the comparison&#10; passes if the value is close to what it should be, within the&#10; specified &lt;i&gt;tolerance&lt;/i&gt; (which defaults to 10&lt;sup&gt;-9&lt;/sup&gt;).&#10; During training, if a correct value is&#10; greater than 10 orders of magnitude than the tolerance, then the&#10; tolerance is changed to a value 9 orders of magnitude less than&#10; the correct value.  This helps avoid comparisons beyond the&#10; precision of a Java double.&lt;/p&gt;&#10; &lt;p&gt;&#10; If the parameter &lt;i&gt;trainingMode&lt;/i&gt; is &lt;i&gt;true&lt;/i&gt;, then instead&#10; of performing the test, this actor collects the inputs into the&#10; &lt;i&gt;correctValues&lt;/i&gt; parameter.  Thus, to use this actor, you can&#10; place it in a model, set &lt;i&gt;trainingMode&lt;/i&gt; to &lt;i&gt;true&lt;/i&gt; to&#10; collect the reference data, then set &lt;i&gt;trainingMode&lt;/i&gt; to&#10; &lt;i&gt;false&lt;/i&gt;.  Any subsequent run of the actor will throw an&#10; exception if the input data does not match the training data.&#10; The value of the reference token is set in the wrapup() method.&#10; The &lt;i&gt;trainingMode&lt;/i&gt; parameter is a shared parameter,&#10; meaning that if you change it for any one instance of this&#10; actor in the model, then it will be changed for all instances.&lt;/p&gt;  </description>
  <author>Paul Whitaker, Christopher Hylands, Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 2.0</since>
  <Pt.ProposedRating>Yellow (cxh)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="correctValues">A matrix specifying what the input should be.&#10;  This defaults to a one-by-one array containing a boolean true.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="tolerance">A double specifying how close the input has to be to the value&#10;  given by &lt;i&gt;correctValues&lt;/i&gt;.  This is a DoubleToken, with default&#10;  value 10&lt;sup&gt;-9&lt;/sup&gt;.  During training, if a correct value is&#10;  greater than 10 orders of magnitude than the tolerance, then the&#10;  tolerance is changed to a value 9 orders of magnitude less than&#10;  the correct value.  This helps avoid comparisons beyond the&#10;  precision of a Java double.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="requireAllCorrectValues">If true, and the number of tokens seen in wrapup() is not&#10;  equal to or greater than the number of elements in the&#10;  &lt;i&gt;correctValues&lt;/i&gt; array, then throw an exception.  The&#10;  default value is true. This parameter is a shared parameter,&#10;  meaning that changing it for any one instance in a model will&#10;  change it for all instances in the model.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="requireOrderedValues">If true, then require that inputs appear in the order&#10;  recorded in the correctValues parameter.  If false, then&#10;  the inputs can appear in any order.  The default value&#10;  is true.</property>
    <!--ptolemy.actor.parameters.SharedParameter-->
    <property name="trainingMode">If true, then do not check inputs, but rather collect them into&#10;  the &lt;i&gt;correctValues&lt;/i&gt; array.  This parameter is a boolean,&#10;  and it defaults to false. It is a shared parameter, meaning&#10;  that changing it for any one instance in a model will change&#10;  it for all instances in the model.</property>
</doc>
