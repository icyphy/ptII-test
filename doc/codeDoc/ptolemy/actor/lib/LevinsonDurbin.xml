<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="LevinsonDurbin" class="ptolemy.actor.lib.LevinsonDurbin">
  <description>
This actor uses the Levinson-Durbin algorithm to compute the linear&#10; predictor coefficients of a random process, given its autocorrelation&#10; function as an input.&#10;&#10; &lt;p&gt;These coefficients are produced both in&#10; tapped delay line form (on the &lt;i&gt;linearPredictor&lt;/i&gt; output) and in&#10; lattice filter form (on the &lt;i&gt;reflectionCoefficients&lt;/i&gt; output).&#10; The &lt;i&gt;order&lt;/i&gt; of the predictor (the number of &lt;i&gt;linearPredictor&lt;/i&gt;&#10; and coefficients &lt;i&gt;reflectionCoefficients&lt;/i&gt; produced) is the&#10; number of lags of the supplied autocorrelation.&#10; The &lt;i&gt;errorPower&lt;/i&gt; output is the power of the prediction error&#10; as a function of the predictor order.&#10; The inputs and outputs are all arrays of doubles.&lt;/p&gt;&#10;&#10; &lt;p&gt;The autocorrelation estimates provided as inputs can be generated&#10; by the Autocorrelation actor. It the Autocorrelation actor is set&#10; so that its &lt;i&gt;biased&lt;/i&gt; parameter is true, then the combined&#10; effect of that actor and this one is called the autocorrelation&#10; method. The &lt;i&gt;order&lt;/i&gt; of the predictor is the value of the&#10; &lt;i&gt;numberOfLags&lt;/i&gt; parameter of the Autocorrelation actor.&#10; If the length of the autocorrelation input is odd, then it is assumed&#10; to be a symmetric autocorrelation function, and the &lt;i&gt;order&lt;/i&gt; of the&#10; predictor calculated by this actor is (length + 1)/2.  Otherwise,&#10; the &lt;i&gt;order&lt;/i&gt; is 1 + (length/2), which assumes that discarding the last&#10; sample of the autocorrelation would make it symmetric.&lt;/p&gt;&#10; &lt;p&gt;&#10; Three output signals are generated by this actor. On the&#10; &lt;i&gt;errorPower&lt;/i&gt; output port, an array of length &lt;i&gt;order&lt;/i&gt; + 1&#10; gives the prediction error power for each predictor order from zero&#10; to &lt;i&gt;order&lt;/i&gt;. The first value in this array, which corresponds&#10; to the zeroth-order predictor, is simply the zero-th lag of the&#10; input autocorrelation, which is the power of the random process&#10; with that autocorrelation. Note that for signals without noise&#10; whose autocorrelations are estimated by the Autocorrelation actor,&#10; the &lt;i&gt;errorPower&lt;/i&gt; output can get small. If it gets close&#10; to zero, or goes negative, this actor fixes it at zero.&#10; &quot;Close to&quot; is determined by the close() method of the&#10; ptolemy.math.SignalProcessing class.&lt;/p&gt;&#10; &lt;p&gt;&#10; The &lt;i&gt;linearPredictor&lt;/i&gt; output gives the coefficients of an&#10; FIR filter that performs linear prediction for the random process.&#10; This set of coefficients is suitable for directly feeding a&#10; VariableFIR actor, which accepts outside coefficients.&#10; The number of coefficients produced is equal to the &lt;i&gt;order&lt;/i&gt;.&#10; The predictor coefficients produced by this actor can be&#10; used to create a maximum-entropy spectral estimate of the input&#10; to the Autocorrelation actor.  They can also be used for&#10; linear-predictive coding, and any number of other applications.&lt;/p&gt;&#10; &lt;p&gt;&#10; The &lt;i&gt;reflectionCoefficients&lt;/i&gt; output is the reflection&#10; coefficients, suitable for feeding directly to a VariableLattice&#10; actor, which will then generate the forward and backward prediction error.&#10; The number of coefficients produced is equal to the &lt;i&gt;order&lt;/i&gt;.&lt;/p&gt;&#10; &lt;p&gt;&#10; Note that the definition of reflection coefficients is not quite&#10; universal in the literature. The reflection coefficients in&#10; reference [2] is the negative of the ones generated by this actor,&#10; which correspond to the definition in most other texts,&#10; and to the definition of partial-correlation (PARCOR)&#10; coefficients in the statistics literature.&lt;/p&gt;&#10; &lt;p&gt;&lt;b&gt;References&lt;/b&gt;&lt;/p&gt;&#10; &lt;p&gt;[1]&#10; J. Makhoul, &quot;Linear Prediction: A Tutorial Review&quot;,&#10; &lt;i&gt;Proc. IEEE&lt;/i&gt;, vol. 63, pp. 561-580, Apr. 1975.&lt;/p&gt;&#10; &lt;p&gt;[2]&#10; S. M. Kay, &lt;i&gt;Modern Spectral Estimation: Theory &amp;amp; Application&lt;/i&gt;,&#10; Prentice-Hall, Englewood Cliffs, NJ, 1988.&lt;/p&gt;  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 1.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="autocorrelation">The autocorrelation input, which is an array.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="errorPower">The output for the error power, as a function of the predictor&#10;  order.  This produces an array.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="linearPredictor">The output for linear predictor coefficients.&#10;  This produces an array.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="reflectionCoefficients">The output for lattice filter coefficients for a prediction&#10;  error filter.  This produces an array.</port>
</doc>
