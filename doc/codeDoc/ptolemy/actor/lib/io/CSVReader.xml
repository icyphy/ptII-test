<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CSVReader" class="ptolemy.actor.lib.io.CSVReader">
  <description>
&lt;p&gt;&#10; This actor reads a file or URL, one line at a time, and outputs each line&#10; except the first as a record. The first line of the file gives&#10; the names of the fields of the output records.&#10; The remaining lines give the values of the fields.&#10; The output is an ordered&#10; record token, which means that the order defined in the&#10; first line is preserved.&#10; &lt;/p&gt;&lt;p&gt;&#10; &lt;b&gt;NOTE:&lt;/b&gt; By default, this actor imposes no type constraints&#10; on its output. To use it in a model, you must either enable&#10; backward type inference (a parameter at the top level of the model),&#10; or explicitly declare the output type (by selecting Configure-Ports&#10; in the context menu). If you use backward type inference, then the&#10; constraints are inferred from how you use the output. For example,&#10; if you extract a record field of a particular type, then the output&#10; will be constrained to be a record that contains that field.&#10; If you declare output types specifically, then every line read&#10; from the file must conform.&#10; For example, if you set the output the type&#10; constraint to &quot;[x = int, y = double]&quot; then the output will be an&#10; ordered record where the first field is named &quot;x&quot; and has type int,&#10; and the second field is named &quot;y&quot; and has type double.&#10; If any line in the file violates this typing, then an exception&#10; will be thrown.&#10; &lt;/p&gt;&lt;p&gt;&#10; If any line has more values than&#10; the first line, then the trailing values will be ignored.&#10; If any line has fewer values than the first line, then the&#10; field values will be an empty string.&#10; &lt;/p&gt;&lt;p&gt;&#10; By default, the separator between field names and values is a comma,&#10; so the file format is the standard CSV (comma-separated value) format.&#10; The &lt;i&gt;separator&lt;/i&gt; parameter enables changing the separator to&#10; tabs or semicolons.&#10; &lt;/p&gt;&lt;p&gt;&#10; The file or URL is specified using any form acceptable&#10; to FileParameter.&#10; &lt;/p&gt;&lt;p&gt;&#10; Before an end of file is reached, the &lt;i&gt;endOfFile&lt;/i&gt;&#10; output produces &lt;i&gt;false&lt;/i&gt;.  In the iteration where the last line&#10; of the file is read and produced on the &lt;i&gt;output&lt;/i&gt; port, this actor&#10; produces &lt;i&gt;true&lt;/i&gt; on the &lt;i&gt;endOfFile&lt;/i&gt; port. In that iteration,&#10; postfire() returns false.  If the actor is iterated again, after the end&#10; of file, then prefire() and postfire() will both return false, &lt;i&gt;output&lt;/i&gt;&#10; will produce the string &quot;EOF&quot;, and &lt;i&gt;endOfFile&lt;/i&gt; will produce &lt;i&gt;true&lt;/i&gt;.&#10; &lt;/p&gt;&lt;p&gt;&#10; In some domains (such as SDF), returning false in postfire()&#10; causes the model to cease executing.&#10; In other domains (such as DE), this causes the director to avoid&#10; further firings of this actor.  So usually, the actor will not be&#10; invoked again after the end of file is reached.&#10; &lt;/p&gt;&lt;p&gt;&#10; This actor reads ahead in the file so that it can produce an output&#10; &lt;i&gt;true&lt;/i&gt; on &lt;i&gt;endOfFile&lt;/i&gt; in the same iteration where it outputs&#10; the last line.  It reads the first two lines in preinitialize(), and&#10; subsequently reads a new line in each invocation of postfire(). The&#10; data type of the output is also set in preinitialize(), after reading&#10; the first line, which defines the structure of the record.&#10; line read is produced on the &lt;i&gt;output&lt;/i&gt; in the next iteration&#10; after it is read.&#10; &lt;/p&gt;  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 10.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="separator">A specification of the separator between items in the table.&#10;  The default is &quot;comma&quot;, which results in assuming that fields&#10;  are separated by commas. If the value is changed to &quot;tab&quot;, then&#10;  a tab separator will be used. If the value is &quot;semicolon&quot;, then&#10;  a semicolon separator will be used. If the value is anything&#10;  else, then the value of the parameter, whatever it is, will&#10;  be the separator.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="trimSpaces">If true, then trim spaces around each field name and value.&#10;  This is a boolean that defaults to true. If you change it&#10;  to false, then all spaces in the field names and values are&#10;  preserved. Note that if there are spaces in the field names,&#10;  then the value of the record cannot be read by the&#10;  expression evaluator, so spaces in field names are not&#10;  recommended.</property>
</doc>
