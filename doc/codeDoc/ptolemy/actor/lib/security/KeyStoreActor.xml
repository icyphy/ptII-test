<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="KeyStoreActor" class="ptolemy.actor.lib.security.KeyStoreActor">
  <description>
A baseclass for actors that read or write keystores.&#10;&#10; &lt;p&gt;Keystores are ways to manage keys and certificates.  A keystore file can&#10; be created by using the &lt;code&gt;keytool&lt;/code&gt; executable that comes with Java,&#10; or, if the &lt;i&gt;createFileOrURLIfNecessary&lt;/i&gt; parameter is true,&#10; then a keystore will be created for you.&#10;&#10; To create a simple keystore by hand that contains a private key and&#10; a public key signed with a self signed certificate, run:&#10; &lt;pre&gt;&#10; cd $PTII&#10; make ptKeystore&#10; &lt;/pre&gt;&#10; which will create a keystore with a store password&#10; of &lt;code&gt;this.is.the.storePassword,change.it&lt;/code&gt;&#10; and key password of&#10; of &lt;code&gt;this.is.the.keyPassword,change.it&lt;/code&gt;.&#10;&#10; &lt;br&gt;The alias of the certificate will be &lt;code&gt;claudius&lt;/code&gt;&#10;&#10; &lt;p&gt;A keystore may have at most one type, which describes the format&#10; of the keystore.  If a keyStore file exists, then the &lt;i&gt;keyStoreType&lt;/i&gt;&#10; parameter is set to the type of the preexisting keyStore.  Changing&#10; the &lt;i&gt;keyStoreType&lt;/i&gt; of a preexisting keystore to a different type&#10; is likely to throw an exception when the keyStore is opened.&#10; If a keyStore file does not exist, then when it is created it will&#10; be created with the type from the &lt;i&gt;keyStoreType&lt;/i&gt; parameter.&#10; &lt;p&gt;The &lt;code&gt;keytool&lt;/code&gt; creates keystores that have a type of&#10; &quot;JKS&quot;.  To view the keystore type, run&#10; &lt;code&gt;keytool -keystore &lt;i&gt;keystoreFile&lt;/i&gt;-list&lt;/code&gt;.&#10;&#10; &lt;p&gt;The &lt;a href=&quot;../../../../ptolemy/actor/lib/security/SecretKey.xml&quot;&gt;ptolemy.actor.lib.security.SecretKey&lt;/a&gt; actor outputs a&#10; key that must read in with a keystore type of &quot;JCEKS&quot;, so if this&#10; actor is being used with a SecretKey actor, then the type should be&#10; set to &quot;JCEKS&quot;.&#10;&#10; &lt;p&gt;See &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#in_browser&quot;&gt;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html&lt;/a&gt; for possible values.&lt;/p&gt;&#10;&#10; &lt;p&gt;Derived classes should add input or output ports as necessary.&#10; Derived classes should call _loadKeyStore() so that _keyStore is properly&#10; initialized before accessing _keyStore themselves.&#10;&#10; &lt;h3&gt;How to exchange data securely with a remote part&lt;/h3&gt;&#10; &lt;a href=&quot;http://download.oracle.com/javase/tutorial/security/toolfilex/index.html&quot; target=&quot;_top&quot;&gt;http://download.oracle.com/javase/tutorial/security/toolfilex/index.html&lt;/a&gt;&#10; discusses how to exchange files using signatures, keytool&#10; and jarsigner.  In Ptolemy II, we use actors derived from&#10; the KeyStoreActor.&#10;&#10; &lt;h4&gt;Steps for the Sender&lt;/h4&gt;&#10; &lt;ol&gt;&#10; &lt;li&gt;Generate keys using keytool, which is included&#10; in the JDK&#10; &lt;pre&gt;&#10; keytool -genkey -alias claudius -keystore $PTII/ptKeystore -keypass myKeyPassword -storepass myStorePassword&#10; &lt;/pre&gt;&#10; You will be prompted for information about yourself.&#10; &lt;li&gt;Optional: Generate a Certificate Signing Request (CSR), send&#10; it to your vendor and import the response.  Since we&#10; are using a self signed certificate, this step is option.&#10; &lt;li&gt; Export the certificate&#10; &lt;pre&gt;&#10; keytool -alias claudius -export -keystore $PTII/ptKeystore -keypass myKeyPassword -storepass myStorePassword -file claudius.cer -rfc&#10; &lt;/pre&gt;&#10; &lt;li&gt; Send the output file (claudius.cer) to the recipient&#10; &lt;li&gt;Create a Ptolemy model that uses the&#10; &lt;a href=&quot;../../../../ptolemy/actor/lib/security/PrivateKeyReader.xml&quot;&gt;ptolemy.actor.lib.security.PrivateKeyReader&lt;/a&gt; actor&#10; to read $PTII/ptKeystore with the appropriate passwords&#10; and sign your data.&#10; See the left side of $PTII/ptolemy/actor/lib/security/test/auto/Signature.xml&#10; for an example model.&#10;&#10; &lt;/ol&gt;&#10; &lt;h4&gt;Steps for the Receiver&lt;/h4&gt;&#10; &lt;ol&gt;&#10; &lt;li&gt;Receive the public key from the sender and import it&#10; into your keystore&#10; &lt;pre&gt;&#10; cxh@cooley 91% keytool -import -alias claudius -keystore $PTII/receivedKeystore -file claudius.cer&#10; Enter keystore password:  foobar&#10; Owner: CN=Claudius Ptolemaus, OU=Your Project, O=Your University, L=Your Town, ST=Your State, C=US&#10; Issuer: CN=Claudius Ptolemaus, OU=Your Project, O=Your University, L=Your Town, ST=Your State, C=US&#10; Serial number: 3fa9b2c5&#10; Valid from: Wed Nov 05 18:32:37 PST 2003 until: Tue Feb 03 18:32:37 PST 2004&#10; Certificate fingerprints:&#10; MD5:  D7:43:A0:C0:39:49:A8:80:69:EA:11:91:17:CE:E5:E3&#10; SHA1: C1:3B:9A:92:35:4F:7F:A5:23:AB:57:28:D6:67:ED:43:AB:EA:A9:2B&#10; Trust this certificate? [no]:  yes&#10; Certificate was added to keystore&#10; cxh@cooley 92%&#10; &lt;/pre&gt;&#10;&#10; &lt;li&gt;Verify the signature by calling up the sender and comparing the&#10; fingerprints on the phone.  The send can view the fingerprints with&#10; &lt;pre&gt;&#10; cxh@cooley 93% keytool -printcert -file claudius.cer&#10; Owner: CN=Claudius Ptolemaus, OU=Your Project, O=Your University, L=Your Town, ST=Your State, C=US&#10; Issuer: CN=Claudius Ptolemaus, OU=Your Project, O=Your University, L=Your Town, ST=Your State, C=US&#10; Serial number: 3fa9b2c5&#10; Valid from: Wed Nov 05 18:32:37 PST 2003 until: Tue Feb 03 18:32:37 PST 2004&#10; Certificate fingerprints:&#10; MD5:  D7:43:A0:C0:39:49:A8:80:69:EA:11:91:17:CE:E5:E3&#10; SHA1: C1:3B:9A:92:35:4F:7F:A5:23:AB:57:28:D6:67:ED:43:AB:EA:A9:2B&#10; cxh@cooley 94%&#10; &lt;/pre&gt;&#10; If the Certificate fingerprints match, then the file has not been&#10; modified in transit.&#10; &lt;li&gt; The receiver should then create a model that uses the&#10; &lt;a href=&quot;../../../../ptolemy/actor/lib/security/PublicKeyReader.xml&quot;&gt;ptolemy.actor.lib.security.PublicKeyReader&lt;/a&gt; actor with&#10; the appropriate passwords.&#10; See the right side of $PTII/ptolemy/actor/lib/security/test/auto/Signature.xml&#10; for an example model.&#10;&#10; &lt;/ol&gt;&#10;&#10; &lt;p&gt;For more information about keystores, see&#10; &lt;a href=&quot;http://download.oracle.com/javase/6/docs/technotes/guides/security/SecurityToolsSummary.html&quot; target=&quot;_top&quot;&gt;Security Tools Summary&lt;/a&gt;.  </description>
  <author>Christopher Hylands Brooks</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Yellow (cxh)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="alias">The alias of the certificate that we are looking for.&#10;  The default alias is the String &quot;ptolemy&quot;</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="createFileOrURLIfNecessary">If true, then create the keystore named by &lt;i&gt;fileOrURL&lt;/i&gt;&#10;  if the &lt;i&gt;fileOrURL&lt;/i&gt; does not exist.&#10;  The default value is true.</property>
    <!--ptolemy.data.expr.FileParameter-->
    <property name="fileOrURL">The file name or URL from which to read.  This is a string with&#10;  any form accepted by FileParameter.&#10;  The initial default is &quot;$PTII/ptKeystore&quot;.  To create the&#10;  initial default keystore, run &quot;cd $PTII; make ptKeystore&quot;&#10;  or set the &lt;i&gt;createFileOrURLIfNecessary&lt;/i&gt; to true.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="keyStoreType">The type of the keystore.  See&#10;  &lt;a href=&quot;http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyStore&quot; target=&quot;_top&quot;&gt;  Java Cryptography Architecture API Specification &amp;amp; Reference&lt;/a&gt;&#10;  for information about keystore types.&#10;  The initial value is the string returned by&#10;  java.security.KeyStore.getDefaultType().&#10;&#10;  &lt;p&gt;Note that secret keys generated by the&#10;  &lt;a href=&quot;../../../../ptolemy/actor/lib/security/SecretKey.xml&quot;&gt;ptolemy.actor.lib.security.SecretKey&lt;/a&gt; actor should be saved in a keystore of type&#10;  &quot;JCEKS&quot;.</property>
    <!--ptolemy.actor.parameters.PortParameter-->
    <property name="keyPassword">The password to the Key.&#10;  The default password is &quot;this.is.the.keyPassword,change.it&quot;.&#10;  If the port is left unconnected, then the parameter value will be used.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="provider">Specify a provider for the given algorithm.&#10;  The default value is &quot;SystemDefault&quot; which allows the&#10;  system to choose the provider based on the JCE architecture.</property>
    <!--ptolemy.actor.parameters.PortParameter-->
    <property name="storePassword">The password to the KeyStore.&#10;  The default password is &quot;this.is.the.storePassword,change.it&quot;.&#10;  If the port is left unconnected, then the parameter value will be used.</property>
</doc>
