<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CipherActor" class="ptolemy.actor.lib.security.CipherActor">
  <description>
A base class for actors that encrypt and decrypt data.&#10;&#10; &lt;p&gt;Cipher actors are any actors which perform encryption or&#10; decryption based on the Java Cryptography Extension (JCE).&#10; See the&#10; &lt;a href=&quot;../../../../ptolemy/actor/lib/security/CryptographyActor.xml&quot;&gt;ptolemy.actor.lib.security.CryptographyActor&lt;/a&gt; documentation for&#10; resources about JCA and JCE.&lt;/p&gt;&#10;&#10; &lt;p&gt; Actors extending this class take in an unsigned byte array at the&#10; &lt;i&gt;input&lt;/i&gt;, process the data based on the &lt;i&gt;algorithm&lt;/i&gt; parameter&#10; and send a unsigned byte array to the &lt;i&gt;output&lt;/i&gt;.  The algorithms&#10; that may be implemented are limited to those that are implemented&#10; by &quot;providers&quot; following the JCE specifications and installed in the&#10; machine being run. The mode and padding of the algorithm can also be&#10; specified in the &lt;i&gt;mode&lt;/i&gt; and &lt;i&gt;padding&lt;/i&gt; parameters.&#10; In case a provider specific instance of an algorithm is needed,&#10; the provider may also be specified in the &lt;i&gt;provider&lt;/i&gt; parameter.&#10; The &lt;i&gt;keySize&lt;/i&gt; parameter allows implementations of algorithms&#10; using various key sizes.&lt;/p&gt;&#10;&#10; &lt;p&gt;Concrete actors derived from this base class must implement the&#10; &lt;a href=&quot;../../../../ptolemy/actor/lib/security/CryptographyActor.html#_process&quot;&gt;_process(byte[])&lt;/a&gt; method.&#10; The initialize() method of this actor sets _cipher to the&#10; value of javax.crypt.Cipher.getInstance() with an argument that is&#10; created from the values of the &lt;i&gt;algorithm&lt;/i&gt;, &lt;i&gt;padding&lt;/i&gt; and&#10; &lt;i&gt;keySize&lt;/i&gt; parameters. Derived classes should call _cipher.init()&#10; with the value of the key in their fire() method.  The_process() method&#10; in a derived class usually calls _cipher.doFinal().&lt;/p&gt;  </description>
  <author>Christopher Hylands Brooks, Contributor: Rakesh Reddy</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Green (cxh)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="mode">The mode component when the Cipher is instantiated.&#10;  Algorithms can be run in several different modes.&#10;  The mode is specified as a string.&#10;  Names for modes and modes implemented vary based on the provider.&#10;  Possible values include&#10; &lt;dl&gt;&#10; &lt;dt&gt; (&lt;i&gt;The empty string&lt;/i&gt;)&lt;/dt&gt;&#10; &lt;dd&gt;Use the default setting for the algorithm.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;No mode, meaning that the algorithm does not use a mode.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;CBC&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;Cipher Block Chaining Mode, as defined in FIPS PUB 81.&#10; CBC is usually the mode that is used.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;CFB&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;Cipher Feedback Mode, as defined in FIPS PUB 81.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;ECB&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;Electronic Codebook Mode, as defined in: The National&#10; Institute of Standards and Technology (NIST) Federal&#10; Information Processing Standard (FIPS) PUB 81, &quot;DES Modes of&#10; Operation,&quot; U.S. Department of Commerce, Dec 1980.&#10; ECM is best for encrypting small pieces of data.  If possible,&#10; use CBC instead.&lt;/dd&gt;&#10; &lt;dt&gt;&lt;code&gt;OFB&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;Output Feedback Mode, as defined in FIPS PUB 81.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;PCBC&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;Propagating Cipher Block Chaining, as defined by Kerberos V4.&lt;/dd&gt;&#10; &lt;/dl&gt;&#10;&#10;  &lt;p&gt;The initial default is the empty string, which indicates that&#10;  the default setting for the algorithm should be used.&lt;/p&gt;&#10;&#10;  &lt;p&gt;&#10;  See the&#10;  &lt;a href=&quot;http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher&quot; target=&quot;_top&quot;&gt;Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;&#10;  for details.&lt;/p&gt;</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="padding">The padding scheme used by the cipher during encryption.&#10;  In cryptography, padding is used to handle situations where the input&#10;  data must be an exact multiple of the block size for the algorithm&#10;  &lt;a href=&quot;http://www.di-mgt.com.au/cryptopad.html#whennopadding&quot; target=&quot;_top&quot;&gt;http://www.di-mgt.com.au/cryptopad.html#whennopadding&lt;/a&gt; says:&#10;  &lt;blockquote&gt;&#10;  Block cipher algorithms like DES and Blowfish in Electronic Code Book&#10;  (ECB) and Cipher Block Chaining (CBC) mode require their input to be&#10;  an exact multiple of the block size. If the plaintext to be encrypted&#10;  is not an exact multiple, you need to pad before encrypting by adding&#10;  a padding string. When decrypting, the receiving party needs to know&#10;  how to remove the padding, if any.&#10;  &lt;/blockquote&gt;&#10;&#10;  &lt;p&gt;The padding is specified as a string.  Names for parameter&#10;  and parameters implemented vary based on the provider.&#10;  Possible values include&lt;/p&gt;&#10;&#10; &lt;dl&gt;&#10; &lt;dt&gt; (&lt;i&gt;The empty string&lt;/i&gt;)&lt;/dt&gt;&#10; &lt;dd&gt;Use the default setting for the algorithm.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;NoPadding&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;No padding (do not use padding).&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt; OAEPWith&lt;i&gt;digest&lt;/i&gt;And&lt;i&gt;mgf&lt;/i&gt;Padding&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;Optimal Asymmetric Encryption Padding scheme defined in&#10; PKCS #1, where &lt;i&gt;digest&lt;/i&gt; should be replaced by the message&#10; digest and &lt;i&gt;mgf&lt;/i&gt; by the mask generation function. Example:&#10; OAEPWithMD5AndMGF1Padding.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;PKCS5Padding&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;The padding scheme described in: RSA Laboratories, &quot;PKCS&#10; #5: Password-Based Encryption Standard,&quot; version 1.5, November&#10; 1993.&lt;/dd&gt;&#10;&#10; &lt;dt&gt;&lt;code&gt;SSL3Padding&lt;/code&gt;&lt;/dt&gt;&#10; &lt;dd&gt;The padding scheme defined in the SSL Protocol Version 3.0,&#10; November 18, 1996, section 5.2.3.2 (CBC block cipher):&lt;/dd&gt;&#10; &lt;/dl&gt;&#10;&#10;  &lt;p&gt;The initial default is the empty string, which indicates that&#10;  the no padding should be used.&lt;/p&gt;&#10;  &lt;p&gt;&#10;  See the&#10;  &lt;a href=&quot;http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher&quot; target=&quot;_top&quot;&gt;Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;&#10;  for details.&lt;/p&gt;</property>
</doc>
