<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CryptographyActor" class="ptolemy.actor.lib.security.CryptographyActor">
  <description>
A base class for cryptographic actors.&#10;&#10; &lt;p&gt;Cryptographic actors are actors that perform encryption or decryption or&#10; generate signatures of data.&#10;&#10; &lt;p&gt;Actors extending this class take in an unsigned byte array at the&#10; &lt;i&gt;input&lt;/i&gt;, process the data based on the &lt;i&gt;algorithm&lt;/i&gt; parameter&#10; and send an unsigned byte array to the &lt;i&gt;output&lt;/i&gt;.  The algorithms&#10; that maybe implemented are limited those that are implemented by&#10; &quot;providers&quot; following the Java Cryptography Extension (JCE)&#10; specifications and installed on the machine being run.&#10; If a provider specific instance of an algorithm is&#10; needed, the provider may be specified in the &lt;i&gt;provider&lt;/i&gt;&#10; parameter. The &lt;i&gt;keySize&lt;/i&gt; also allows implementations of&#10; algorithms using various key sizes.&#10;&#10; &lt;p&gt;Concrete actors derived from this base class must include a&#10; &lt;a href=&quot;../../../../ptolemy/actor/lib/security/CryptographyActor.html#_process&quot;&gt;_process(byte[])&lt;/a&gt; method that processes the data appropriately.&#10; The _process() method is called by CryptographyActor.fire().&#10; This class takes care of basic initialization of the &lt;i&gt;algorithm&lt;/i&gt;&#10; and &lt;i&gt;provider&lt;/i&gt; parameters for use by the subclasses.&#10;&#10; &lt;p&gt;This actor relies on the Java Cryptography Architecture (JCA) and Java&#10; Cryptography Extension (JCE).&#10;&#10; &lt;br&gt;Information about JCA can be found at&#10; &lt;a href=&quot;http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#in_browser&quot; target=&quot;_top&quot;&gt;http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html&lt;/a&gt;.&#10; &lt;br&gt;Information about JCE can be found at&#10; &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html&quot; target=&quot;_top&quot;&gt;http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html&lt;/a&gt;.&#10;&#10; &lt;br&gt;The Java security tutorial can be found at&#10; &lt;a href=&quot;http://download.oracle.com/javase/tutorial/security/index.html&quot; target=&quot;_top&quot;&gt;http://download.oracle.com/javase/tutorial/security/index.html&lt;/a&gt;  </description>
  <author>Christopher Hylands Brooks, Contributor: Rakesh Reddy</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Green (cxh)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="input">The input port. The type of this port is unsigned byte array.&#10;  Data is read in on this port, processed by the _process() method&#10;  during fire() and passed to the &lt;i&gt;output&lt;/i&gt; port.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="output">The output port.  The type of this port is unsigned byte array.&#10;  This port sends out the processed data received from the &lt;i&gt;input&lt;/i&gt;&#10;  port.</port>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="algorithm">Specify the algorithm to be used to process data.&#10;  The algorithm is specified as a string. The algorithms are&#10;  limited to those implemented by providers using the Java JCE&#10;  which are found on the Java virtual machine. The initial&#10;  default is the first value returned by&#10;  java.security.Security.getAlgorithms();</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="keySize">Specify the size of the key to be created.&#10;  The key size is an integer value representing the number of bits in&#10;  the key.  The initial default depends on the algorithm that is&#10;  selected, not all algorithms use &lt;i&gt;keySize&lt;/i&gt;.&#10;  In addition, only certain keySizes may work with certain&#10;  algorithms, see the documentation for the algorithm you are using.&#10;  &lt;p&gt;DSA is the most common algorithm that uses &lt;i&gt;keySize&lt;/i&gt;, the Sun&#10;  documentation says:&#10;  &quot;The length, in bits, of the modulus p. This must range from&#10;  512 to 1024, and must be a multiple of 64. The default keysize&#10;  is 1024.&quot;&#10;  Refer to&#10;  &lt;a href=&quot;http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#spectemp&quot; target=&quot;_top&quot;&gt;&lt;code&gt;http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#spectemp&lt;/code&gt;&lt;/a&gt;&#10;  for a list of possible key sizes for certain algorithms.&#10;  The initial default is 1024.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="provider">Specify a provider for the given algorithm.&#10;  The default value is &quot;SystemDefault&quot; which allows the&#10;  system to choose the provider based on the JCE architecture.</property>
</doc>
