<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="TokenToExpression" class="ptolemy.actor.lib.conversions.TokenToExpression">
  <description>
This actor reads a token from the input port and outputs a string token&#10; whose value is an expression that can be parsed to yield the input token.&#10; For example, if the input is itself a string token, the output will be a&#10; new string token whose value is the value of the input string token surrounded&#10; by double quotation marks. The input data type is undeclared, so this actor&#10; can accept any input. If the input known to be absent, this actor outputs&#10; a string &quot;absent&quot;.&lt;p&gt;&#10; This actor accepts any type of data on its input port, therefore it&#10; doesn't declare a type, but lets the type resolution algorithm find&#10; the least fixed point. If backward type inference is enabled, and&#10; no input type has been declared, the input is constrained to be&#10; equal to &lt;code&gt;BaseType.GENERAL&lt;/code&gt;. This will result in upstream&#10; ports resolving to the most general type rather than the most specific.&#10; &lt;/p&gt;  </description>
  <author>Steve Neuendorffer, Haiyang Zheng</author>
  <version>$Id$</version>
  <since>Ptolemy II 2.1</since>
  <Pt.ProposedRating>Yellow (neuendor)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (liuj)</Pt.AcceptedRating>
</doc>
