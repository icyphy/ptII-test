<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Exec" class="ptolemy.actor.lib.Exec">
  <description>
Execute a command as a separately running subprocess.&#10;&#10; &lt;p&gt;This actor uses java.lang.Runtime.exec() to invoke a subprocess&#10; named by the &lt;i&gt;command&lt;/i&gt; parameter in a specified &lt;i&gt;directory&lt;/i&gt; with a&#10; specified  &lt;i&gt;environment&lt;/i&gt;.  Data from the &lt;i&gt;input&lt;/i&gt; port (if any) is&#10; passed to the input of the subprocess.  The subprocess is run until it&#10; exits and then contents of the output and error streams of the&#10; subprocess (if any) are passed to the &lt;i&gt;output&lt;/i&gt; and &lt;i&gt;error&lt;/i&gt;&#10; ports.&lt;/p&gt;&#10;&#10; &lt;p&gt;If the subprocess generates no data on the output or error stream,&#10; then the data on the corresponding port(s) will consist of the empty&#10; string.&lt;/p&gt;&#10;&#10; &lt;p&gt; To get the effect of executing a command provided in a shell interpreter, set the&#10; &lt;i&gt;prependPlatformDependentShellCommand&lt;/i&gt; parameter to true.&#10; This will prepend a default platform-dependent shell command to the command&#10; you wish to execute so that your command is executed within the shell.&#10; Alternatively, you can set &lt;i&gt;command&lt;/i&gt; to &quot;cmd&quot; (Windows) or &quot;sh&quot; (Windows with Cygwin&#10; or Linux), and then provide commands at the &lt;i&gt;input&lt;/i&gt; port.&#10; In this case, however, your model will only work on platforms that have the shell&#10; command you have specified.&#10; Note that in this case each command must be terminated with a newline.&#10; For example, to open a model in vergil and run it, you can&#10; set &lt;i&gt;command&lt;/i&gt; to &quot;sh&quot; and use a Const actor to provide&#10; on the &lt;i&gt;input&lt;/i&gt; port the string:&lt;/p&gt;&#10; &lt;pre&gt;&#10; &quot;vergil -run model.xml\n exit\n&quot;&#10; &lt;/pre&gt;&#10;&#10; &lt;p&gt;A much more interesting actor could be written using a&#10; Kahn Process Network.  This actor would generate output asynchronously&#10; as the process was executing.&lt;/p&gt;&#10;&#10; &lt;p&gt;For information about Runtime.exec(), see:&#10; &lt;br&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/jw-12-2007/jw-1229-traps.html&quot; target=&quot;_top&quot;&gt;http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html&lt;/a&gt;&#10; and&#10; &lt;a href=&quot;http://mindprod.com/jgloss/exec.html&quot; target=&quot;_top&quot;&gt;http://mindprod.com/jgloss/exec.html&lt;/a&gt;.&#10; &lt;/p&gt;  </description>
  <author>Christopher Hylands Brooks, Contributors: Edward A. Lee, Daniel Crawl</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Yellow (cxh) 2/5/04</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh) 2/24/04</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="error">Data that is generated by the subprocess on its standard&#10;  error.  While the process is running, any error data generated&#10;  by the subprocess is stored until the subprocess exits and&#10;  then the stored error data is sent to the &lt;i&gt;error&lt;/i&gt; port.&#10;  If the subprocess generates no data on standard error, then&#10;  the empty string (a string of length zero) is generated.&#10;  This port is an output port of type String.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="exitCode">The exit code of the subprocess. Usually, a non-zero exit code&#10;  indicate that the subprocess had a problem.  This port is an output&#10;  port of type int.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="input">Strings to pass to the standard input of the subprocess.&#10;  Note that a newline is not appended to the string.  If you&#10;  require a newline, add one using the AddSubtract actor.&#10;  This port is an input port of type String.</port>
    <!--ptolemy.actor.parameters.PortParameter-->
    <property name="command">The command to be executed.  The command is parsed by&#10; &lt;a href=&quot;../../../ptolemy/util/StringUtilities.html#tokenizeForExec&quot;&gt;tokenizeForExec(String)&lt;/a&gt;&#10; into tokens and then executed as a separate subprocess.&#10; The initial default value is the string&#10; &lt;code&gt;echo &quot;Hello, world.&quot;&lt;/code&gt;.&#10;&#10; &lt;p&gt;The command parameter is read only once during fire().&#10; If you want to spawn another different command,&#10; use life cycle management actors such RunCompositeActor.&lt;/p&gt;</property>
    <!--ptolemy.data.expr.FileParameter-->
    <property name="directory">The directory in which to execute the command.&#10;  This parameter is read each time the subprocess is started&#10;  in fire(). Once the subprocess is running, this parameter is not&#10;  read again until fire() is called again.&#10;&#10;  &lt;p&gt;The initial default value of this parameter $CWD, which&#10;  corresponds with the value of the Java virtual machine&#10;  user.dir property which is the user's current working&#10;  directory.  Note that if we are running inside a menu launched&#10;  application, then ptolemy.actor.gui.jnlp.MenuApplication will&#10;  change user.dir to be the value of user.home, which is the&#10;  name of the user's home directory.&lt;/p&gt;&#10;&#10;  &lt;p&gt;If the value of this parameter is the empty string,&#10;  then the working directory of the subprocess with be&#10;  inherited from the working directory of the parent&#10;  process.  Typically, this is the value of the&#10;  user.dir property.&lt;/p&gt;</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="environment">The environment in which to execute the command.&#10;  This parameter is read each time the subprocess is started&#10;  in fire(). Once the subprocess is running, this parameter is not&#10;  read again until fire() is called again.&#10;&#10;  &lt;p&gt;This parameter is an array of records that name an environment&#10;  variable and the value for the value.  The format is:&lt;/p&gt;&#10;  &lt;pre&gt;&#10;  {{name = &quot;&lt;i&gt;NAME1&lt;/i&gt;&quot;, value = &quot;&lt;i&gt;value1&lt;/i&gt;&quot;}...}&#10;  &lt;/pre&gt;&#10;  Where &lt;code&gt;&lt;i&gt;NAME1&lt;/i&gt;&lt;/code&gt; is the name of the environment&#10;  variable, and &lt;code&gt;&lt;i&gt;value1&lt;/i&gt;&lt;/code&gt; is the value.&#10;  &lt;p&gt;For example &lt;code&gt;{{name = &quot;PTII&quot;, value = &quot;c:/ptII&quot;}}&lt;/code&gt;&#10;  would set the value of the &lt;code&gt;PTII&lt;/code&gt; to &lt;code&gt;c:/ptII&lt;/code&gt;.&lt;/p&gt;&#10;&#10;  &lt;p&gt;If the initial value of the parameter is &lt;code&gt;{{name=&quot;&quot;,&#10;  value = &quot;&quot;}}&lt;/code&gt;, then the environment from the calling or parent&#10;  process is used in the new command.&lt;/p&gt;&#10;&#10;  &lt;p&gt;Note that if this parameter sets any environment variable,&#10;  then under Windows the other environment variables in the calling&#10;  or parent process might not be passed to the subprocess.  This&#10;  behaviour could be platform or JVM dependent. When in doubt,&#10;  try setting the &lt;i&gt;command&lt;/i&gt; value to &quot;env&quot; to print out the&#10;  environment.&lt;/p&gt;</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="ignoreIOExceptionReadErrors">If true, ignore IOException errors from the subprocess.&#10;  The initial default value is false, indicating that&#10;  read errors are not ignored.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="prependPlatformDependentShellCommand">If true, then prepend the platform dependent shell command&#10;  to the parsed value of the command parameter.&#10;  By setting this argument to true, it is possible to invoke&#10;  commands in a platform neutral method.&#10;  &lt;p&gt;Under Windows NT or XP, the arguments &quot;cmd.exe&quot; and &quot;/C&quot;&#10;  are prepended.  Under Windows 95, the arguments &quot;command.com&quot;&#10;  and &quot;/C&quot; are prepended.  Under all other platforms, the&#10;  arguments &quot;/bin/sh&quot; and &quot;-c&quot; are prepended.&#10;  &lt;p&gt;By prepending sh or cmd, then this actor can use the&#10;  file redirection operations.&#10;  &lt;p&gt;The default value of this parameter is a boolean of value&#10;  false, which allows the user to arbitrarily invoke /bin/sh&#10;  scripts on all platforms.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="throwExceptionOnNonZeroReturn">If true, then throw an exception if the subprocess returns&#10;  non-zero.&#10;  The default is a boolean of value true.&#10;  This parameter is ignored if &lt;i&gt;waitForProcess&lt;/i&gt; is false.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="waitForProcess">If true, then actor will wait until subprocess completes. The&#10;  default is a boolean of value true.</property>
</doc>
