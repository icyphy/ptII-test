<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="FMUImport" class="ptolemy.actor.lib.fmi.FMUImport">
  <description>
Invoke a Functional Mock-up Interface (FMI) Functional Mock-up Unit (FMU).&#10;&#10; &lt;p&gt;&#10; Read in a &lt;code&gt;.fmu&lt;/code&gt; file named by the &lt;i&gt;fmuFile&lt;/i&gt; parameter. The&#10; &lt;code&gt;.fmu&lt;/code&gt; file is a zipped file that contains a file named&#10; &lt;code&gt;modelDescription.xml&lt;/code&gt; that describes the ports and parameters&#10; that are created. At run time, method calls are made to C functions that are&#10; included in shared libraries included in the &lt;code&gt;.fmu&lt;/code&gt; file.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt;&#10; To use this actor from within Vergil, use File -&amp;gt; Import -&amp;gt; Import FMU,&#10; which will prompt for a .fmu file. This actor is &lt;b&gt;not&lt;/b&gt; available from&#10; the actor pane via drag and drop. The problem is that dragging and dropping&#10; this actor ends up trying to read fmuImport.fmu, which does not exist. If we&#10; added such a file, then dragging and dropping the actor would create an&#10; arbitrary actor with arbitrary ports.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt;&#10; FMI documentation may be found at &lt;a&#10; href=&quot;http://www.modelisar.com/fmi.html&quot;&gt;&#10; http://www.modelisar.com/fmi.html&lt;/a&gt;.&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; Under the Continuous director, this actor invokes fmiDoStep() at the&#10; beginning of the fire() method whenever time has advanced since the last&#10; invocation of the fire() method. If at this point the FMU discards the step,&#10; then the fire method will nonetheless produce outputs, but they may not be&#10; valid for the current time. This should not matter because the Continuous&#10; director will call &lt;a href=&quot;../../../../ptolemy/actor/lib/fmi/FMUImport.html#isStepSizeAccurate&quot;&gt;isStepSizeAccurate()&lt;/a&gt;, which will return false,&#10; and it will revert to the last committed and proceed with a smaller step&#10; size. Under the Continuous director, when time is advanced, this actor will&#10; be fired several times. The first firing will be at the beginning of the time&#10; interval, which matches the last commit time of the last postfire()&#10; invocation. The remaining firings will be at times greater than the last&#10; commit time. These firings are all speculative, in that any actor may reject&#10; the step size when they occur. In the event that a step is rejected, the&#10; Continuous director will call &lt;a href=&quot;../../../../ptolemy/actor/lib/fmi/FMUImport.html#rollBackToCommittedState&quot;&gt;rollBackToCommittedState()&lt;/a&gt;. If the FMU&#10; supports it, then this method will use fmiSetFMUstate() to restore the state&#10; to the state of the FMU at the time of the last postfire() (or initialize(),&#10; if postfire() has not yet been invoked).&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; &lt;b&gt;If the FMU does not support rolling back (indicated by the&#10; canGetAndSetFMUstate element in the XML file), then this actor assumes that&#10; the FMU is stateless and hence can be rolled back without any particular&#10; action.&lt;/b&gt; This may not be a good assumption, so it issues a warning.&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; Many tools that export FMUs fail to correctly declare when outputs do not&#10; depend on inputs. For this reason, this actor provides each output port with&#10; a &quot;dependencies&quot; parameter. If this parameter is left blank, then the&#10; dependencies are determined by the FMU's modelDescription.xml file.&#10; Otherwise, if this parameter contains a space-separated list of names of&#10; input ports, then the output port depends directly on those named input&#10; ports. If this parameter contains the string &quot;none&quot;, then the output port&#10; depends directly on none of the input ports. If contains the string &quot;all&quot;,&#10; then this output port depends on all input ports. Although the FMI standard&#10; is ambiguous, we infer dependency to mean that the value of an output at time&#10; &lt;i&gt;t&lt;/i&gt; depends on the input at time &lt;i&gt;t&lt;/i&gt;. It is irrelevant whether it&#10; depends on the input at earlier times.&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; Note that if the display name of a port is set, display name is used in as&#10; the name of the FMU scalar variable instead of the port name. This is useful&#10; in case FMU scalar variable names contain a period, because periods are not&#10; allowed in port names.&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; Note that if you use an instance of this class with the ContinuousDirector,&#10; you should in general use model exchange, not cosimulation. This is because&#10; the ContinuousDirector may advance time by calling fmiDoStep, and then later&#10; reject a step size. The only exception is that if the FMU implements rollback&#10; (via fmiGetFMUState and fmiSetFMUState), then it can be used with the&#10; ContinuousDirector.  </description>
  <author>Christopher Brooks, Michael Wetter, Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 10.0</since>
  <Pt.ProposedRating>Red (cxh)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="fmiVersion">The FMI version of the FMU. This is a string that defaults to &quot;1.0&quot; if&#10; the FMU file does not specify a version, and otherwise is the version&#10; specified in the file.</property>
    <!--ptolemy.data.expr.FileParameter-->
    <property name="fmuFile">The Functional Mock-up Unit (FMU) file. The FMU file is a zip file that&#10; contains a file named &quot;modelDescription.xml&quot; and any necessary shared&#10; libraries. The file is read when this actor is instantiated or when the&#10; file name changes. The initial default value is &quot;fmuImport.fmu&quot;.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="modelExchange">If true, then this FMU is for model exchange rather than co-simulation.&#10; This is a boolean that defaults to false. The value of this parameter&#10; gets determined when FMU is imported. This parameter is set to expert&#10; mode because normally a user should not be allowed to change it.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="removeDirectDependency">If true, then this, then the dependency of all inputs&#10; on outputs are removed. This is particularly useful for FMI 1.0&#10; which do not declare any input/output dependency forcing to add&#10; microstep delays to the system even when not needed.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="stateVariablesAsInputPorts">If true, then this FMU has state variables that are visible as&#10; Ptolemy input ports.  This is a boolean that defaults to&#10; true. Importing an FMU for use with QSS would set this to&#10; parameter to false, which indicates that the state variables&#10; are output ports.  This parameter is set to expert mode because&#10; normally a user should not be allowed to change it.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="persistentInputs">If true, then previously received input values will be re-used on&#10; subsequent firings where inputs are absent. If there are no previously&#10; received input values, then the value used will be whatever default the&#10; FMU has for the corresponding input variable. If false (the default),&#10; then an exception will be thrown if an input is absent on any firing.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="suppressWarnings">If true, suppress warnings about the FMU not being able to roll back. It&#10; is reasonable to set this to true if you know that the FMU can be&#10; executed at an earlier time than it was previously executed. This is&#10; safe, for example, if the FMU is stateless. This is a boolean that&#10; defaults to false.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="useRawJNI">If true, then use raw JNI instead of using JNA, which in turn&#10; uses JNI.  Raw JNI is faster than JNA, but raw JNI only&#10; supports FMI-2.0 Model Exchange and Real values.  The default&#10; value is false, meaning that JNA is used.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="visible">If true, indicate to the FMU (if it supports it) that it is allowed to&#10; create displays and otherwise interact with the user. This is a boolean&#10; that defaults to false.</property>
</doc>
