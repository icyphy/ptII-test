<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="ModelReference" class="ptolemy.actor.lib.hoc.ModelReference">
  <description>
This is an atomic actor that can execute a model specified by&#10; a file or URL. This can be used to define an actor whose firing behavior&#10; is given by a complete execution of another model.&#10; &lt;p&gt;&#10; An instance of this actor can have ports added to it.  If it has&#10; input ports, then on each firing, before executing the referenced&#10; model, this actor will read an input token from the input port, if&#10; there is one, and use it to set the value of a top-level parameter&#10; in the referenced model that has the same name as the port, if there&#10; is one. The simplest way to ensure that there is a matching parameter&#10; is to use a PortParameter for inputs.  However, this actor will work&#10; also for ordinary ports. In this case, if there is a top-level&#10; parameter of the referenced model with the same name as the port, and&#10; it is an instance of Variable (or its derived class Parameter), then&#10; the token read at the input is moved into it using its setToken() method.&#10; Otherwise, if it is an instance of Settable, then a string representation&#10; of the token is copied using the setExpression() method.&#10; Input ports should not be multiports, and if they are, then&#10; all but the first channel will be ignored.&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; If this actor has output ports and the referenced model is executed,&#10; then upon completion of that execution, this actor looks for top-level&#10; parameters in the referenced model whose names match those of the output&#10; ports. If there are such parameters, then the final value of those&#10; parameters is sent to the output ports. If such a parameter is an&#10; instance of Variable (or its derived class Parameter), then its&#10; contained token is sent to the output. Otherwise, if it is an&#10; instance of Settable, then a string token is produced on the output&#10; with its value equal to that returned by getExpression() of the&#10; Settable.  If the model is executed in the calling thread, then&#10; the outputs will be produced before the fire() method returns.&#10; If the model is executed in a new thread, then the outputs will&#10; be produced whenever that thread completes execution of the model.&#10; Output ports should not be multiports. If they are, then all but&#10; the first channel will be ignored.&#10; Normally, when you create output ports for this actor, you will have&#10; to manually set the type.  There is no type inference from the&#10; parameter of the referenced model.&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; A typical use of this actor will use the SetVariable actor&#10; inside to define the value of the output port.&#10; &lt;/p&gt;&#10; &lt;p&gt;&#10; A suite of parameters is provided to control what happens when this&#10; actor executes:&lt;/p&gt;&#10; &lt;ul&gt;&#10; &lt;li&gt; &lt;i&gt;executionOnFiring&lt;/i&gt;:&#10; The value of this string attribute determines what execution&#10; happens when the fire() method is invoked.  The recognized&#10; values are:&#10; &lt;ul&gt;&#10; &lt;li&gt; &quot;run in calling thread&quot; (the default) &lt;/li&gt;&#10; &lt;li&gt; &quot;run in a new thread&quot; &lt;/li&gt;&#10; &lt;li&gt; &quot;do nothing&quot;. &lt;/li&gt;&#10; &lt;/ul&gt;&#10; If execution in a separate thread is selected, then the execution can&#10; optionally be stopped by the postfire() method (see below). If the model&#10; is still executing the next time fire() is called on this actor, then&#10; the fire() method will wait for completion of the first execution.&#10; If an exception occurs during a run in another thread, then it will&#10; be reported at the next invocation of fire(), postfire(), or wrapup().&#10; Note that if you select &quot;run in a new thread&quot; and this actor has&#10; output ports, the data is produced to those output ports when&#10; the execution completes, whenever that might be.  This may make&#10; output ports difficult to use in some domains.&#10; &lt;/li&gt;&#10; &lt;li&gt; &lt;i&gt;lingerTime&lt;/i&gt;:&#10; The amount of time (in milliseconds) to linger in the fire()&#10; method of this actor.  This is a long that defaults to 0L.&#10; If the model is run in the calling thread, then the linger&#10; occurs after the run is complete. If the model is run in a&#10; new thread, then the linger occurs after the run starts,&#10; and the run is stopped after the linger time expires.&#10; This can be used, for example, to run a model for a specified&#10; amount of time, then ask it to finish() and continue.&#10; &lt;/li&gt;&#10; &lt;li&gt; &lt;i&gt;modelFileOrURL&lt;/i&gt;:&#10; The file name or URL of the model that this actor will execute.&#10; This can be specified either by setting the parameter or by&#10; providing a string at the input port.&#10; &lt;/li&gt;&#10; &lt;li&gt; &lt;i&gt;postfireAction&lt;/i&gt;:&#10; The value of this string attribute determines what happens&#10; in the postfire() method.  The recognized values are:&#10; &lt;ul&gt;&#10; &lt;li&gt; &quot;do nothing&quot; (the default) &lt;/li&gt;&#10; &lt;li&gt; &quot;stop executing&quot; &lt;/li&gt;&#10; &lt;/ul&gt;&#10; The &quot;stop executing&quot; choices will only have an effect if&#10; if &lt;i&gt;executionOnFiring&lt;/i&gt; is set to &quot;run in a new thread&quot;.&#10; This can be used, for example, to run a model for a specified&#10; amount of time, and then stop it.&#10; &lt;/li&gt;&#10; &lt;/ul&gt;&#10;&#10; &lt;p&gt;&#10; There are currently some limitations:&#10; &lt;/p&gt;&#10; &lt;ul&gt;&#10; &lt;li&gt;&#10; The referenced model cannot create any displays. Use the subclass&#10; VisualModelReference to do that.&#10; &lt;/li&gt;&#10; &lt;li&gt;&#10; FIXME: Pausing the referring model doesn't pause the referenced model.&#10; &lt;/li&gt;&#10; &lt;li&gt;&#10; FIXME: Need options for error handling.&#10; &lt;/li&gt;&#10; &lt;/ul&gt;  </description>
  <author>Edward A. Lee, Elaine Cheong</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (eal)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="executionOnFiring">The value of this string parameter determines what execution&#10;  happens when the fire() method is invoked.  The recognized&#10;  values are:&#10;  &lt;ul&gt;&#10;  &lt;li&gt; &quot;run in calling thread&quot; (the default) &lt;/li&gt;&#10;  &lt;li&gt; &quot;run in a new thread&quot; &lt;/li&gt;&#10;  &lt;li&gt; &quot;do nothing&quot;. &lt;/li&gt;&#10;  &lt;/ul&gt;</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="lingerTime">The amount of time (in milliseconds) to linger in the fire()&#10;  method of this actor.  This is a long that defaults to 0L.&#10;  If the model is run, then the linger occurs after the run&#10;  is complete (if the run occurs in the calling thread) or&#10;  after the run starts (if the run occurs in a separate thread).</property>
    <!--ptolemy.actor.parameters.FilePortParameter-->
    <property name="modelFileOrURL">The file name or URL of the model that this actor represents.&#10;  This is empty by default, which means that there is no&#10;  associated model to execute.</property>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="postfireAction">The value of this string attribute determines what happens&#10;  in the postfire() method.  The recognized values are:&#10;  &lt;ul&gt;&#10;  &lt;li&gt; &quot;do nothing&quot; (the default) &lt;/li&gt;&#10;  &lt;li&gt; &quot;stop executing&quot; &lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  The &quot;stop executing&quot; choices will only have an effect if&#10;  if &lt;i&gt;executionOnFiring&lt;/i&gt; is set to &quot;run in a new thread&quot;.&#10;  This can be used, for example, to run a model for a specified&#10;  amount of time, and then stop it.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="spawnSeparateModels">If true, then on each firing, create a new instance of&#10;  the model given by &lt;i&gt;modelFileOrURL&lt;/i&gt;. If false&#10;  (the default), then re-use the same model.</property>
</doc>
