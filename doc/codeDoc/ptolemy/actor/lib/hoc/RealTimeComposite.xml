<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="RealTimeComposite" class="ptolemy.actor.lib.hoc.RealTimeComposite">
  <description>
This is a container for another actor that fires that other actor&#10; at real times corresponding to the input time stamps. Its&#10; ports are those of the contained actor. Given one or more events&#10; with time stamp &lt;i&gt;t&lt;/i&gt; at the input ports, it queues the events&#10; to provide to a firing of the contained actor that is deferred to&#10; occur when real time (since start of execution, in seconds) exceeds&#10; or matches &lt;i&gt;t&lt;/i&gt;.  If real time already exceeds &lt;i&gt;t&lt;/i&gt;, then the firing&#10; may occur immediately.&#10; &lt;p&gt;&#10; In addition to the parameters of the contained actor, this actor&#10; has a &lt;i&gt;delay&lt;/i&gt; parameter. The value of this parameter is&#10; the minimum delay (in model time) between an input event and&#10; an output event that results from that input event.&#10; If the enclosed actor produces no output, or if the time&#10; of the outputs can be arbitrarily whatever current time&#10; is in the model when they are produced, then &lt;i&gt;delay&lt;/i&gt;&#10; should be set to &lt;i&gt;UNDEFINED&lt;/i&gt;. This is the default value.&#10; With this value, the enclosed actor is&#10; executed in a separate thread.&#10; If the firing produces output events, then those are given time&#10; stamps equal to the greater of the current model time of the&#10; enclosing model and the current real time at which the outputs&#10; are produced (in seconds since the start of execution). In&#10; this case, the enclosed actor&#10; does not regulate in any way the passage of time of the&#10; enclosing model, so the time stamps of the enclosing model&#10; could get arbitrarily far ahead of real time.&#10; &lt;p&gt;&#10; If the value of &lt;i&gt;delay&lt;/i&gt; is 0.0 (zero), then the inside&#10; model is run in the same thread as the enclosing model.&#10; When this RealTimeComposite fires, the fire() method stalls&#10; until real time matches the current time of the model, and&#10; then invokes the enclosed model. If the enclosed model produces&#10; any outputs, then those outputs have time stamps equal to the&#10; time stamps of the input. Hence, from the perspective of DE&#10; semantics, this actor has zero delay, even though it can&#10; introduce real-time delay (which is indistinguishable from&#10; just taking a long time to evaluate the fire() method).&#10; Note that with &lt;i&gt;delay&lt;/i&gt; = 0.0, this actor affects the&#10; model in way similar to the &lt;i&gt;synchronizeToRealTime&lt;/i&gt;&#10; parameter of the director, except that only the events&#10; provided to this actor are synchronized to real time, rather&#10; than all events.&#10; &lt;p&gt;&#10; If the value of &lt;i&gt;delay&lt;/i&gt; is positive, then the inside&#10; model is run in a separate thread, just as if the value&#10; were UNDEFINED, but in this case, this actor does&#10; regulate the passage of time of the enclosing model.&#10; In particular, given an event with time stamp &lt;i&gt;t&lt;/i&gt;&#10; it prevents model time from advancing past &lt;i&gt;t&lt;/i&gt;&#10; + &lt;i&gt;delay&lt;/i&gt; until the firing triggered by the event&#10; has completed (which will be at some real time greater&#10; than &lt;i&gt;t&lt;/i&gt;). Any outputs produced by that firing are&#10; assigned time stamps equal to the greater of &lt;i&gt;t&lt;/i&gt;&#10; + &lt;i&gt;delay&lt;/i&gt; and the current real time at which the&#10; output is produced.&#10; &lt;p&gt;&#10; For various reasons, this actor is tricky to use. The most natural&#10; domain to use it in is DE, providing it with input events with time&#10; stamps that specify when to perform some action, such as an actuator&#10; or display action. However, if the DE system is an open-loop system,&#10; then model time of the DE system can get very far ahead of the&#10; RealTimeComposite. It is helpful to use a feedback loop including&#10; this RealTimeComposite to keep the DE model from getting ahead,&#10; and to use the &lt;i&gt;delay&lt;/i&gt; parameter judiciously as explained&#10; above.&#10; &lt;p&gt;&#10; This actor may also be used in SDF and SR if the &lt;i&gt;period&lt;/i&gt; parameter&#10; of the director is set to something greater than zero.&#10; This actor consumes its inputs and schedules execution in&#10; its postfire() method, and hence in SR will behave as a strict&#10; actor (all inputs must be known for anything to happen).&#10; &lt;p&gt;&#10; FIXME: For actors that are triggered by internal calls to fireAt(),&#10; it seems that the delay needs to be no larger than the smallest&#10; increment between calls to fireAt(). Is this correct?  Why?&#10; &lt;p&gt;&#10; FIXME: If there is a PortParameter, the parameter gets updated when the&#10; fire() method of this composite is invoked, which creates a nondeterminate&#10; interaction with the deferred execution. See CompositeActor.fire().  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 6.1</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (neuendor)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="delay">The maximum model-time delay between the input events and the&#10;  output events. This is a double that defaults to &lt;i&gt;UNDEFINED&lt;/i&gt;.</property>
</doc>
