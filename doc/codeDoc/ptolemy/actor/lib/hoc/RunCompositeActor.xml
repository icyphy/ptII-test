<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="RunCompositeActor" class="ptolemy.actor.lib.hoc.RunCompositeActor">
  <description>
This is a composite actor that can execute the contained model&#10; completely, as if it were a top-level model, on each firing.&#10; This can be used to define an actor whose firing behavior&#10; is given by a complete execution of a submodel.&#10; &lt;p&gt;&#10; An instance of this actor can have ports added to it.  If it has&#10; input ports, then on each firing, before executing the referenced&#10; model, this actor will read an input token from the input port, if&#10; there is one, and use it to set the value of a top-level parameter&#10; in the contained model that has the same name as the port, if there&#10; is one.  The simplest way to ensure that there is a matching parameter&#10; is to use a PortParameter for inputs.  However, this actor will work&#10; also for ordinary ports. In this case, if this actor has a&#10; parameter with the same name as the port, and it is an instance&#10; of Variable (or its derived class Parameter), then the token&#10; read at the input is moved into it using its setToken() method.&#10; Otherwise, if it is an instance of Settable, then a string representation&#10; of the token is copied using the setExpression() method.&#10; Input ports should not be multiports, and if they are, then&#10; all but the first channel will be ignored.&#10; &lt;p&gt;&#10; If this actor has output ports and the contained model is executed,&#10; then upon completion of that execution, if this actor has parameters&#10; whose names match those of the output ports, then the final value of&#10; those parameters is sent to the output ports. If such a parameter is an&#10; instance of Variable (or its derived class Parameter), then its&#10; contained token is sent to the output token. Otherwise, if it is an&#10; instance of Settable, then a string token is produced on the output&#10; with its value equal to that returned by getExpression() of the&#10; Settable. Output ports should not be multiports. If they are,&#10; then all but the first channel will be ignored.&#10; A typical use of this actor will use the SetVariable actor&#10; inside to define the value of the output port.&#10; &lt;p&gt;&#10; In preinitialize(), type constraints are set up so that input&#10; and output ports with (name) matching parameters are constrained&#10; to have compatible types. Note that if the ports or parameters&#10; are changed during execution, then it will be necessary to set&#10; up matching type constraints by hand.  Since this isn't possible&#10; to do from Vergil, the ports and parameters of this actor&#10; should not be changed using Vergil during execution.&#10; &lt;p&gt;&#10; This actor also overrides the requestChange() method and the&#10; executeChangeRequests() method to execute the given change. It does not&#10; delegate the change request to the container, but executes the request&#10; immediately or records it, depending on whether setDeferringChangeRequests()&#10; has been called with a true argument.  </description>
  <author>Edward A. Lee, Yang Zhao, Elaine Cheong</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (eal)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="firingCountLimit">Indicator to run the contained model a limited number of times.&#10;  If this parameter has a value greater than zero, then after&#10;  executing the inside model the specified number of times,&#10;  &lt;a href=&quot;../../../../ptolemy/actor/lib/hoc/RunCompositeActor.html#postfire&quot;&gt;postfire()&lt;/a&gt; will return false. This is an int that&#10;  defaults to 0, which means that there is no limit.</property>
</doc>
