<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="MultiInstanceComposite" class="ptolemy.actor.lib.hoc.MultiInstanceComposite">
  <description>
A &lt;a href=&quot;../../../../ptolemy/actor/TypedCompositeActor.xml&quot;&gt;ptolemy.actor.TypedCompositeActor&lt;/a&gt; that creates multiple&#10; instances of itself during the preinitialize phase of model execution.&lt;p&gt;&#10;&#10; A MultiInstanceComposite actor may be used to instantiate &lt;a href=&quot;../../../../ptolemy/actor/lib/hoc/MultiInstanceComposite.xml#nInstances&quot;&gt;nInstances&lt;/a&gt; identical processing blocks within a model. This actor&#10; (the &quot;master&quot;) creates &lt;a href=&quot;../../../../ptolemy/actor/lib/hoc/MultiInstanceComposite.xml#nInstances&quot;&gt;nInstances&lt;/a&gt;&amp;nbsp;-&amp;nbsp;1 additional&#10; instances (clones) of itself during the &lt;a href=&quot;../../../../ptolemy/actor/lib/hoc/MultiInstanceComposite.html#preinitialize&quot;&gt;preinitialize()&lt;/a&gt; phase&#10; of model execution and destroys these additional instances during model&#10; &lt;a href=&quot;../../../../ptolemy/actor/lib/hoc/MultiInstanceComposite.html#wrapup&quot;&gt;wrapup()&lt;/a&gt;. MultiInstanceComposite &lt;em&gt;must be opaque&lt;/em&gt; (have&#10; a director), so that its Actor interface methods (preinitialize(), ...,&#10; wrapup()) are invoked during model initialization. Each instance may&#10; refer to its &lt;a href=&quot;../../../../ptolemy/actor/lib/hoc/MultiInstanceComposite.xml#instance&quot;&gt;instance&lt;/a&gt; [0..&lt;a href=&quot;../../../../ptolemy/actor/lib/hoc/MultiInstanceComposite.xml#nInstances&quot;&gt;nInstances&lt;/a&gt;-1] parameter&#10; which is set automatically by the master if it needs to know its&#10; instance number.&lt;p&gt;&#10;&#10; MultiInstanceComposite &lt;em&gt;input&lt;/em&gt; ports must not be multiports (for&#10; now) and may be connected to multiports or regular ports.  During&#10; preinitialize(), the master MultiInstanceComposite determines how its&#10; input ports are connected, and creates additional relations in its&#10; container (the model it is embedded in) to connect the input ports of&#10; its clones (instances) to the same output port if that port is a&#10; multiport.  If that output port is a regular port, the clone's input&#10; port is linked to the already existing relation between that output&#10; port and the master's input port.  MultiInstanceComposite&#10; &lt;em&gt;output&lt;/em&gt; ports must not be multiports (for now) and must be&#10; connected to input multiports. The master MultiInstanceComposite&#10; creates additional relations to connect the output ports of its clones&#10; to the input port. Finally, after all these connections are made, the&#10; master's preinitialize() calls preinitialize() of the clones.&lt;p&gt;&#10;&#10; From here on until wrapup(), nothing special happens. Type resolution&#10; occurs on all instances in the modified model, so does initialize() and&#10; the computation of schedules by directors of the master and clones.&lt;p&gt;&#10;&#10; During model wrapup(), the master MultiContextComposite deletes any&#10; relations created, unlinks any ports if needed, and deletes the clones&#10; it created. To re-synchronize vergil's model graph, an empty&#10; ChangeRequest is also queued with the Manager.&lt;p&gt;&#10;&#10; Actor parameters inside MultiInstanceComposite may refer to parameters&#10; of the container model. This presents a problem during cloning() and&#10; wrapup() where the container model's parameters are not in scope during&#10; the clone's validateSettables() (unless the MultiInstanceComposite is&#10; built as a moml class having its own set of parameters). This problem&#10; is for now solved by providing a temporary scope copy using a&#10; ScopeExtendingAttribute for the cloning() and wrapup() phases of the&#10; clones.&lt;p&gt;  </description>
  <author>Zoltan Kemenczy, Sean Simmons, Research In Motion Limited</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.0</since>
  <Pt.ProposedRating>Red (zkemenczy)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="nInstances">The total number of instances to instantiate including instance&#10; 0 (the master copy).</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="instance">The index of this instance.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="showClones">If true, show the clones.</property>
</doc>
