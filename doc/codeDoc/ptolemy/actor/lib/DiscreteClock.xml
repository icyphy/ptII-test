<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
  <description>
This actor produces a periodic signal, a sequence of events at&#10; regularly spaced intervals.&#10; At the beginning of each time interval of length given by &lt;i&gt;period&lt;/i&gt;,&#10; starting from the time at which initialize() is invoked,&#10; this actor initiates a sequence of output events with values given by&#10; &lt;i&gt;values&lt;/i&gt; and offset into the period given by &lt;i&gt;offsets&lt;/i&gt;.&#10; These parameters contain arrays, which are required to have the same length.&#10; The &lt;i&gt;offsets&lt;/i&gt; array contains doubles, which&#10; must be nondecreasing and nonnegative,&#10; or an exception will be thrown when it is set.&#10; If any entry is greater than the &lt;i&gt;period&lt;/i&gt;&#10; then the corresponding output will never be produced.&#10; To get a finite sequence of events that is not periodic,&#10; just set &lt;i&gt;period&lt;/i&gt; to Infinity.&#10; Alternatively, you can provide&#10; a finite &lt;i&gt;stopTime&lt;/i&gt;. Upon reaching that stop time,&#10; postfire() returns false, which requests that the director&#10; not fire this actor again.&#10; The clock can also be started and stopped repeatedly&#10; during an execution. A token at the &lt;i&gt;start&lt;/i&gt; input will start the clock&#10; at the beginning of a period. A token&#10; at the &lt;i&gt;stop&lt;/i&gt; input will stop the clock, if it is still running.&#10; If both &lt;i&gt;start&lt;/i&gt; and &lt;i&gt;stop&lt;/i&gt; are received simultaneously, then&#10; the clock will be stopped.&#10; &lt;p&gt;&#10; The &lt;i&gt;values&lt;/i&gt; parameter by default&#10; contains the array {1}.  The default&#10; &lt;i&gt;offsets&lt;/i&gt; array is {0.0}.&#10; The default period is 1.0.&#10; &lt;p&gt;&#10; The type of the output can be any token type. This type is inferred&#10; from the element type of the &lt;i&gt;values&lt;/i&gt; parameter.&#10; &lt;p&gt;&#10; For example, if &lt;i&gt;values&lt;/i&gt; = {1, 2, 3},&#10; &lt;i&gt;offsets&lt;/i&gt; = {0.1, 0.2, 0.3},&#10; &lt;i&gt;period&lt;/i&gt; = 1.0,&#10; and the actor is initialized at time 0.0, then&#10; it will produce outputs with value 1 at all times&#10; &lt;i&gt;n&lt;/i&gt; + 0.1, outputs with value 2 at all times&#10; &lt;i&gt;n&lt;/i&gt; + 0.2, and outputs with value 3 at all times&#10; &lt;i&gt;n&lt;/i&gt; + 0.3, for all non-negative integers &lt;i&gt;n&lt;/i&gt;.&#10; &lt;p&gt;&#10; If the actor is not fired by the enclosing director at the time&#10; of the next expected output, then it will stop producing outputs.&#10; This should not occur. If it does, it is a bug in the director.&#10; &lt;p&gt;&#10; If the director that this is used with supports superdense time&#10; (like DE, Continuous), then the outputs are normally produced at microstep&#10; index 1. The reason for producing outputs at index 1&#10; is to maintain continuity in continuous-time models.&#10; Specifically, if the signal is absent prior to an output time,&#10; then it should be absent at index 0 of the time at which it will&#10; produce the next output. There are two exceptions. If&#10; two or more offsets have the same value, then each output&#10; at the same time is produced at superdense time index one greater&#10; than the previous output. Also, if an expected output has not been&#10; produced by the expected index, then it will be produced at the&#10; next available index. E.g., the very first output may be produced&#10; at a superdense index greater than zero if the director's index is&#10; greater than zero when this actor is initialized. This can happen,&#10; for example, if this clock is in a refinement in a modal model,&#10; and the modal model enters that mode with a reset transition.&#10; &lt;p&gt;&#10; If the &lt;i&gt;period&lt;/i&gt; is changed at any time, either by&#10; provided by an input or by changing the parameter, then the&#10; new period will take effect immediately if the new period&#10; is provided at the same time (including the&#10; microstep) that the current cycle starts,&#10; or after the current cycle completes otherwise.&#10; &lt;p&gt;&#10; If the &lt;i&gt;trigger&lt;/i&gt; input is connected, then an output will only&#10; be produced if a trigger input has been received since the last output&#10; or if the trigger input coincides with the time when an output should&#10; be produced. If a trigger input has not been received, then the&#10; output will be skipped, moving on to the the next phase.&#10; The only exception is the first output, which is produced&#10; whether a trigger is provided or not. This is because the&#10; trigger input is typically useful&#10; in a feedback situation, where the output of the clock&#10; eventually results in a trigger input. If the time-stamp&#10; of that trigger input is less than the time between clock&#10; events, then the clock will behave as if there were no&#10; trigger input. Otherwise, it will &quot;skip beats.&quot;&#10; &lt;p&gt;&#10; This actor is a timed source; the untimed version is Pulse.  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 8.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (hyzheng)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="start">A port that, if connected, is used to specify when the clock&#10;  starts. This port accepts any type. The arrival of an event&#10;  is what starts the clock. Upon arrival of such an event,&#10;  the clock starts as if just initialized. The clock will not&#10;  start until such an event is provided, unless the port is&#10;  left unconnected, in which case the actor starts immediately.&#10;  Note that when the clock starts, the period will be set to&#10;  its initial value. If an input period arrives before a&#10;  start input, then that arrived value will be ignored.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="stop">A port that, if connected, is used to specify when the clock&#10;  stops. This port accepts any type. The arrival of an event&#10;  is what stops the clock.</port>
    <!--ptolemy.data.expr.Parameter-->
    <property name="offsets">The offsets at which the specified values will be produced.&#10;  This parameter must contain an array of doubles, and it defaults&#10;  to {0.0}.</property>
    <!--ptolemy.actor.parameters.PortParameter-->
    <property name="period">The period of the output waveform.&#10;  This is a double that defaults to 1.0.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="values">The values that will be produced at the specified offsets.&#10;  This parameter must contain an ArrayToken, and it defaults to&#10;  {1}</property>
</doc>
