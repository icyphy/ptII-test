<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Test" class="ptolemy.actor.lib.Test">
  <description>
&lt;p&gt;This actor compares the inputs against the value specified by the&#10; &lt;i&gt;correctValues&lt;/i&gt; parameter.  That parameter is an ArrayToken,&#10; where each element of the array should have the same type as the&#10; input.  The length of this array is the number of iterations of this&#10; actor that are tested.  Subsequent iterations always succeed, so the&#10; actor can be used as a &quot;power-up&quot; test for a model, checking the first&#10; few iterations against some known results.&#10; &lt;/p&gt;&lt;p&gt;&#10; The input is a multiport.  If there is more than one channel connected&#10; to it, then each element of &lt;i&gt;correctValues&lt;/i&gt; must itself be an&#10; ArrayToken, with length matching the number of channels.&#10; Suppose for example that the width of the input is one,&#10; and the first three inputs should be 1, 2, and 3.  Then you can&#10; set &lt;i&gt;correctValues&lt;/i&gt; to&lt;/p&gt;&#10; &lt;pre&gt;&#10; {1, 2, 3}&#10; &lt;/pre&gt;&#10; &lt;p&gt;Suppose instead that the input has width two, and the correct values&#10; in the first iteration are 1 on the first channel and 2 on the second.&#10; Then on the second iteration, the correct values are 3 on the first&#10; channel and 4 on the second.  Then you can set &lt;i&gt;correctValues&lt;/i&gt; to&lt;/p&gt;&#10; &lt;pre&gt;&#10; {{1, 2}, {3, 4}}&#10; &lt;/pre&gt;&#10; &lt;p&gt; With this setting, no tests are performed after the first two iterations&#10; of this actor.&#10; &lt;/p&gt;&lt;p&gt;&#10; The input values are checked in the fire() method, which checks to&#10; make sure that each input channel has a token.  If an input value is&#10; missing or differs from what it should be, then fire() throws an&#10; exception. Thus, the test passes if no exception is thrown.&#10; If you need to check the input value in postfire() (say, after&#10; a fixed-point iteration has converged), then use NonStrictTest.&#10; &lt;/p&gt;&lt;p&gt;&#10; If the input is a DoubleToken or ComplexToken,&#10; then the comparison passes if the value is close to what it should&#10; be, within the specified &lt;i&gt;tolerance&lt;/i&gt; (which defaults to&#10; 10&lt;sup&gt;-9&lt;/sup&gt;.  The input data type is undeclared, so it can&#10; resolve to anything.&#10; &lt;/p&gt;&lt;p&gt;&#10; On each firing, this actor produces the output &lt;i&gt;false&lt;/i&gt; until&#10; it reaches the end of the &lt;i&gt;correctValues&lt;/i&gt; array, at which point&#10; it outputs &lt;i&gt;true&lt;/i&gt;.  This can be fed, for example, to an instance&#10; of the Stop actor to stop the test upon successfully matching the&#10; test data. In training mode, the output is always false.&#10; &lt;/p&gt;  </description>
  <author>Edward A. Lee, Christopher Hylands, Jim Armstrong</author>
  <version>$Id$</version>
  <since>Ptolemy II 1.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (cxh)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="output">Boolean output that is false as long as there is data to&#10;  compare against the input, but becomes true on the first&#10;  firing after such data has been exhausted.</port>
</doc>
