<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Default" class="ptolemy.actor.lib.Default">
  <description>
A Synchronous default operator.&#10;&#10; &lt;p&gt;When the &lt;i&gt;preferred&lt;/i&gt; input has a token, then the output is equal&#10; to that token. If the &lt;i&gt;preferred&lt;/i&gt; input is absent, then the output is&#10; equal to the &lt;i&gt;alternate&lt;/i&gt; input (whether it is absent or not).&#10; This actor is non-strict, in that can produce an output even if&#10; &lt;i&gt;alternate&lt;/i&gt; input is unknown. Thus, it can be used to break&#10; causality loops.&#10; &lt;p&gt;&#10; This actor is inspired by the &quot;default&quot; operator in the synchronous&#10; language SIGNAL, and is similar to the &quot;followed by&quot; operator in Lustre.&#10; But in the context of the Ptolemy II SR domain, its&#10; behavior is deterministic. This is because the Ptolemy II SR domain&#10; has a Lustre or Esterel style master clock, and this actor is given&#10; the opportunity to fire on each tick of that master clock. In SIGNAL,&#10; by contrast, this actor can be used to &quot;upsample&quot; to a higher rate&#10; clock; however, without considerable care, its use in SIGNAL results&#10; in nondeterminism.&#10;&#10; &lt;p&gt;This actor is typically used in the SR domain, but&#10; may also be used inside the Continuous domain.&lt;/p&gt;&#10;&#10; &lt;p&gt;P. Caspi, D. Pilaud, N. Halbwachs, and J. A. Plaice, &quot;LUSTRE: A&#10; Declarative Language for Programming Synchronous Systems,&quot;&#10; Conference Record of the 14th Annual ACM Symp. on Principles of&#10; Programming Languages, Munich, Germany, January, 1987.&lt;/p&gt;&#10;&#10; &lt;p&gt;A. Benveniste and P. Le Guernic, &quot;Hybrid Dynamical Systems Theory&#10; and the SIGNAL Language,&quot; IEEE Tr. on Automatic Control, Vol. 35,&#10; No. 5, pp. 525-546, May 1990.&lt;/p&gt;  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 10.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="preferred">The preferred input port.  If there is a token here, then that&#10;  token is produced on the output. Any data type is accepted.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="alternate">The alternate input port. If there is no token on the preferred&#10;  input port, then the output will equal whatever is here (including&#10;  absent). Any data type is accepted.</port>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="output">The output port. The type is greater than or equal to the&#10;  types of the two input ports.</port>
</doc>
