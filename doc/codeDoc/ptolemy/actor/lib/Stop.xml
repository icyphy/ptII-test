<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Stop" class="ptolemy.actor.lib.Stop">
  <description>
&lt;p&gt;An actor that stops execution of a model when it receives a true&#10; token on any input channel. This is accomplished by calling&#10; finish() on the director, which requests that the current iteration&#10; be completed and then the execution be halted. This actor will&#10; also call stopFire() which requests that any actors that are&#10; firing concurrently in separate threads conclude their firings.&#10; This is necessary to support threaded domains like PN. If the input&#10; is not connected to anything, then this actor requests a stop&#10; whenever it fires.&#10;&#10; &lt;/p&gt;&lt;p&gt;&#10; When exactly this stops the execution depends on the domain.  For&#10; example, in DE, if an event with time stamp &lt;i&gt;T&lt;/i&gt; and value&#10; &lt;i&gt;true&lt;/i&gt; arrives at this actor, then the current iteration will&#10; be concluded, and then the model will halt.  Concluding the current&#10; iteration means processing all events in the event queue with time&#10; stamp &lt;i&gt;T&lt;/i&gt;. Thus, it is possible for actors to be invoked after&#10; this one is invoked with a &lt;i&gt;true&lt;/i&gt; input.&#10;&#10; &lt;/p&gt;&lt;p&gt;&#10; In SDF, if this actor receives &lt;i&gt;true&lt;/i&gt;, then the current&#10; iteration is concluded and then execution is stopped.  Similarly in&#10; SR.&#10;&#10; &lt;/p&gt;&lt;p&gt;&#10; In PN, where each actor has its own thread, there is no&#10; well-defined notion of an iteration. The finish() method of the&#10; manager calls stopFire() on all actors, which for threaded actors&#10; results in halting them upon their next attempt to read an input or&#10; write an output. When all actor threads have stopped, the iteration&#10; concludes and the model halts. &lt;b&gt;NOTE&lt;/b&gt;: &lt;i&gt;This is not the best&#10; way to stop a PN model!&lt;/i&gt; This mechanism is nondeterministic in&#10; the sense that there is no way to control exactly what data is&#10; produced or consumed on the connections before the model stops.  To&#10; stop a PN model, it is better to design the model so that all&#10; actors are starved of data when the model is to stop.  The director&#10; will detect this starvation, and halt the model.  Nonetheless, if&#10; the nondeterminism is acceptable, this actor can be used.&lt;/p&gt;  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 2.1</since>
  <Pt.ProposedRating>Green (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Green (neuendor)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.SingletonParameter-->
    <property name="_hideName">The parameter that hides the name of the actor.  The default&#10; value is true.</property>
</doc>
