<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CorbaActorClient" class="ptolemy.actor.corba.CorbaActorClient">
  <description>
This actor delegate all its executions to a remote actor via&#10; CORBA. The remote actor can be anything that implements the&#10; CorbaActor interface defined by the CorbaActor.idl.&#10; &lt;P&gt;&#10; When constructing, this actor has no input and no output.&#10; The ports can be added by the addPort() method (or removed&#10; by the removePort() method.) Local ports and remote ports&#10; are binded by their names, such that at run time, the tokens&#10; sent to a local port is transferred to the remote port with&#10; the same name.&#10; &lt;P&gt;&#10; It has three default parameters, one for name server, one for&#10; its port, and one for the name of the remote actor. Additional&#10; parameters can be added to the actor, and those parameters&#10; will be sent to the remote actor at the initilization phase&#10; of the execution. Parameters are binded by their names.&#10; &lt;P&gt;&#10; At the initialize() phase of the execution, the actor will&#10; try to create the ORB, and connect to the name server.&#10; If succeed, it will find the remote actor by looking for its&#10; name. If this succeeds also, the remote actor is called to be&#10; located. Then at each firing phase (prefire(), fire() and&#10; postfire()), this actor will first transfer all the current&#10; input tokens to the remote actor, and call the corresponding&#10; methods of the remote actor, then transfer the output&#10; values. If any of these actions failed, an Exception&#10; will be thrown.&#10; &lt;P&gt;&#10; FIXME: In the current implementation, all the values are&#10; transferred in the form of a string. This is not type save.&#10; Further improvement is needed.  </description>
  <author>Jie Liu</author>
  <version>$Id$</version>
    <!--ptolemy.data.expr.Parameter-->
    <property name="ORBInitProperties">The initialization properties of the ORB. The following&#10;  system properties are copied from JDK documents.&#10;  &lt;P&gt;&#10;  &quot;Currently, the following configuration properties are defined&#10;  for all ORB implementations:&lt;BR&gt;&#10;  &lt;code&gt;org.omg.CORBA.ORBClass&lt;/code&gt;&#10;  The name of a Java class that implements the org.omg.CORBA.ORB&#10;  interface. Applets and applications do not need to&#10;  supply this property unless they must have a particular ORB&#10;  implementation. The value for the Java IDL ORB is&#10;  com.sun.CORBA.iiop.ORB. &lt;BR&gt;&#10;  &lt;code&gt;org.omg.CORBA.ORBSingletonClass &lt;/code&gt;&#10;  The name of a Java class that implements the org.omg.CORBA.ORB&#10;  interface. This is the object returned by a call to&#10;  orb.init() with no arguments. It is used primarily to create&#10;  typecode instances than can be shared across untrusted code&#10;  (such as unsigned applets) in a secured environment.&#10;  &lt;P&gt;&#10;  In addition to the standard properties listed above, Java IDL&#10;  also supports the following properties:&#10;  &lt;P&gt;&#10;  &lt;code&gt;org.omg.CORBA.ORBInitialHost &lt;/code&gt;&#10;  The host name of a machine running a server or daemon that&#10;  provides initial bootstrap services, such as a name service.&#10;  The default value for this property is localhost for applications.&#10;  For applets it is the applet host, equivalent to&#10;  getCodeBase().getHost(). &lt;BR&gt;&#10;  &lt;code&gt;org.omg.CORBA.ORBInitialPort &lt;/code&gt;&#10;  The port the initial naming service listens to. The default&#10;  value is 900.&quot;&#10;  &lt;P&gt;&#10;  The parameters should be constructed in one line of String.&#10;  For example:&lt;BR&gt;&#10;  &lt;code&gt; -ORBInitialHost moog.eecs.berkeley.edu -ORBInitialPort&#10;  1005 &lt;/code&gt;&lt;BR&gt;</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="remoteActorName">The name of the remote actor. The type of the Parameter&#10;  is StringToken.</property>
</doc>
