<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="TypedIOPort" class="ptolemy.actor.TypedIOPort">
  <description>
An IOPort with a type. This class implements the Typeable interface.&#10; The type is represented by an instance of Type in data.type package.&#10; It can be declared by calling setTypeEquals(). If this method is not&#10; called, or called with a BaseType.UNKNOWN argument, the type of this port&#10; will be set by type resolution using the type constraints. The type&#10; constraints on this port can be specified using the methods defined in&#10; the Typeable interface.&#10;&#10; &lt;p&gt;This class keeps a list of TypeListeners. Whenever the type&#10; changes, this class will generate an instance of TypeEvent and pass it&#10; to the listeners by calling their typeChanged() method. A TypeListener&#10; register its interest in the type change event of this port by calling&#10; addTypeListener(), and can be removed from the listener list by calling&#10; the removeTypeListener().&#10;&#10; &lt;p&gt;A TypedIOPort can only link to instances of TypedIORelation. Derived&#10; classes may further constrain links to a subclass of TypedIORelation.&#10; To do this, they should override the protected methods _link() and&#10; _linkInside() to throw an exception if their arguments are not of the&#10; appropriate type.  Similarly, an TypeIOPort can only be contained by a&#10; class derived from ComponentEntity and implementing the TypedActor&#10; interface.  Subclasses may further constrain the containers by overriding&#10; _checkContainer().&#10;&#10; &lt;p&gt;Note that actors that call some of the setType&lt;i&gt;XXX&lt;/i&gt; methods&#10; may also need to have a clone() method.  Although the base classes&#10; neatly handle most aspects of the clone operation, there are&#10; subtleties involved with cloning type constraints. Absolute type&#10; constraints on ports and parameters are carried automatically into the&#10; clone, so clone() methods should never call setTypeEquals(). However,&#10; relative type constraints of the other setType&lt;i&gt;XXX&lt;/I&gt;() methods are&#10; not cloned automatically because of the difficulty of ensuring that&#10; the other object being referred to in a relative constraint is the&#10; intended one.&#10; &lt;p&gt; For example the Ramp actor constructor calls:&#10; &lt;pre&gt;&#10; output.setTypeAtLeast(init);&#10; &lt;/pre&gt;&#10; so the clone() method of the Ramp actor calls:&#10; &lt;pre&gt;&#10; newObject.output.setTypeAtLeast(newObject.init);&#10; &lt;/pre&gt;  </description>
  <author>Yuhong Xiong, Lukito Muliadi</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (yuhong)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (neuendor)</Pt.AcceptedRating>
</doc>
