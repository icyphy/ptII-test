<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="FilePortParameter" class="ptolemy.actor.parameters.FilePortParameter">
  <description>
This file parameter creates an associated port that can be used to update&#10; the current value of the parameter. The value of this&#10; parameter, accessed by getExpression(), is a string that names a file&#10; or URL, possibly containing references to variables defined in scope&#10; using the syntax $ID, ${ID} or $(ID). The value returned by getToken()&#10; is name of the file with such references resolved.&#10; &lt;p&gt;&#10; If the model containing this port&#10; parameter has been saved to a MoML file, then the file name can be&#10; given relative to the directory containing that MoML file.&#10; If the model has not been saved to a file,&#10; then the classpath is used for identifying relative file names.&#10; &lt;p&gt;&#10; Files can be given relative to a &lt;i&gt;base&lt;/i&gt;, where the base is&#10; the URI of the first container above this one that has a URIAttribute.&#10; Normally, this URI specifies the file or URL containing the model&#10; definition. Thus, files that are referred to here can be kept in the&#10; same directory as the model, or in a related directory, and can&#10; moved together with the model.&#10; &lt;p&gt;&#10; The following special file names are understood:&#10; &lt;ul&gt;&#10; &lt;li&gt; System.in: Standard input.&#10; &lt;li&gt; System.out: Standard output.&#10; &lt;/ul&gt;&#10; Note, however, that these file names cannot be converted to URLs&#10; using the asURL() method.&#10; A file name can also contain the following strings that start&#10; with &quot;$&quot;, which get substituted&#10; with the appropriate values.&#10; &lt;table&gt;&#10; &lt;caption&gt;Variables that get substituted.&lt;/caption&gt;&#10; &lt;tr&gt;&#10; &lt;th&gt;String&lt;/th&gt;&#10; &lt;th&gt;Description&lt;/th&gt;&#10; &lt;th&gt;Property&lt;/th&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$CWD&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The current working directory&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;user.dir&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$HOME&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The user's home directory&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;user.home&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$PTII&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The home directory of the Ptolemy II installation&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;ptolemy.ptII.dir&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$TMPDIR&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The temporary directory&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;java.io.tmpdir&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;tr&gt;&#10; &lt;td&gt;&lt;code&gt;$USERNAME&lt;/code&gt;&lt;/td&gt;&#10; &lt;td&gt;The user's account name&lt;/td&gt;&#10; &lt;td&gt;&lt;code&gt;user.name&lt;/code&gt;&lt;/td&gt;&#10; &lt;/tr&gt;&#10; &lt;/table&gt;&#10; The above properties are normally set when a Ptolemy II application starts.&#10; &lt;p&gt;&#10; If a file name begins with the reference &quot;$CLASSPATH&quot;, then when&#10; the file is opened for reading, the openForReading() method&#10; will search for the file relative to the classpath (using the&#10; getResource() method of the current class loader).  This will only&#10; work for a file that exists, and thus the openForWriting() method&#10; will not understand the &quot;$CLASSPATH&quot; string; this makes sense&#10; since the classpath typically has several directories, and it&#10; would not be obvious where to create the file.  The asURL()&#10; method also recognizes the &quot;$CLASSPATH&quot; string, but not the asFile()&#10; method (which is typically used when accessing a file for writing).&#10; NOTE: If the container of this parameter also contains a variable&#10; named CLASSPATH, then the value of that variable is used instead&#10; of the Java classpath.&#10; &lt;p&gt;&#10; This parameter has two values,&#10; which may not be equal, a &lt;i&gt;current value&lt;/i&gt; and a &lt;i&gt;persistent value&lt;/i&gt;.&#10; The persistent value is returned by&#10; getExpression() and is set by any of three different mechanisms:&#10; &lt;ul&gt;&#10; &lt;li&gt; calling setExpression();&#10; &lt;li&gt; calling setToken(); and&#10; &lt;li&gt; specifying a value as a constructor argument.&#10; &lt;/ul&gt;&#10; All three of these will also set the current value, which is then&#10; equal to the persistent value.&#10; The current value is returned by get getToken()&#10; and is set by any of three different mechanisms:&#10; &lt;ul&gt;&#10; &lt;li&gt; calling setCurrentValue();&#10; &lt;li&gt; calling update() sets the current value if there is an associated&#10; port, and that port has a token to consume; and&#10; &lt;/ul&gt;&#10; These three techniques do not change the persistent value, so after&#10; these are used, the persistent value and current value may be different.&#10; &lt;p&gt;&#10; When using this parameter in an actor, care must be exercised&#10; to call update() exactly once per firing prior to calling getToken().&#10; Each time update() is called, a new token will be consumed from&#10; the associated port (if the port is connected and has a token).&#10; If this is called multiple times in an iteration, it may result in&#10; consuming tokens that were intended for subsequent iterations.&#10; Thus, for example, update() should not be called in fire() and then&#10; again in postfire().  Moreover, in some domains (such as DE),&#10; it is essential that if a token is provided on a port, that it&#10; is consumed.  In DE, the actor will be repeatedly fired until&#10; the token is consumed.  Thus, it is an error to not call update()&#10; once per iteration.  For an example of an actor that uses this&#10; mechanism, see Ramp.&#10; &lt;p&gt;&#10; If this actor is placed in a container that does not implement&#10; the TypedActor interface, then no associated port is created,&#10; and it functions as an ordinary file parameter.  This is useful,&#10; for example, if this is put in a library, where one would not&#10; want the associated port to appear.&#10;&#10; &lt;p&gt;There are a few situations where FilePortParameter might not do what&#10; you expect:&#10;&#10; &lt;ol&gt;&#10; &lt;li&gt; If it is used in a transparent composite actor, then a token provided&#10; to a FilePortParameter will never be read.  A transparent composite actor&#10; is one without a director.&#10;&#10; &lt;br&gt;Workaround: Put a director in the composite.&#10;&#10; &lt;li&gt; Certain actors read parameter&#10; values only during initialization.  During initialization, a&#10; FilePortParameter can only have a value set via the parameter (it&#10; can't have yet received a token).  So if the initial value&#10; is set to the value of the FilePortParameter, then it will&#10; see only the parameter value, never the value provided via the&#10; port.&#10;&#10; &lt;br&gt;Workaround: Use a RunCompositeActor to contain the model.&#10;&#10; &lt;/ol&gt;  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 4.1</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
</doc>
