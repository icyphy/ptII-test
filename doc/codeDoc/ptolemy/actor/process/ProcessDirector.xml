<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="ProcessDirector" class="ptolemy.actor.process.ProcessDirector">
  <description>
The base class for directors for the process oriented domains. It provides&#10; default implementations for methods that are common across such domains.&#10; &lt;P&gt;&#10; In the process oriented domains, the director controlling a model&#10; needs to keep track of the state of the model. In particular it needs&#10; to maintain an accurate count of the number of active processes under&#10; its control and any processes that are blocked for whatever reason (trying&#10; to read from an empty channel as in PN).&#10; These counts, and perhaps other counts, are needed by the&#10; director to control and respond when deadlock is detected (no processes&#10; can make progress), or to respond to requests from higher in the hierarchy.&#10; &lt;P&gt;&#10; The methods that control how the director detects and responds to deadlocks&#10; are _areActorsDeadlocked() and _resolveDeadlock(). These methods should be&#10; overridden in derived classes to get domain-specific behaviour. The&#10; implementations given here are trivial and suffice only to illustrate&#10; the approach that should be followed.&#10; &lt;P&gt;&#10; This base class is not sufficient for executing hierarchical, heterogeneous&#10; models. In order to accommodate hierarchical, heterogeneity the subclass&#10; CompositeProcessDirector must be used.&#10; &lt;P&gt;&#10; &lt;P&gt;  </description>
  <author>Mudit Goel, Neil Smyth, John S. Davis II</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (mudit)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (mudit)</Pt.AcceptedRating>
</doc>
