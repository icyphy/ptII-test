<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CompositeProcessDirector" class="ptolemy.actor.process.CompositeProcessDirector">
  <description>
A baseclass for directors in process oriented domains that incorporate&#10; hierarchical heterogeneity. As with ProcessDirector&#10; CompositeProcessDirectors need to keep a count of the number of active&#10; processes and the number of processes that are blocked for any reason&#10; (e.g., trying to read from an empty channel in PN).&#10; CompositeProcessDirector is a subclass of ProcessDirector to facilitate&#10; models that consist of non-atomic actors.&#10; &lt;P&gt;&#10; A composite process director can be contained by an opaque composite&#10; actor that is contained by a composite actor. Ports contained by opaque&#10; composite actors are called opaque ports and such ports facilitate data&#10; transfer across the composite actor boundaries. A composite process&#10; director allocates two branch controllers to monitor data transfer in&#10; channels associated with opaque ports. The &lt;I&gt;input&lt;/I&gt; branch controller&#10; monitors data transfer for channels associated with input opaque ports.&#10; The &lt;I&gt;output&lt;/I&gt; branch controller monitors data transfer for channels&#10; associated with output opaque ports.&#10; &lt;P&gt;&#10; Associated with the channels of each opaque port is a pair of process&#10; receivers. The &lt;I&gt;producer receiver&lt;/I&gt; serves as the channel source&#10; and the &lt;I&gt;consumer receiver&lt;/I&gt; serves as the channel destination.&#10; Each branch controller allocates a branch for each process receiver&#10; pair and when executing, a branch repeatedly attempts to transfer a&#10; single token from its producer receiver to its consumer receiver.&#10; &lt;P&gt;&#10; When a branch blocks while attempting to transfer data, it informs its&#10; branch controller by passing the branch controller the blocked receiver.&#10; If all of the branches of a controller have blocked, then we say that&#10; the branch controller is blocked and the branch controller informs the&#10; composite process director. In addition to monitoring the status of its&#10; branch controllers, a composite process director keeps track of the&#10; state of the actors that it contains. Actors can be internally or&#10; externally blocked. We say that an actor is externally blocked if it&#10; is blocked waiting to transfer tokens to or from a boundary port of&#10; its container actor. Actors that are blocked but not externally are&#10; said to be internally blocked.&#10; &lt;P&gt;&#10; Composite process directors monitor the state of the branch controllers&#10; and contained actors and when necessary invoke the _resolveDeadlock()&#10; method to deal with deadlocks. In the remainder of this paragraph we&#10; consider the case of a process-oriented opaque composite actor that is&#10; contained by another process-oriented opaque composite actor. If the&#10; actors contained by the inner composite actor are not blocked, then&#10; execution of the inner composite actor is allowed to continue&#10; independent of the state of the branch controllers. If the actors&#10; contained by the inner composite actor are internally blocked, then&#10; after the branch controllers have been deactivated, execution of the&#10; composite actor ends and postfire returns false indicating that&#10; successive iterations are not allowed. If the actors contained by the&#10; inner composite actor are externally blocked, then the composite&#10; process director waits until the branch controllers block (an&#10; inevitable condition) and registers the block with the containing&#10; (outer) composite director of the actor.&#10; &lt;P&gt;&#10; In this paragraph we consider the case of a process-oriented opaque&#10; composite actor that is contained by a schedule-oriented (non process)&#10; opaque composite actor. If the actors contained by the inner composite&#10; actor are not blocked, then execution of the inner composite actor is&#10; allowed to continue independent of the state of the branch controllers.&#10; If the actors contained by the inner composite actor are internally&#10; blocked, then after the branch controllers have been deactivated,&#10; execution of the composite actor ends and postfire returns false&#10; indicating that successive iterations are not allowed. If the actors&#10; contained by the inner composite actor are externally blocked, then&#10; the composite process director waits until the branch controllers&#10; block (an inevitable condition) and ends the iteration with postfire()&#10; returning true indicating that successive iterations are allowed.  </description>
  <author>John S. Davis II</author>
  <version>$Id$</version>
  <since>Ptolemy II 1.0</since>
  <Pt.ProposedRating>Green (mudit)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (davisj)</Pt.AcceptedRating>
</doc>
