<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="ConstantPublisherPort" class="ptolemy.actor.ConstantPublisherPort">
  <description>
This is a specialized output port that publishes constant data sent on&#10; the specified named channel.  The tokens are&#10; &quot;tunneled&quot; to any instance of &lt;a href=&quot;../../ptolemy/actor/SubscriberPort.xml&quot;&gt;ptolemy.actor.SubscriberPort&lt;/a&gt; that names the same channel.&#10; If &lt;a href=&quot;../../ptolemy/actor/ConstantPublisherPort.xml#global&quot;&gt;global&lt;/a&gt; is false (the default), then this publisher&#10; will only send to instances of SubscriberPort that are under the&#10; control of the same director. That is, it can&#10; be at a different level of the hierarchy, or in an entirely different&#10; composite actor, as long as the relevant composite actors are&#10; transparent (have no director). If &lt;a href=&quot;../../ptolemy/actor/ConstantPublisherPort.xml#global&quot;&gt;global&lt;/a&gt; is true,&#10; then the subscriber may be anywhere in the model, as long as its&#10; &lt;i&gt;global&lt;/i&gt; parameter is also true.&#10;  &lt;p&gt;&#10; Note that this port should be used just like a &lt;a href=&quot;../../ptolemy/actor/PublisherPort.xml&quot;&gt;ptolemy.actor.PublisherPort&lt;/a&gt;.&#10; If you put it in an opaque composite actor, then it requires a&#10; token on the inside in order to produce its output. It will replace&#10; each token with the constant value. Similarly, if it is put into&#10; a transparent composite actor, then tokens must be sent through&#10; it. Those tokens will be replaced with the constant value. If it&#10; is put into an atomic actor, then the actor should call one of&#10; its broadcast or send methods, providing a token that will be&#10; replaced with the constant token. This pattern ensures that data&#10; dependencies work with this port just as with any other port.&#10;&lt;p&gt;&#10; It is an error to have two instances of PublisherPort&#10; or ConstantPublisherPort using the same&#10; channel under the control of the same director. When you create a&#10; new PublisherPort or&#10; ConstantPublisherPort, by default, it has no channel name. You have to&#10; specify a channel name to use it.&#10; &lt;p&gt;&#10; &lt;b&gt;How it works:&lt;/b&gt;&#10; When the channel name&#10; is specified, typically during model construction, this actor&#10; causes a relation to be created in the least opaque composite&#10; actor above it in the hierarchy and links to that relation.&#10; In addition, if &lt;a href=&quot;../../ptolemy/actor/ConstantPublisherPort.xml#global&quot;&gt;global&lt;/a&gt; is set to true, it causes&#10; a port to be created in that composite, and also links that&#10; port to the relation on the inside.  The relation is recorded by the opaque&#10; composite.  When a SubscriberPort is preinitialized that refers&#10; to the same channel, that SubscriberPort finds the relation (by&#10; finding the least opaque composite actor above it) and links&#10; to the relation. Some of these links are &quot;liberal links&quot; in that&#10; they cross levels of the hierarchy.&#10; &lt;p&gt;&#10; Since publishers are linked to subscribers,&#10; any data dependencies that the director might assume on a regular&#10; &quot;wired&quot; connection will also be assumed across publisher-subscriber&#10; pairs. Similarly, type constraints will propagate across&#10; publisher-subscriber pairs. That is, the type of the subscriber&#10; output will match the type of the publisher input.  </description>
  <author>Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 10.0</since>
  <Pt.ProposedRating>Yellow (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (eal)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="constantValue">The constant value to publish. This can have any type.&#10;  It defaults to the integer 0.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="numberOfTokens">The number of constant tokens to publish. By default,&#10;  this is UNBOUNDED, which means that there is no limit.</property>
</doc>
