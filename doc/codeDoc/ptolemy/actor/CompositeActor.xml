<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="CompositeActor" class="ptolemy.actor.CompositeActor">
  <description>
A CompositeActor is an aggregation of actors.  It may have a&#10; &lt;i&gt;local director&lt;/i&gt;, which is an attribute of class Director that&#10; is responsible for executing the contained actors.&#10; At the top level of a hierarchy, a composite actor (the toplevel&#10; CompositeActor of the topology) will normally exist with a local Director,&#10; and no container.  A composite actor at a lower level&#10; of the hierarchy may also have a local director.  A composite actor&#10; with a local director is &lt;i&gt;opaque&lt;/i&gt;, and serves the role of the&#10; &lt;i&gt;wormhole&lt;/i&gt; from Ptolemy Classic. Its ports are opaque, but it can&#10; contain actors and relations.  The toplevel composite actor is also&#10; associated with a Manager object that is responsible for managing&#10; any execution within the topology at a high level.&#10; &lt;p&gt;&#10; The &lt;i&gt;executive director&lt;/i&gt; of a composite actor is the local director of&#10; the actor's container.   The toplevel composite actor has no executive&#10; director, and getExecutiveDirector will return null.   For transparent&#10; composite actors, the executive director and the local director will be the&#10; same.&#10; &lt;p&gt;&#10; The getDirector() method returns the local director if there is one.&#10; Otherwise, it returns the &lt;i&gt;executive director&lt;/i&gt; of the CompositeActor,&#10; if there is one.  Whatever it returns is called (simply) the&#10; &lt;i&gt;director&lt;/i&gt; of the composite (it may be local or executive).  This&#10; Director is responsible for the execution of all the actors contained&#10; within the composite actor.&#10; &lt;p&gt;&#10; A composite actor must have an executive director in order to communicate with&#10; the hierarchy around it.   In fact, it cannot even receive data in its&#10; input ports without an executive director, since the executive director&#10; is responsible for supplying the receivers to the ports.&#10; The toplevel composite actor has no executive director and cannot have&#10; ports that transmit data, but it can still be executed as long as it has a&#10; local director.  If the getDirector() method returns null, then the&#10; composite is not executable.&#10; &lt;p&gt;&#10; When a composite actor has both a director and an executive director, then&#10; the model of computation implemented by the director need not be the&#10; same as the model of computation implemented by the executive director.&#10; This is the source of the hierarchical heterogeneity in Ptolemy II.&#10; Multiple models of computation can be cleanly nested.&#10; &lt;p&gt;&#10; The ports of a CompositeActor are constrained to be IOPorts, the&#10; relations to be IORelations, and the actors to be instances of&#10; ComponentEntity that implement the Actor interface.  Derived classes&#10; may impose further constraints by overriding newPort(), _addPort(),&#10; newRelation(), _addRelation(), and _addEntity().  </description>
  <author>Mudit Goel, Edward A. Lee, Lukito Muliadi, Steve Neuendorffer, Contributor: Daniel Crawl, Bert Rodiers</author>
  <version>$Id$</version>
  <since>Ptolemy II 0.2</since>
  <Pt.ProposedRating>Green (cxh)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (neuendor)</Pt.AcceptedRating>
</doc>
