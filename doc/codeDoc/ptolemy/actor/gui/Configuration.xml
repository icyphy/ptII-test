<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Configuration" class="ptolemy.actor.gui.Configuration">
  <description>
The configuration of an application that uses Ptolemy II classes.&#10; An instance of this class is in charge of the user interface,&#10; and coordinates multiple views of multiple models. One of its&#10; functions, for example, is to manage the opening of new models,&#10; ensuring that an appropriate view is used. It also makes sure that&#10; if a model is opened that is already open, then existing views are&#10; shown rather than creating new views.&#10; &lt;p&gt;&#10; The applications &lt;i&gt;vergil&lt;/i&gt; and &lt;i&gt;moml&lt;/i&gt; (at least) use&#10; configurations defined in MoML files, typically located in&#10; ptII/ptolemy/configs. The &lt;i&gt;moml&lt;/i&gt; application takes as&#10; command line arguments a list of MoML files, the first of which&#10; is expected to define an instance of Configuration and its contents.&#10; That configuration is then used to open subsequent MoML files on the&#10; command line, and to manage the user interface.&#10; &lt;p&gt;&#10; Rather than performing all these functions itself, this class&#10; is a container for a model directory, effigy factories, and tableau&#10; factories that actually realize these functions. An application&#10; is configured by populating an instance of this class with&#10; a suitable set of these other classes. A minimal configuration&#10; defined in MoML is shown below:&#10; &lt;pre&gt;&#10; &amp;lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&amp;gt;&#10; &amp;lt;!DOCTYPE entity PUBLIC &quot;-//UC Berkeley//DTD MoML 1//EN&quot;&#10; &quot;http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd&quot;&amp;gt;&#10; &amp;lt;entity name=&quot;configuration&quot; class=&quot;ptolemy.actor.gui.Configuration&quot;&amp;gt;&#10; &amp;lt;doc&amp;gt;Configuration to run but not edit Ptolemy II models&amp;lt;/doc&amp;gt;&#10; &amp;lt;entity name=&quot;directory&quot; class=&quot;ptolemy.actor.gui.ModelDirectory&quot;/&amp;gt;&#10; &amp;lt;entity name=&quot;effigyFactory&quot; class=&quot;ptolemy.actor.gui.PtolemyEffigy$Factory&quot;/&amp;gt;&#10; &amp;lt;property name=&quot;tableauFactory&quot; class=&quot;ptolemy.actor.gui.RunTableau$Factory&quot;/&amp;gt;&#10; &amp;lt;/entity&amp;gt;&#10; &lt;/pre&gt;&#10; &lt;p&gt;&#10; It must contain, at a minimum, an instance of ModelDirectory, named&#10; &quot;directory&quot;, and an instance of EffigyFactory, named &quot;effigyFactory&quot;.&#10; The openModel() method delegates to the effigy factory the opening of a model.&#10; It may also contain an instance of TextEditorTableauFactory, named &quot;tableauFactory&quot;.&#10; A tableau is a visual representation of the model in a top-level window.&#10; The above minimal configuration can be used to run Ptolemy II models&#10; by opening a run panel only.&#10; &lt;p&gt;&#10; When the directory becomes empty (all models have been closed),&#10; it removes itself from the configuration. When this happens, the&#10; configuration calls System.exit() to exit the application.&#10;&#10; &lt;p&gt;To access the configuration from a random place, if you have a&#10; NamedObj &lt;code&gt;foo&lt;/code&gt;, then you can call:&#10; &lt;pre&gt;&#10; Effigy effigy = Configuration.findEffigy(foo.toplevel());&#10; Configuration configuration = effigy.toplevel();&#10; &lt;/pre&gt;  </description>
  <author>Steve Neuendorffer and Edward A. Lee</author>
  <version>$Id$</version>
  <since>Ptolemy II 1.0</since>
  <Pt.ProposedRating>Green (eal)</Pt.ProposedRating>
  <Pt.AcceptedRating>Yellow (celaine)</Pt.AcceptedRating>
    <!--ptolemy.data.expr.Parameter-->
    <property name="classesToRemove">A Parameter that is an array of Strings where each element&#10;  names a class to be removed.  The initial default value is&#10;  an array with an empty element.&#10;  &lt;p&gt; Kepler uses this parameter to remove certain classes:&#10;  &lt;pre&gt;&#10;  &amp;lt;property name=&quot;_classesToRemove&quot; class=&quot;ptolemy.data.expr.Parameter&quot;&#10;  value=&quot;{&amp;quot;ptolemy.codegen.kernel.StaticSchedulingCodeGenerator&amp;quot;,&amp;quot;ptolemy.codegen.c.kernel.CCodeGenerator&amp;quot;}&quot;&amp;gt;&#10;      &amp;lt;doc&amp;gt;An array of Strings, where each element names a class&#10;  to removed by the MoMLFilter.&amp;lt;/doc&amp;gt;&#10;   &amp;gt;/property&amp;gt;&#10;  &lt;/pre&gt;</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="removeGraphicalClasses">A Parameter that if set to true adds &lt;a href=&quot;../../../ptolemy/moml/filter/RemoveGraphicalClasses.xml&quot;&gt;ptolemy.moml.filter.RemoveGraphicalClasses&lt;/a&gt; to the list of&#10; MoMLFilters.  Use this to run non-graphical classes.  Note that&#10; setting this parameter and using MoMLApplication is not likely&#10; to work as MoMLApplication sets the look and feel which invokes&#10; the graphical system.  The initial value is a boolean with the&#10; value false, indicating that RemoveGraphicalClasses should not&#10; be added to the filter list.</property>
</doc>
