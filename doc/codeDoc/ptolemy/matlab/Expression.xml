<?xml version="1.0" standalone="yes"?>
<!DOCTYPE doc PUBLIC "-//UC Berkeley//DTD DocML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/DocML_1.dtd">
<doc name="Expression" class="ptolemy.matlab.Expression">
  <description>
On each firing send an expression for evaluation to a matlab &lt;a href=&quot;../../ptolemy/matlab/Engine.xml&quot;&gt;ptolemy.matlab.Engine&lt;/a&gt;. The expression is any valid matlab expression, e.g.:&#10;&#10; &lt;pre&gt;&#10; [out1, out2, ... ] = SomeMatlabFunctionOrExpression( in1, in2, ... );...&#10; &lt;/pre&gt;&#10;&#10; &lt;p&gt;The expression may include references to the input port names, current&#10; time (&lt;i&gt;time&lt;/i&gt;), and a count of the firing (&lt;i&gt;iteration&lt;/i&gt;). This&#10; is similar to &lt;a href=&quot;../../ptolemy/actor/lib/Expression.html&quot;&gt;Expression&lt;/a&gt;.&#10; To refer to parameters in scope, use $name or ${name} within&#10; the expression.&lt;/p&gt;&#10;&#10; &lt;p&gt;The matlab engine is opened (started) during prefire() by the first&#10; matlab Expression actor. Subsequent open()s simply increment a use&#10; count.&lt;/p&gt;&#10;&#10; &lt;p&gt;At the start of fire(), &lt;i&gt;clear variables;clear globals&lt;/i&gt; commands are&#10; sent to matlab to clear its workspace. This helps detect errors where the&#10; matlab expression refers to a matlab variable not initialized from the&#10; input ports of this actor instance.&lt;/p&gt;&#10;&#10; &lt;p&gt;After the evaluation of the matlab expression is complete, the fire()&#10; method iterates through names of output ports and converts matlab&#10; variables with corresponding names to Tokens that are sent to the&#10; corresponding output ports. Incorrect expressions are usually first&#10; detected at this point by not finding the expected variables. If an&#10; output port variable is not found in the matlab &lt;a href=&quot;../../ptolemy/matlab/Engine.xml&quot;&gt;ptolemy.matlab.Engine&lt;/a&gt;, an&#10; exception is thrown. The exception description string contains the last&#10; stdout of the matlab engine that usually describes the error.&lt;/p&gt;&#10;&#10; &lt;p&gt;The &lt;a href=&quot;../../ptolemy/matlab/Expression.xml#get1x1asScalars&quot;&gt;get1x1asScalars&lt;/a&gt; and &lt;a href=&quot;../../ptolemy/matlab/Expression.xml#getIntegerMatrices&quot;&gt;getIntegerMatrices&lt;/a&gt; control&#10; data conversion (see &lt;a href=&quot;../../ptolemy/matlab/Engine.xml&quot;&gt;ptolemy.matlab.Engine&lt;/a&gt; and&#10; &lt;a href=&quot;../../ptolemy/matlab/Engine/ConversionParameters.xml&quot;&gt;ptolemy.matlab.Engine.ConversionParameters&lt;/a&gt;).&lt;/p&gt;&#10;&#10; &lt;p&gt;A Parameter named &lt;i&gt;packageDirectories&lt;/i&gt; may be added to this actor&#10; to augment the search path of the matlab engine during the firing of this&#10; actor. The value of this parameter should evaluate to a StringToken,&#10; e.g.:&#10;&#10; &lt;pre&gt;&#10; &quot;path1, path2, ...&quot;&#10; &lt;/pre&gt;&#10;&#10; &lt;p&gt; containing a comma-separated list of paths to be prepended to the matlab&#10; engine search path before &lt;i&gt;expression&lt;/i&gt; is evaluated. The list may&#10; contain paths relative to the directory in which ptolemy was started,&#10; or any directory listed in the current classpath (in that order, first&#10; match wins). See &lt;a href=&quot;../../ptolemy/data/expr/UtilityFunctions.html#findFile&quot;&gt;findFile(String)&lt;/a&gt;.&#10; After evaluation, the previous search path is restored.&lt;/p&gt;&#10;&#10; &lt;p&gt;A Parameter named &lt;i&gt;_debugging&lt;/i&gt; may be used to turn on debug print&#10; statements to stdout from &lt;a href=&quot;../../ptolemy/matlab/Engine.xml&quot;&gt;ptolemy.matlab.Engine&lt;/a&gt; and the ptmatlab JNI. An IntToken&#10; with a value of 1 turns on Engine debug statements, a value of 2 adds&#10; ptmatlab debug statements as well.  A value of 0 or the absence of the&#10; &lt;i&gt;_debugging&lt;/i&gt; parameter yields normal operation.&lt;/p&gt;&#10;&#10; &lt;p&gt;For this actor to work, Matlab must be installed on your local&#10; machine.  In addition, your environment must be set properly. The&#10; &lt;code&gt;$PTII/bin/vergil&lt;/code&gt; script does this for you, below are&#10; instructions for users, such as Eclipse users, who are not using&#10; &lt;code&gt;$PTII/bin/vergil&lt;/code&gt;.&lt;/p&gt;&#10;&#10; &lt;p&gt;Add the Matlab shared libraries to your the library path. In the examples&#10; below &lt;code&gt;$MATLAB&lt;/code&gt;&#10; should be the location of your Matlab installation. For example, if&#10; /usr/bin/matlab is a link:&#10; &lt;pre&gt;&#10; bash-3.2$ which matlab&#10; /usr/bin/matlab&#10; bash-3.2$ ls -l /usr/bin/matlab&#10; lrwxr-xr-x  1 root  wheel  42 Jan 15 20:57 /usr/bin/matlab -&amp;gt; /Applications/MATLAB_R2009b.app/bin/matlab&#10; bash-3.2$&#10; &lt;/pre&gt;&#10;&#10; Then $MATLAB would be /Applications/MATLAB_R2009b.app&#10;&#10; &lt;dl&gt;&#10; &lt;dt&gt;32 Bit Mac (10.5?, Edit ~/.MacOSX/environment.plist)&lt;/dt&gt;&#10; &lt;dd&gt;&lt;code&gt;export DYLD_LIBRARY_PATH=$MATLAB/bin/maci&lt;/code&gt;&lt;/dd&gt;&#10; &lt;dt&gt;64 Bit Mac (10.6?, Edit ~/.MacOSX/environment.plist)&lt;/dt&gt;&#10; &lt;dd&gt;&lt;code&gt;export DYLD_LIBRARY_PATH=$MATLAB/bin/maci64&lt;/code&gt;&lt;/dd&gt;&#10; &lt;dt&gt;32 Bit Linux (Edit&lt;/dt&gt;&#10; &lt;dd&gt;&lt;code&gt;export LD_LIBRARY_PATH=$MATLAB/bin/gnlx86&lt;/code&gt;&lt;/dd&gt;&#10; &lt;dt&gt;64 Bit Linux&lt;/dt&gt;&#10; &lt;dd&gt;&lt;code&gt;export LD_LIBRARY_PATH=$MATLAB/bin/glnxa64&lt;/code&gt;&lt;/dd&gt;&#10; &lt;dt&gt;Windows (Start|My Computer|Properties|Advanced&#10;       Environment Variables| Add the directory that contains&#10;       matlab.exe to your path)&lt;/dt&gt;&#10; &lt;dd&gt;&lt;code&gt;Be sure that the matlab binary is in your path&lt;/code&gt;&lt;/dd&gt;&#10; &lt;/dl&gt;&#10;&#10; &lt;h2&gt;Notes about Matlab 10.8 and later&lt;/h2&gt;&#10;&#10; &lt;p&gt;Note that under recent version of MacOS, the DYLD_LIBRARY_PATH is no longer used.&#10; The workaround is to be sure that matlab is in your path and to run ./configure.&lt;/p&gt;&#10;&#10; &lt;p&gt;For example:&lt;/p&gt;&#10; &lt;pre&gt;&#10; bash-3.2$ bash-3.2$ which matlab&#10; /Applications/MATLAB_R2018a.app/bin/matlab&#10; &lt;/pre&gt;&#10;&#10; &lt;p&gt;Then, running:&lt;/p&gt;&#10; &lt;pre&gt;&#10; ./configure --enable-verbose&#10; &lt;/pre&gt;&#10;&#10; &lt;p&gt;shows:&lt;/p&gt;&#10;&#10; &lt;pre&gt;&#10; checking for matlab... /Applications/MATLAB_R2018a.app/bin/matlab&#10; checking the value of the Matlab root directory ... '/Applications/MATLAB_R2018a.app'&#10; checking for gcc... checking for gcc... /usr/bin/gcc&#10; checking for malloc_size... yes&#10; checking the extension for Matlab .mex files... mexmaci64&#10; checking which major type of OS we are running under... MacOSX&#10; using '/Applications/MATLAB_R2018a.app/bin/maci' for Matlab's engine libraries&#10; &lt;/pre&gt;&#10;&#10; Then run&#10; &lt;pre&gt;&#10; cd $PTII&#10; ant&#10; cd $PTII/bin&#10; make&#10; cd $PTII/ptolemy/matlab&#10; make clean; make&#10; &lt;pre&gt;&#10;&#10; &lt;p&gt;Here's what libraries are used by libptmatlab.jnilib&lt;/p&gt;&#10;&#10; &lt;pre&gt;&#10; bash-3.2$ otool -L libptmatlab.jnilib&#10; libptmatlab.jnilib:&#10;         libptmatlab64.jnilib (compatibility version 0.0.0, current version 0.0.0)  </description>
  <author>Zoltan Kemenczy and Sean Simmons, Research in Motion Limited</author>
  <version>$Id$</version>
  <since>Ptolemy II 2.0</since>
  <Pt.ProposedRating>Yellow (zkemenczy)</Pt.ProposedRating>
  <Pt.AcceptedRating>Red (cxh)</Pt.AcceptedRating>
    <!--ptolemy.actor.TypedIOPort-->
    <port name="output">The output port.</port>
    <!--ptolemy.data.expr.StringParameter-->
    <property name="expression">The parameter that is evaluated to produce the output.&#10;  Typically, this parameter evaluates an expression involving&#10;  the inputs. To refer to parameters in scope within the expression,&#10;  use $name or ${name}, where &quot;name&quot; is the name of the parameter.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="get1x1asScalars">If true (checked), 1x1 matrix results are converted to&#10;     ScalarTokens instead of a 1x1 MatrixToken, default is&#10;     &lt;i&gt;true&lt;/i&gt;.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="getIntegerMatrices">If true, all double-valued matrix results are checked to see if&#10;     all elements represent integers, and if so, an IntMatrixToken is&#10;     returned, default is &lt;i&gt;false&lt;/i&gt; for performance reasons.</property>
    <!--ptolemy.data.expr.Parameter-->
    <property name="clearEnvironment">If true, clear variables and globals before each execution.</property>
</doc>
